(undo-tree-save-format-version . 1)
"c8ff791f777c5c9dff0ac27977d2be34dd87bf80"
[nil nil nil nil (26286 7234 17525 282000) 0 nil]
([nil nil ((3943 . 3944) (3938 . 3943) (#("m" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -3938) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (#("i" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -3939) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 3940 (3924 . 3940) (3920 . 3924) (#("=" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . -3920) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#("z" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3921) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3922) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 3923 (3911 . 3923) (#("
" 0 1 (fontified t)) . -3911) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 3912 (#("    umin" 0 2 (fontified t) 2 3 (indent-bars-display #("â”‚" 0 1 (face indent-bars-1)) fontified t) 3 4 (fontified t) 4 8 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -3912) (undo-tree-id48 . -8) (undo-tree-id49 . -4) (undo-tree-id50 . -5) (undo-tree-id51 . -4) (undo-tree-id52 . -6) (undo-tree-id53 . -5) (undo-tree-id54 . -7) (undo-tree-id55 . -6) (undo-tree-id56 . -8) (undo-tree-id57 . -7) (undo-tree-id58 . -8) 3920 (3916 . 3920) (3911 . 3916) (#(" " 0 1 (fontified t)) . 3911) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) 3912 (3908 . 3912) (3905 . 3908) (3902 . 3905) (3881 . 3902) (3878 . 3881) (#("  " 0 2 (fontified t)) . 3878) (undo-tree-id62 . -2) (undo-tree-id63 . -2) (undo-tree-id64 . -2) (undo-tree-id65 . -2) (undo-tree-id66 . -2) 3880 (3877 . 3880) 3865 (t 26286 7112 626917 202000)) nil (26286 7234 17522 692000) 0 nil])
([nil nil ((4079 . 4080) 3943) nil (26286 7240 331844 201000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3907 . 3908) (#("
" 0 1 (fontified nil)) . -3932) (3905 . 3933) 3904 (t 26286 7241 140864 975000)) nil (26286 7254 191576 514000) 0 nil] [nil nil ((3944 . 3945) (3939 . 3940) (t 26286 7234 19757 61000)) ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . 3939) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 3944) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (t 26286 7238 580826 180000)) (26286 7238 579622 973000) 0 nil])
([nil nil ((3913 . 3915) (#("min1" 0 4 (face tree-sitter-hl-face:variable fontified t)) . 3913) (undo-tree-id84 . -3) (undo-tree-id85 . -3) (undo-tree-id86 . -3) (undo-tree-id87 . -4) (undo-tree-id88 . -4)) nil (26286 7254 191576 59000) 0 nil])
nil
([nil nil ((3918 . 3929)) nil (26286 7254 191574 414000) 0 nil])
([nil nil ((3949 . 3950) (3942 . 3949) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3942) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3943) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) 3944 (3931 . 3944) (#("minimum xs" 0 7 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 7 8 (fontified t) 8 10 (face tree-sitter-hl-face:variable fontified t)) . 3931) (undo-tree-id79 . -9) (undo-tree-id80 . -10) (undo-tree-id81 . -10) (undo-tree-id82 . -10) (undo-tree-id83 . -10)) nil (26286 7254 191572 779000) 0 nil])
([nil nil ((3957 . 3964) (#("x" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -3957) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) 3958 (3953 . 3958) (3950 . 3953) 3918 (t 26286 7254 194062 778000)) nil (26286 7268 734120 473000) 0 nil])
([nil nil ((3950 . 3952)) nil (26286 7268 734112 75000) 0 nil])
([nil nil ((3997 . 4000) (3996 . 3997) (3988 . 3996) (3984 . 3988) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3984) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) 3985 (3970 . 3985) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3970) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3971) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#(" " 0 1 (fontified t)) . -3972) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3973) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#("1" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3974) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) 3975 (3965 . 3975) (#("U" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -3965) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) 3966 (3965 . 3966) (#(" " 0 1 (fontified t)) . -3965) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (#("x" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3966) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3967) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#(" " 0 1 (fontified t)) . -3968) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) 3969 (3966 . 3969) (#("x" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3966) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) 3967 (3966 . 3967) (t 26286 7268 735283 127000)) nil (26286 7290 793844 501000) 0 nil])
([nil nil ((4025 . 4028) (#("(xs U.// min1)" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 1 3 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 3 4 (fontified t) 4 5 (face tree-sitter-hl-face:type.builtin fontified t) 5 6 (fontified t) 6 7 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 7 8 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 8 9 (fontified t) 9 13 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 13 14 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 4025) (undo-tree-id239 . -13) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -14) (undo-tree-id243 . -14) (undo-tree-id244 . -14) (undo-tree-id245 . -14) (t 26286 7288 163577 518000)) nil (26286 7301 560586 358000) 0 nil] [nil nil ((4008 . 4010) (#("min2" 0 4 (face tree-sitter-hl-face:variable fontified t)) . 4008) (undo-tree-id224 . -3) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (t 26286 7288 163577 518000)) ((4008 . 4012) (#("i2" 0 2 (face tree-sitter-hl-face:variable fontified t)) . 4008) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -2) (undo-tree-id231 . -1)) (26286 7290 792753 832000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4030 . 4031) (#("
" 0 1 (fontified nil)) . -4056) (4028 . 4057) 4027) nil (26286 7301 560584 167000) 0 nil])
nil
([nil nil ((4037 . 4038) (4036 . 4037) (#("min2" 0 4 (face tree-sitter-hl-face:variable fontified t)) . 4036) (undo-tree-id236 . -3) (undo-tree-id237 . -4) (undo-tree-id238 . -4)) nil (26286 7301 560583 763000) 0 nil])
([nil nil ((4041 . 4052)) nil (26286 7301 561399 838000) 0 nil])
([nil nil ((4054 . 4068) (#("minimum" 0 7 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . 4054) (undo-tree-id246 . 7) (undo-tree-id247 . -6) (undo-tree-id248 . -7) (undo-tree-id249 . -7)) nil (26286 7305 86446 397000) 0 nil] [nil nil ((#("." 0 1 (fontified t)) . 4053) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1)) ((4053 . 4054)) (26286 7301 560579 978000) 0 nil])
([nil nil ((3950 . 3951) (t 26286 7305 86833 942000)) nil (26286 7312 129975 313000) 0 nil])
nil
([nil nil ((4111 . 4114) (4110 . 4111) (4092 . 4110) (4091 . 4092) (4086 . 4091) (#("\"TODO\"" 0 1 (face tree-sitter-hl-face:string fontified t) 1 5 (face (warning bold tree-sitter-hl-face:string) fontified t) 5 6 (face tree-sitter-hl-face:string fontified t)) . 4086) (undo-tree-id250 . -5) (undo-tree-id251 . -6) (undo-tree-id252 . -6) (undo-tree-id253 . -6) (undo-tree-id254 . -6) (t 26286 7312 130940 673000)) nil (26286 7325 916993 522000) 0 nil])
([nil nil ((4114 . 4119) (t 26286 7325 918149 570000)) nil (26286 7329 250715 882000) 0 nil])
([nil nil ((3980 . 3982) (t 26286 7329 251200 67000)) nil (26286 7346 413749 256000) 0 nil])
([nil nil ((4120 . 4124) (4116 . 4120) (#("False" 0 5 (face tree-sitter-hl-face:constructor fontified t)) . 4116) (undo-tree-id255 . -4) (undo-tree-id256 . -5) (undo-tree-id257 . -5) (t 26286 7346 414459 554000)) nil (26286 7357 147612 5000) 0 nil])
([nil nil ((3895 . 3902) (#("minimum" 0 7 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . 3895) (undo-tree-id261 . -6) (undo-tree-id262 . -7) (undo-tree-id263 . -7) (t 26286 7357 148621 624000)) nil (26286 7377 264553 336000) 0 nil])
([nil nil ((4020 . 4027) (#("minimum" 0 7 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . 4020) (undo-tree-id258 . -6) (undo-tree-id259 . -7) (undo-tree-id260 . -7)) nil (26286 7377 264550 266000) 0 nil])
([nil nil ((4021 . 4026) (4018 . 4021) (t 26286 7377 265925 387000)) nil (26286 7388 585281 592000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3926) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (#("s" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . -3927) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) 3928 (3918 . 3928) (t 26286 7388 586096 328000)) nil (26286 7402 352915 364000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . -4068) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (#("s" 0 1 (fontified nil)) . -4069) (undo-tree-id268 . -1) (undo-tree-id269 . -1) 4070 (4060 . 4070)) nil (26286 7402 352911 164000) 0 nil])
([nil nil ((nil fontified t 4116 . 4117) (nil face tree-sitter-hl-face:operator 4116 . 4117) (4116 . 4117) 4101 (t 26286 7402 353304 233000)) nil (26286 7417 233488 861000) 0 nil])
([nil nil ((4142 . 4143) (#("2" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . 4142) (undo-tree-id280 . -1) (t 26286 7417 234528 974000)) nil (26286 7422 188927 690000) 0 nil])
([nil current ((4148 . 4149) (#("1" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . 4148) (undo-tree-id281 . -1) (t 26286 7422 189603 809000)) nil (26286 7425 71609 180000) 0 nil])
nil
