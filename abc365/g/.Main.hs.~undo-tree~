(undo-tree-save-format-version . 1)
"6ed66c9b6951cc8130127c9d812fa4d628966928"
[nil nil nil nil (26286 11043 457656 909000) 0 nil]
([nil nil ((nil rear-nonsticky nil 4012 . 4013) (#("
" 0 1 (fontified nil)) . -4667) (4012 . 4668) 3994 (t 26286 7112 644917 474000)) nil (26286 11043 457656 204000) 0 nil])
([nil nil ((#("
solve :: StateT BS.ByteString IO ()
solve = do
  !n <- int'
  !xs <- intsU'

  printBSB \"TODO\"

-- verification-helper: PROBLEM https://atcoder.jp/contests/abc365/tasks/abc365_g
main :: IO ()
main = runIO solve
" 0 1 (fontified t) 1 6 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 6 7 (fontified t) 7 9 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 9 10 (haskell-type t font-lock-multiline t fontified t) 10 16 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 16 17 (haskell-type t font-lock-multiline t fontified t) 17 19 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type.builtin fontified t) 19 20 (haskell-type t font-lock-multiline t fontified t) 20 30 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 30 31 (haskell-type t font-lock-multiline t fontified t) 31 33 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 33 34 (haskell-type t font-lock-multiline t fontified t) 34 35 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 35 36 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 36 37 (haskell-type t font-lock-multiline t fontified t) 37 42 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 42 43 (fontified t) 43 44 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 44 45 (fontified t) 45 47 (face tree-sitter-hl-face:keyword fontified t) 47 50 (fontified t) 50 51 (face haskell-operator-face syntax-table (1) fontified t) 51 52 (face tree-sitter-hl-face:variable fontified t) 52 53 (fontified t) 53 55 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 55 56 (fontified t) 56 60 (face tree-sitter-hl-face:variable fontified t) 60 63 (fontified t) 63 64 (face haskell-operator-face syntax-table (1) fontified t) 64 66 (face tree-sitter-hl-face:variable fontified t) 66 67 (fontified t) 67 69 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 69 70 (fontified t) 70 76 (face tree-sitter-hl-face:variable fontified t) 76 80 (fontified t) 80 88 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 88 89 (fontified t) 89 90 (face tree-sitter-hl-face:string fontified t) 90 94 (face (warning bold tree-sitter-hl-face:string) fontified t) 94 95 (face tree-sitter-hl-face:string fontified t) 95 97 (fontified t) 97 178 (face tree-sitter-hl-face:comment fontified t) 178 179 (fontified t) 179 183 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 183 184 (fontified t) 184 186 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 186 187 (haskell-type t font-lock-multiline t fontified t) 187 189 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 189 190 (haskell-type t font-lock-multiline t fontified t) 190 191 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 191 192 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 192 193 (haskell-type t font-lock-multiline t fontified t) 193 197 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 197 198 (fontified t) 198 199 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 199 200 (fontified t) 200 205 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 205 206 (fontified t) 206 211 (face tree-sitter-hl-face:variable fontified t) 211 212 (rear-nonsticky t fontified t)) . 3801) (undo-tree-id0 . -193) (undo-tree-id1 . -193) (undo-tree-id2 . -211) (undo-tree-id3 . -212) (undo-tree-id4 . -193) (undo-tree-id5 . -212) (undo-tree-id6 . -212) (undo-tree-id7 . -212) (undo-tree-id8 . -212) (undo-tree-id9 . -212) (undo-tree-id10 . -212) (undo-tree-id11 . -212) (undo-tree-id12 . -193) (undo-tree-id13 . -212) (undo-tree-id14 . -193) (undo-tree-id15 . -193) (undo-tree-id16 . -193) (undo-tree-id17 . -193) (undo-tree-id18 . -96) (undo-tree-id19 . -193) (undo-tree-id20 . -96) (undo-tree-id21 . -77) (undo-tree-id22 . -96) (undo-tree-id23 . -77) (undo-tree-id24 . -77) (undo-tree-id25 . -212) (undo-tree-id26 . -212) (undo-tree-id27 . -212)) nil (26286 11043 457655 359000) 0 nil])
([nil nil ((4455 . 4456) 3801) nil (26286 11043 457622 387000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3604 . 3605) (#("
" 0 1 (fontified nil)) . -3626) (3604 . 3627) 3583 (t 26286 11043 458236 369000)) nil (26286 11080 113012 219000) 0 nil])
([nil nil ((apply 3 3605 3623 undo--wrap-and-run-primitive-undo 3605 3623 ((#("-- " 0 3 (face tree-sitter-hl-face:comment fontified t)) . -3605)))) nil (26286 11080 113011 843000) 0 nil])
([nil nil ((3618 . 3628) (3617 . 3617) (3617 . 3618) (#("Primes" 0 6 (face (tree-sitter-hl-face:type.builtin tree-sitter-hl-face:operator) fontified t)) . 3617) (undo-tree-id99 . -5) (undo-tree-id100 . -6) (undo-tree-id101 . -6) (undo-tree-id102 . -6) (undo-tree-id103 . -6)) nil (26286 11080 113011 474000) 0 nil])
([nil nil ((#("Set" 0 3 (face (tree-sitter-hl-face:type.builtin tree-sitter-hl-face:operator) fontified t)) . 3625) (undo-tree-id74 . -2) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -2) (undo-tree-id78 . -2) (undo-tree-id79 . -3) (undo-tree-id80 . -3) (undo-tree-id81 . -2) (undo-tree-id82 . -3) (undo-tree-id83 . -2) (undo-tree-id84 . -2) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -2) (undo-tree-id88 . -2) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (undo-tree-id92 . -2) (undo-tree-id93 . -2) (undo-tree-id94 . -2) (undo-tree-id95 . -3) (undo-tree-id96 . -3) (undo-tree-id97 . -3) (undo-tree-id98 . -3)) nil (26286 11080 113009 408000) 0 nil])
([nil nil ((3617 . 3617) (3617 . 3628) (#("IntervalM" 0 9 (fontified nil)) . -3617) (3617 . 3626) (#("IntervalMap" 0 11 (face (tree-sitter-hl-face:type.builtin tree-sitter-hl-face:operator) fontified t)) . -3617) (undo-tree-id28 . -8) (undo-tree-id29 . -8) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -2) (undo-tree-id33 . -2) (undo-tree-id34 . -3) (undo-tree-id35 . -3) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -5) (undo-tree-id39 . -5) (undo-tree-id40 . -6) (undo-tree-id41 . -6) (undo-tree-id42 . -7) (undo-tree-id43 . -7) (undo-tree-id44 . -8) (undo-tree-id45 . -8) (undo-tree-id46 . -8) (undo-tree-id47 . -8) (undo-tree-id48 . -8) (undo-tree-id49 . -8) (undo-tree-id50 . -8) (undo-tree-id51 . -8) (undo-tree-id52 . -8) (undo-tree-id53 . -8) (undo-tree-id54 . -8) (undo-tree-id55 . -8) (undo-tree-id56 . -8) (undo-tree-id57 . -8) (undo-tree-id58 . -8) (undo-tree-id59 . -8) (undo-tree-id60 . -8) (undo-tree-id61 . -8) (undo-tree-id62 . -8) (undo-tree-id63 . -8) (undo-tree-id64 . -8) (undo-tree-id65 . -8) (undo-tree-id66 . -11) (undo-tree-id67 . -8) (undo-tree-id68 . -8) (undo-tree-id69 . -8) (undo-tree-id70 . -9) (undo-tree-id71 . -9) (undo-tree-id72 . -10) (undo-tree-id73 . -10) (3626 . 3628) (3625 . 3625) (3625 . 3626)) nil (26286 11080 113001 820000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-unmatched-face tree-sitter-hl-face:punctuation.bracket) fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -3628) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("}" 0 1 (face (rainbow-delimiters-unmatched-face tree-sitter-hl-face:punctuation.bracket) fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -3629) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#("}" 0 1 (face (rainbow-delimiters-unmatched-face tree-sitter-hl-face:punctuation.bracket) fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -3630) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (#("}" 0 1 (face (rainbow-delimiters-unmatched-face tree-sitter-hl-face:punctuation.bracket) fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -3631) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("}" 0 1 (face (rainbow-delimiters-unmatched-face tree-sitter-hl-face:punctuation.bracket) fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -3632) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) 3633 (3628 . 3633) (t 26286 11080 114782 941000)) nil (26286 11082 322354 950000) 0 nil])
([nil nil ((4077 . 4224) 4096 (t 26286 11082 322815 846000)) nil (26286 11097 175871 673000) 0 nil])
([nil nil ((4097 . 4097) (4097 . 4098)) nil (26286 11097 175871 263000) 0 nil])
([nil nil ((#("V.map (V.fromList . reverse) . V.accumulate (:) (V.replicate n []) $ V.map swap $ U.modify (VAI.sortBy (comparing fst)) tps" 0 1 (face tree-sitter-hl-face:type.builtin fontified t) 1 2 (fontified t) 2 5 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 5 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 7 8 (face tree-sitter-hl-face:type.builtin fontified t) 8 9 (fontified t) 9 17 (face tree-sitter-hl-face:variable fontified t) 17 18 (fontified t) 18 19 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 19 20 (fontified t) 20 27 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 27 28 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 28 29 (fontified t) 29 30 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 30 31 (fontified t) 31 32 (face tree-sitter-hl-face:type.builtin fontified t) 32 33 (fontified t) 33 43 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 43 44 (fontified t) 44 45 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 45 46 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 46 47 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 47 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 49 50 (face tree-sitter-hl-face:type.builtin fontified t) 50 51 (fontified t) 51 60 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 60 61 (fontified t) 61 62 (face tree-sitter-hl-face:variable fontified t) 62 63 (fontified t) 63 64 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 64 65 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 65 66 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 66 67 (fontified t) 67 68 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 68 69 (fontified t) 69 70 (face tree-sitter-hl-face:type.builtin fontified t) 70 71 (fontified t) 71 74 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 74 75 (fontified t) 75 79 (face tree-sitter-hl-face:variable fontified t) 79 80 (fontified t) 80 81 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 81 82 (fontified t) 82 83 (face tree-sitter-hl-face:type.builtin fontified t) 83 84 (fontified t) 84 90 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 90 91 (fontified t) 91 92 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 92 95 (face tree-sitter-hl-face:type.builtin fontified t) 95 96 (fontified t) 96 102 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 102 103 (fontified t) 103 104 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 104 113 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 113 114 (fontified t) 114 117 (face tree-sitter-hl-face:variable fontified t) 117 118 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 118 119 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 119 120 (fontified t) 120 123 (face tree-sitter-hl-face:variable fontified t)) . 4101) (undo-tree-id172 . -122) (undo-tree-id173 . -123) (undo-tree-id174 . -123)) nil (26286 11097 175870 590000) 0 nil])
([nil nil ((#("V.map swap $ U.modify (VAI.sortBy (comparing fst)) tps" 0 1 (face tree-sitter-hl-face:type.builtin fontified t) 1 2 (fontified t) 2 5 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 5 6 (fontified t) 6 10 (face tree-sitter-hl-face:variable fontified t) 10 11 (fontified t) 11 12 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 12 13 (fontified t) 13 14 (face tree-sitter-hl-face:type.builtin fontified t) 14 15 (fontified t) 15 21 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 21 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 23 26 (face tree-sitter-hl-face:type.builtin fontified t) 26 27 (fontified t) 27 33 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 33 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 35 44 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 44 45 (fontified t) 45 48 (face tree-sitter-hl-face:variable fontified t) 48 49 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 49 50 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 50 51 (fontified t) 51 54 (face tree-sitter-hl-face:variable fontified t)) . 4194) (undo-tree-id169 . -53) (undo-tree-id170 . -54) (undo-tree-id171 . -54)) nil (26286 11097 175868 524000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4154 . 4155) (nil fontified nil 4101 . 4155) (4101 . 4155) 4100) nil (26286 11105 623626 183000) 0 nil])
([nil nil ((4248 . 4260)) ((#("tspByPerson_" 0 12 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . 4248) (undo-tree-id175 . -12) (undo-tree-id176 . -11) (undo-tree-id177 . -11) (undo-tree-id178 . -12) (undo-tree-id179 . -11) (undo-tree-id180 . -11) (undo-tree-id181 . -11) (undo-tree-id182 . -11) (undo-tree-id183 . -11) (undo-tree-id184 . -11) (undo-tree-id185 . -11) (undo-tree-id186 . -11) (t 26286 11097 178037 170000)) (26286 11106 278179 160000) 0 nil])
([nil nil ((4113 . 4124) (4112 . 4113) (t 26286 11097 178037 170000)) nil (26286 11112 5641 907000) 0 nil])
([nil nil ((#("!" 0 1 (face haskell-operator-face syntax-table (1) fontified t)) . 4085) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (t 26286 11112 8258 31000)) nil (26286 11113 988289 45000) 0 nil])
([nil nil ((4242 . 4243) (4235 . 4241) (t 26286 11113 988287 511000)) nil (26286 11143 389659 484000) 0 nil])
([nil nil ((4304 . 4305) (4299 . 4304) (4278 . 4299) (t 26286 11137 138632 86000)) nil (26286 11149 256912 286000) 0 nil] [nil nil ((4187 . 4188) (t 26286 11137 138632 86000)) ((#(" " 0 1 (fontified t)) . 4187) (undo-tree-id212 . -1)) (26286 11143 388213 369000) 0 nil] [nil nil ((#("!" 0 1 (face haskell-operator-face syntax-table (1) fontified t)) . 4175) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (t 26286 11132 611564 721000)) ((4175 . 4176) (t 26286 11136 601624 96000)) (26286 11136 600848 950000) 0 nil])
([nil nil ((#(" :: V.Vector (V.Vector Int)" 0 1 (fontified t) 1 2 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 2 3 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 3 4 (haskell-type t font-lock-multiline t fontified t) 4 5 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type.builtin fontified t) 5 6 (haskell-type t font-lock-multiline t fontified t) 6 12 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 12 13 (haskell-type t font-lock-multiline t fontified t) 13 14 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 14 15 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type.builtin fontified t) 15 16 (haskell-type t font-lock-multiline t fontified t) 16 22 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 22 23 (haskell-type t font-lock-multiline t fontified t) 23 26 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 26 27 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 4278) (undo-tree-id213 . -26) (undo-tree-id214 . 27) (undo-tree-id215 . -26) (undo-tree-id216 . -27) (undo-tree-id217 . -26) (undo-tree-id218 . -26) (undo-tree-id219 . -26) (undo-tree-id220 . -26) (undo-tree-id221 . -26) (undo-tree-id222 . -26) (undo-tree-id223 . -26) (undo-tree-id224 . -26) (undo-tree-id225 . -26) (undo-tree-id226 . -23) (undo-tree-id227 . -26) (undo-tree-id228 . -26) (undo-tree-id229 . -23) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -27) (undo-tree-id233 . -27) (t 26286 11149 257812 390000)) nil (26286 11162 806644 518000) 0 nil])
nil
nil
([nil nil ((nil rear-nonsticky nil 4214 . 4215) (nil fontified nil 4188 . 4215) (4188 . 4215)) nil (26286 11162 806632 255000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4188) (4215 . 4216) 4214 (#(" " 0 1 (fontified t)) . 4368) 4353) nil (26286 11162 806628 693000) 0 nil])
([nil nil ((4293 . 4305) (#("tspByPerson_" 0 12 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . 4293) (undo-tree-id234 . -11) (undo-tree-id235 . -11) (undo-tree-id236 . -11) (undo-tree-id237 . -11) (undo-tree-id238 . -12) (undo-tree-id239 . -12) (undo-tree-id240 . -12) (undo-tree-id241 . -12) (undo-tree-id242 . -12) (undo-tree-id243 . -12) (undo-tree-id244 . -12) (undo-tree-id245 . -12) (undo-tree-id246 . -12) (undo-tree-id247 . -12) (undo-tree-id248 . -12) (undo-tree-id249 . -12) (undo-tree-id250 . -12) (undo-tree-id251 . -12) (undo-tree-id252 . -11) (undo-tree-id253 . -11) (undo-tree-id254 . -12) (undo-tree-id255 . -12) (undo-tree-id256 . -11) (undo-tree-id257 . -11) (undo-tree-id258 . -11) (undo-tree-id259 . -11) (undo-tree-id260 . -11) (undo-tree-id261 . -12) (undo-tree-id262 . -12) (undo-tree-id263 . -12) (undo-tree-id264 . -12) (t 26286 11162 808013 918000)) nil (26286 11179 634748 156000) 0 nil])
([nil nil ((#(":: V.Vector (V.Vector Int)" 0 2 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 2 3 (haskell-type t font-lock-multiline t fontified t) 3 4 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type.builtin fontified t) 4 5 (haskell-type t font-lock-multiline t fontified t) 5 11 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 11 12 (haskell-type t font-lock-multiline t fontified t) 12 13 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 13 14 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type.builtin fontified t) 14 15 (haskell-type t font-lock-multiline t fontified t) 15 21 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 21 22 (haskell-type t font-lock-multiline t fontified t) 22 25 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 25 26 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) rear-nonsticky t fontified t)) . 4188) (undo-tree-id267 . -25) (undo-tree-id268 . -25) (undo-tree-id269 . -25) (undo-tree-id270 . -3) (undo-tree-id271 . -3) (undo-tree-id272 . -26) (t 26286 11179 636264 110000)) nil (26286 11191 720427 544000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4188) (undo-tree-id265 . -1) (undo-tree-id266 . -1)) nil (26286 11191 720424 22000) 0 nil])
([nil nil ((4341 . 4345) (t 26286 11191 721443 723000)) nil (26286 11215 973524 958000) 0 nil])
([nil nil ((4347 . 4350) (#("=" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . -4347) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) 4348 (4338 . 4348) (#("S" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4338) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) 4339 (4332 . 4339) (#("forM_ tps $ \\" 0 5 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 5 6 (fontified t) 6 9 (face tree-sitter-hl-face:variable fontified t) 9 10 (fontified t) 10 11 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 11 12 (fontified t) 12 13 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . 4332) (undo-tree-id289 . -12) (undo-tree-id290 . -8) (undo-tree-id291 . -6) (undo-tree-id292 . -8) (undo-tree-id293 . -9) (undo-tree-id294 . -6) (undo-tree-id295 . -10) (undo-tree-id296 . -9) (undo-tree-id297 . -10) (undo-tree-id298 . -10) (undo-tree-id299 . -10) (undo-tree-id300 . -10) (undo-tree-id301 . -10) (undo-tree-id302 . -10) (undo-tree-id303 . -10) (undo-tree-id304 . -11) (undo-tree-id305 . -10) (undo-tree-id306 . -12) (undo-tree-id307 . -11) (undo-tree-id308 . -13) (undo-tree-id309 . -12) (undo-tree-id310 . -12) (undo-tree-id311 . -13) (undo-tree-id312 . -12) (undo-tree-id313 . -13) (undo-tree-id314 . -13) (undo-tree-id315 . -13) (undo-tree-id316 . -13)) nil (26286 11215 973523 809000) 0 nil])
([nil nil ((nil fontified nil 4337 . 4338) (nil face haskell-operator-face 4337 . 4338) (4337 . 4338) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4337) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1)) nil (26286 11215 973514 316000) 0 nil])
([nil nil ((4359 . 4362) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4359) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) 4360 (4350 . 4360)) nil (26286 11215 973511 397000) 0 nil])
([nil nil ((4360 . 4361)) nil (26286 11215 973501 695000) 0 nil])
([nil nil ((4369 . 4377) (4368 . 4369) (4364 . 4368) (4350 . 4351)) nil (26286 11215 973497 291000) 0 nil])
([nil nil ((4431 . 4432) (4430 . 4431) (4422 . 4430) (4413 . 4422) (#(" " 0 1 (fontified t)) . -4413) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) 4414 (4409 . 4414) (4405 . 4409) (4384 . 4405) (4377 . 4384) 4376 (t 26286 11215 975804 48000)) nil (26286 11240 195256 53000) 0 nil])
([nil nil ((4316 . 4318) (#("ps'" 0 3 (face tree-sitter-hl-face:variable fontified t)) . 4316) (undo-tree-id476 . -2) (undo-tree-id477 . -2) (undo-tree-id478 . -1) (undo-tree-id479 . -2) (undo-tree-id480 . -1) (undo-tree-id481 . -3) (undo-tree-id482 . -3) (t 26286 11230 190015 125000)) nil (26286 11246 198121 903000) 0 nil] [nil nil ((#("    V.iforM_ tpsByPerson $ \\iPerson tps' -> do
      let !nIntervals = (G.length tps' + 1) `div` 2
" 0 2 (fontified t) 2 3 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 3 4 (fontified t) 4 5 (face tree-sitter-hl-face:type.builtin fontified t) 5 6 (fontified t) 6 7 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 7 12 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 12 13 (fontified t) 13 24 (face tree-sitter-hl-face:variable fontified t) 24 25 (fontified t) 25 26 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 26 27 (fontified t) 27 28 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 28 35 (face tree-sitter-hl-face:variable fontified t) 35 36 (fontified t) 36 40 (face tree-sitter-hl-face:variable fontified t) 40 41 (fontified t) 41 42 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 42 43 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 43 44 (fontified t) 44 46 (face tree-sitter-hl-face:keyword fontified t) 46 47 (fontified t) 47 49 (fontified t) 49 50 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 50 51 (fontified t) 51 52 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 52 53 (fontified t) 53 56 (face tree-sitter-hl-face:keyword fontified t) 56 57 (fontified t) 57 58 (face haskell-operator-face syntax-table (1) fontified t) 58 59 (face tree-sitter-hl-face:variable fontified t) 59 68 (face tree-sitter-hl-face:variable fontified t) 68 69 (fontified t) 69 70 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 70 71 (fontified t) 71 72 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 72 73 (face tree-sitter-hl-face:type.builtin fontified t) 73 74 (fontified t) 74 80 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 80 81 (fontified t) 81 85 (face tree-sitter-hl-face:variable fontified t) 85 86 (fontified t) 86 87 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 87 88 (fontified t) 88 89 (face tree-sitter-hl-face:number syntax-table (2) fontified t) 89 90 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 90 91 (fontified t) 91 92 (font-lock-multiline t face tree-sitter-hl-face:operator font-lock-fontified t fontified t) 92 95 (font-lock-multiline t face (tree-sitter-hl-face:operator tree-sitter-hl-face:variable) font-lock-fontified t fontified t) 95 96 (font-lock-multiline t face tree-sitter-hl-face:operator font-lock-fontified t fontified t) 96 97 (font-lock-fontified t fontified t) 97 98 (face tree-sitter-hl-face:number syntax-table (2) font-lock-fontified t fontified t) 98 99 (fontified t font-lock-fontified t)) . 4279) (undo-tree-id445 . -98) (undo-tree-id446 . -97) (undo-tree-id447 . -97) (undo-tree-id448 . -64) (undo-tree-id449 . -17) (undo-tree-id450 . -64) (undo-tree-id451 . -17) (undo-tree-id452 . -17) (undo-tree-id453 . -17) (undo-tree-id454 . -99) (t 26286 11230 190015 125000)) ((4279 . 4378)) (26286 11239 587476 929000) 0 nil])
([nil nil ((4362 . 4364) (#("'" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4362) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1)) nil (26286 11246 198119 671000) 0 nil])
([nil nil ((#("{- ORMOLU_ENABLE -}

solve :: StateT BS.ByteString IO ()
solve = do
  (!n, !m) <- ints2'
  tps <- U.replicateM n ints11'
  !q <- int'
  qs <- U.replicateM q ints11'

  (!maps, !sizes) <- runST $ do
    sizes <- UM.replicate n (0 :: Int)
    vec <- VM.replicate n emptyIM

    let tpsByPerson_ = V.map swap . U.convert $ U.modify (VAI.sortBy (comparing fst)) tps
    let !tpsByPerson = V.map (V.fromList . reverse) . V.accumulate (flip (:)) (V.replicate n []) $ tpsByPerson_
      U.genearte nIntervals $ \\i ->
        let (!t1, 

    (,) <$> U.unsafeFreeze vec <*> U.unsafeFreeze sizes

  printBSB \"TODO\"

-- verification-helper: PROBLEM https://atcoder.jp/contests/abc365/tasks/abc365_f
main :: IO ()
main = runIO solve" 0 19 (face tree-sitter-hl-face:comment fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 26 (face tree-sitter-hl-face:variable fontified t) 26 27 (fontified t) 27 29 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 29 30 (haskell-type t font-lock-multiline t fontified t) 30 36 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 36 37 (haskell-type t font-lock-multiline t fontified t) 37 39 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type.builtin fontified t) 39 40 (haskell-type t font-lock-multiline t fontified t) 40 50 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 50 51 (haskell-type t font-lock-multiline t fontified t) 51 53 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 53 54 (haskell-type t font-lock-multiline t fontified t) 54 55 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 55 56 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 56 57 (haskell-type t font-lock-multiline t fontified t) 57 62 (face tree-sitter-hl-face:type.argument fontified t) 62 63 (fontified t) 63 64 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 64 65 (fontified t) 65 67 (face tree-sitter-hl-face:keyword fontified t) 67 68 (fontified t) 68 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 71 72 (face haskell-operator-face fontified t syntax-table (1)) 72 73 (face tree-sitter-hl-face:variable fontified t) 73 74 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 74 75 (fontified t) 75 76 (face haskell-operator-face fontified t syntax-table (1)) 76 77 (face tree-sitter-hl-face:variable fontified t) 77 78 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 78 79 (fontified t) 79 81 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 81 82 (fontified t) 82 88 (face tree-sitter-hl-face:variable fontified t) 88 89 (fontified t) 89 90 (fontified t) 90 91 (fontified t rear-nonsticky t) 91 94 (face tree-sitter-hl-face:variable fontified t) 94 95 (fontified t) 95 97 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 97 98 (fontified t) 98 99 (face tree-sitter-hl-face:type.builtin fontified t) 99 100 (fontified t) 100 110 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 110 111 (fontified t) 111 112 (face tree-sitter-hl-face:variable fontified t) 112 113 (fontified t) 113 117 (face tree-sitter-hl-face:variable fontified t) 117 118 (face tree-sitter-hl-face:variable fontified t) 118 120 (face tree-sitter-hl-face:variable fontified t) 120 121 (fontified t) 121 123 (fontified t) 123 124 (face haskell-operator-face fontified t syntax-table (1)) 124 125 (face tree-sitter-hl-face:variable fontified t) 125 126 (fontified t) 126 127 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 127 128 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 128 129 (fontified t) 129 133 (face tree-sitter-hl-face:variable fontified t) 133 134 (fontified t) 134 136 (fontified t) 136 138 (face tree-sitter-hl-face:variable fontified t) 138 139 (fontified t) 139 140 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 140 141 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 141 142 (fontified t) 142 143 (face tree-sitter-hl-face:type.builtin fontified t) 143 144 (fontified t) 144 154 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 154 155 (fontified t) 155 156 (face tree-sitter-hl-face:variable fontified t) 156 157 (fontified t) 157 164 (face tree-sitter-hl-face:variable fontified t) 164 165 (fontified t) 165 166 (fontified t) 166 168 (fontified t) 168 169 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 169 170 (face haskell-operator-face fontified t syntax-table (1)) 170 174 (face tree-sitter-hl-face:variable fontified t) 174 175 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 175 176 (fontified t) 176 177 (face haskell-operator-face fontified t syntax-table (1)) 177 182 (face tree-sitter-hl-face:variable fontified t) 182 183 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 183 184 (fontified t) 184 185 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 185 186 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 186 187 (fontified t) 187 192 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 192 193 (fontified t) 193 194 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 194 195 (fontified t) 195 197 (face tree-sitter-hl-face:keyword fontified t) 197 198 (fontified t) 198 200 (fontified t) 200 201 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 201 202 (fontified t) 202 207 (face tree-sitter-hl-face:variable fontified t) 207 208 (fontified t) 208 209 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 209 210 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 210 211 (fontified t) 211 213 (face tree-sitter-hl-face:type.builtin fontified t) 213 214 (fontified t) 214 223 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 223 224 (fontified t) 224 225 (face tree-sitter-hl-face:variable fontified t) 225 226 (fontified t) 226 227 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 227 228 (face tree-sitter-hl-face:number fontified t syntax-table (2)) 228 229 (fontified t) 229 230 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 230 231 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 231 232 (haskell-type t font-lock-multiline t fontified t) 232 233 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 233 235 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 235 236 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 236 237 (fontified t) 237 239 (fontified t) 239 240 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 240 241 (fontified t) 241 244 (face tree-sitter-hl-face:variable fontified t) 244 245 (fontified t) 245 246 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 246 247 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 247 248 (fontified t) 248 250 (face tree-sitter-hl-face:type.builtin fontified t) 250 251 (fontified t) 251 260 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 260 261 (fontified t) 261 262 (face tree-sitter-hl-face:variable fontified t) 262 263 (fontified t) 263 270 (face tree-sitter-hl-face:variable fontified t) 270 271 (fontified t) 271 272 (indent-bars-display #("  │
" 2 3 (face indent-bars-1)) fontified t) 272 273 (fontified t) 273 274 (fontified t rear-nonsticky t) 274 275 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 275 276 (fontified t) 276 279 (face tree-sitter-hl-face:keyword fontified t) 279 280 (fontified t) 280 292 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 292 293 (fontified t) 293 294 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 294 295 (fontified t) 295 296 (face tree-sitter-hl-face:type.builtin fontified t) 296 297 (fontified t) 297 300 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 300 301 (fontified t) 301 305 (face tree-sitter-hl-face:variable fontified t) 305 306 (fontified t) 306 307 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 307 308 (fontified t) 308 309 (face tree-sitter-hl-face:type.builtin fontified t) 309 310 (fontified t) 310 317 (face tree-sitter-hl-face:variable fontified t) 317 318 (fontified t) 318 319 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 319 320 (fontified t) 320 321 (face tree-sitter-hl-face:type.builtin fontified t) 321 322 (fontified t) 322 328 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 328 329 (fontified t) 329 330 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 330 333 (face tree-sitter-hl-face:type.builtin fontified t) 333 334 (fontified t) 334 340 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 340 341 (fontified t) 341 342 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 342 351 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 351 352 (fontified t) 352 355 (face tree-sitter-hl-face:variable fontified t) 355 356 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 356 357 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 357 358 (fontified t) 358 360 (face tree-sitter-hl-face:variable fontified t) 360 361 (face tree-sitter-hl-face:variable rear-nonsticky t fontified t) 361 362 (fontified t) 362 363 (fontified t) 363 364 (fontified t rear-nonsticky t) 364 365 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 365 366 (fontified t) 366 369 (face tree-sitter-hl-face:keyword fontified t) 369 370 (fontified t) 370 371 (face haskell-operator-face syntax-table (1) fontified t) 371 382 (face tree-sitter-hl-face:variable fontified t) 382 383 (fontified t) 383 384 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 384 385 (fontified t) 385 386 (face tree-sitter-hl-face:type.builtin fontified t) 386 387 (fontified t) 387 390 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 390 391 (fontified t) 391 392 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 392 393 (face tree-sitter-hl-face:type.builtin fontified t) 393 394 (fontified t) 394 402 (face tree-sitter-hl-face:variable fontified t) 402 403 (fontified t) 403 404 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 404 405 (fontified t) 405 412 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 412 413 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 413 414 (fontified t) 414 415 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 415 416 (fontified t) 416 417 (face tree-sitter-hl-face:type.builtin fontified t) 417 418 (fontified t) 418 428 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 428 429 (fontified t) 429 430 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 430 434 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 434 435 (fontified t) 435 436 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 436 437 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 437 438 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 438 439 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 439 440 (fontified t) 440 441 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 441 442 (face tree-sitter-hl-face:type.builtin fontified t) 442 443 (fontified t) 443 452 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 452 453 (fontified t) 453 454 (face tree-sitter-hl-face:variable fontified t) 454 455 (fontified t) 455 456 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 456 457 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 457 458 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 458 459 (fontified t) 459 460 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 460 461 (fontified t) 461 473 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 473 474 (fontified t) 474 476 (fontified t) 476 477 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 477 478 (fontified t) 478 479 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 479 480 (fontified t) 480 481 (face tree-sitter-hl-face:type.builtin fontified t) 481 482 (fontified t) 482 490 (face tree-sitter-hl-face:variable fontified t) 490 491 (fontified t) 491 501 (face tree-sitter-hl-face:variable fontified t) 501 502 (fontified t) 502 503 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 503 504 (fontified t) 504 505 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 505 506 (face tree-sitter-hl-face:variable fontified t) 506 507 (fontified t) 507 508 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 508 509 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 509 510 (fontified t) 510 512 (fontified t) 512 513 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 513 514 (fontified t) 514 515 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 515 516 (fontified t) 516 517 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified t) 517 518 (fontified t) 518 521 (face tree-sitter-hl-face:keyword fontified t) 521 522 (fontified t) 522 523 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 523 524 (face haskell-operator-face fontified t syntax-table (1)) 524 526 (face tree-sitter-hl-face:variable fontified t) 526 527 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 527 528 (fontified t) 528 529 (fontified t) 529 530 (indent-bars-display #("  │ │ │
" 2 3 (face indent-bars-1) 4 5 (face indent-bars-2) 6 7 (face indent-bars-3)) fontified t) 530 532 (fontified t) 532 533 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 533 534 (fontified t) 534 535 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 535 536 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 536 537 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 537 538 (fontified t) 538 539 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 539 540 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 540 541 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 541 542 (fontified t) 542 543 (face tree-sitter-hl-face:type.builtin fontified t) 543 544 (fontified t) 544 556 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 556 557 (fontified t) 557 560 (face tree-sitter-hl-face:variable fontified t) 560 561 (fontified t) 561 562 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 562 563 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 563 564 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 564 565 (fontified t) 565 566 (face tree-sitter-hl-face:type.builtin fontified t) 566 567 (fontified t) 567 579 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 579 580 (fontified t) 580 585 (face tree-sitter-hl-face:variable fontified t) 585 586 (fontified t) 586 587 (indent-bars-display #("  │
" 2 3 (face indent-bars-1)) fontified t) 587 589 (fontified t) 589 597 (face tree-sitter-hl-face:variable fontified t) 597 598 (fontified t) 598 599 (face tree-sitter-hl-face:string fontified t) 599 603 (face (warning bold tree-sitter-hl-face:string) fontified t) 603 604 (face tree-sitter-hl-face:string fontified t) 604 606 (fontified t) 606 687 (face tree-sitter-hl-face:comment fontified t) 687 688 (fontified t) 688 692 (face tree-sitter-hl-face:variable fontified t) 692 693 (fontified t) 693 695 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 695 696 (haskell-type t font-lock-multiline t fontified t) 696 698 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 698 699 (haskell-type t font-lock-multiline t fontified t) 699 700 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 700 701 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 701 702 (haskell-type t font-lock-multiline t fontified t) 702 706 (face tree-sitter-hl-face:type.argument fontified t) 706 707 (fontified t) 707 708 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 708 709 (fontified t) 709 714 (face tree-sitter-hl-face:type.argument fontified t) 714 715 (fontified t) 715 720 (face tree-sitter-hl-face:type.argument fontified t)) . 3805) (undo-tree-id320 . -719) (undo-tree-id321 . -719) (undo-tree-id322 . -719) (undo-tree-id323 . -20) (undo-tree-id324 . -20) (undo-tree-id325 . -20) (undo-tree-id326 . -20) (undo-tree-id327 . -20) (undo-tree-id328 . 192) (undo-tree-id329 . -20) (undo-tree-id330 . -20) (undo-tree-id331 . -165) (undo-tree-id332 . -366) (undo-tree-id333 . -366) (undo-tree-id334 . -165) (undo-tree-id335 . 428) (undo-tree-id336 . -381) (undo-tree-id337 . -280) (undo-tree-id338 . -280) (undo-tree-id339 . -280) (undo-tree-id340 . -280) (undo-tree-id341 . -295) (undo-tree-id342 . -329) (undo-tree-id343 . -360) (undo-tree-id344 . -360) (undo-tree-id345 . -329) (undo-tree-id346 . -306) (undo-tree-id347 . -280) (undo-tree-id348 . -280) (undo-tree-id349 . -280) (undo-tree-id350 . -280) (undo-tree-id351 . -280) (undo-tree-id352 . -280) (undo-tree-id353 . -371) (undo-tree-id354 . -371) (undo-tree-id355 . -371) (undo-tree-id356 . -371) (undo-tree-id357 . -281) (undo-tree-id358 . -281) (undo-tree-id359 . -281) (undo-tree-id360 . -281) (undo-tree-id361 . -371) (undo-tree-id362 . -371) (undo-tree-id363 . -306) (undo-tree-id364 . -370) (undo-tree-id365 . -370) (undo-tree-id366 . -370) (undo-tree-id367 . -405) (undo-tree-id368 . -405) (undo-tree-id369 . -405) (undo-tree-id370 . -405) (undo-tree-id371 . -461) (undo-tree-id372 . -461) (undo-tree-id373 . -370) (undo-tree-id374 . -382) (undo-tree-id375 . -461) (undo-tree-id376 . -461) (undo-tree-id377 . -461) (undo-tree-id378 . -383) (undo-tree-id379 . -280) (undo-tree-id380 . -280) (undo-tree-id381 . -20) (undo-tree-id382 . -20) (undo-tree-id383 . -165) (undo-tree-id384 . -474) (undo-tree-id385 . -474) (undo-tree-id386 . -509) (undo-tree-id387 . -527) (undo-tree-id388 . -528) (undo-tree-id389 . -527) (undo-tree-id390 . -527) (undo-tree-id391 . -527) (undo-tree-id392 . -527) (undo-tree-id393 . -527) (undo-tree-id394 . -527) (undo-tree-id395 . -527) (undo-tree-id396 . -527) (undo-tree-id397 . -527) (undo-tree-id398 . -547) (undo-tree-id399 . -527) (undo-tree-id400 . -529) (undo-tree-id401 . -547) (undo-tree-id402 . -527) (undo-tree-id403 . -529) (undo-tree-id404 . -491) (undo-tree-id405 . -527) (undo-tree-id406 . -474) (undo-tree-id407 . -491) (undo-tree-id408 . -474) (undo-tree-id409 . -474) (undo-tree-id410 . -474) (undo-tree-id411 . -474) (undo-tree-id412 . -474) (undo-tree-id413 . -474) (undo-tree-id414 . -474) (undo-tree-id415 . -509) (undo-tree-id416 . -474) (undo-tree-id417 . -474) (undo-tree-id418 . -165) (undo-tree-id419 . -187) (undo-tree-id420 . -474) (undo-tree-id421 . -474) (undo-tree-id422 . -474) (undo-tree-id423 . -474) (undo-tree-id424 . -474) (undo-tree-id425 . -474) (undo-tree-id426 . -474) (undo-tree-id427 . -474) (undo-tree-id428 . -474) (undo-tree-id429 . -475) (undo-tree-id430 . -474) (undo-tree-id431 . -475) (undo-tree-id432 . -474) (undo-tree-id433 . -475) (undo-tree-id434 . -474) (undo-tree-id435 . -475) (undo-tree-id436 . -474) (undo-tree-id437 . -475) (undo-tree-id438 . -474) (undo-tree-id439 . -475) (undo-tree-id440 . -474) (undo-tree-id441 . -474) (undo-tree-id442 . -720) (undo-tree-id443 . -720) (undo-tree-id444 . -720)) ((3805 . 4525)) (26286 11239 586567 638000) 0 nil])
([nil nil ((4359 . 4361) (#("tpsts" 0 5 (face tree-sitter-hl-face:variable fontified t)) . 4359) (undo-tree-id455 . -4) (undo-tree-id456 . -3) (undo-tree-id457 . -3) (undo-tree-id458 . -3) (undo-tree-id459 . -3) (undo-tree-id460 . -3) (undo-tree-id461 . -3) (undo-tree-id462 . -3) (undo-tree-id463 . -4) (undo-tree-id464 . -3) (undo-tree-id465 . -5) (undo-tree-id466 . -4) (undo-tree-id467 . -4) (undo-tree-id468 . -5) (undo-tree-id469 . -4) (undo-tree-id470 . -5) (undo-tree-id471 . -5)) nil (26286 11246 198115 725000) 0 nil])
nil
([nil nil ((4442 . 4443) (#(" " 0 1 (fontified t)) . -4442) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . -4443) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) 4444 (4443 . 4444) (4423 . 4443) (#("t" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -4423) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (#("
" 0 1 (fontified t)) . -4424) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) 4425 (#("           " 0 2 (fontified t) 2 3 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 3 4 (fontified t) 4 5 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 5 6 (fontified t) 6 7 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified t) 7 11 (fontified t)) . -4425) (undo-tree-id520 . -11) (undo-tree-id521 . -11) (undo-tree-id522 . -11) (undo-tree-id523 . -11) (undo-tree-id524 . -11) 4436 (#(" " 0 1 (fontified t)) . -4436) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) 4437 (4424 . 4437) (4423 . 4424) (#("(!t1, " 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 1 2 (face haskell-operator-face fontified t syntax-table (1)) 2 4 (face tree-sitter-hl-face:variable fontified t) 4 5 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 5 6 (fontified t)) . 4423) (undo-tree-id528 . -5) (undo-tree-id529 . -6) (undo-tree-id530 . -6) (undo-tree-id531 . -6) (undo-tree-id532 . -6) (t 26286 11246 199252 784000)) nil (26286 11266 260061 345000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4451 . 4452) (#("
" 0 1 (fontified nil)) . -4476) (4443 . 4477) 4442) nil (26286 11266 260047 472000) 0 nil])
([nil nil ((#("t" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . 4454) (4455 . 4456) 4454 (#("e" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . 4453) (4454 . 4455) 4453 (#("l" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . 4452) (4453 . 4454) 4452) nil (26286 11266 260047 1000) 0 nil])
([nil nil ((4458 . 4459) (#("1" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4458) (undo-tree-id486 . -1)) nil (26286 11266 260046 330000) 0 nil])
([nil nil ((4475 . 4479)) nil (26286 11266 260045 298000) 0 nil])
([nil nil ((4442 . 4446) (#("　" 0 1 (fontified t)) . -4442) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) 4443 (4442 . 4443)) nil (26286 11266 260043 659000) 0 nil])
([nil nil ((4505 . 4506) (4502 . 4505) (4501 . 4502) (4500 . 4501) (4495 . 4500) (#(" " 0 1 (indent-bars-display #("│" 0 1 (face indent-bars-5)) fontified t)) . -4495) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (#(" " 0 1 (fontified t)) . -4496) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) 4497 (4484 . 4497) 4482 (t 26286 11266 261550 498000)) nil (26286 11271 201917 560000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4494) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1)) nil (26286 11271 201908 405000) 0 nil])
([nil nil (4383) nil (26286 11281 453460 293000) 0 nil])
([nil nil ((4381 . 4398) (t 26286 11271 204623 833000)) nil (26286 11281 453457 761000) 0 nil])
([nil nil ((apply -8 4469 4592 undo--wrap-and-run-primitive-undo 4469 4592 ((4521 . 4522) nil (4520 . 4521) nil (4519 . 4520) nil (4518 . 4519) nil (4480 . 4481) nil (4479 . 4480) nil (4478 . 4479) nil (4477 . 4478))) (4436 . 4440) (t 26286 11281 454775 878000)) nil (26286 11285 203616 201000) 0 nil])
([nil nil ((#("    vec <- VM.replicate n emptyIM
" 0 2 (fontified t) 2 3 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 3 4 (fontified t) 4 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (fontified t) 8 9 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 9 10 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 10 11 (fontified t) 11 13 (face tree-sitter-hl-face:type.builtin fontified t) 13 14 (fontified t) 14 23 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 23 24 (fontified t) 24 25 (face tree-sitter-hl-face:variable fontified t) 25 26 (fontified t) 26 33 (face tree-sitter-hl-face:variable fontified t) 33 34 (fontified t)) . 4042) (undo-tree-id577 . -33) (undo-tree-id578 . -6) (undo-tree-id579 . -34) (undo-tree-id580 . -6) (undo-tree-id581 . -34) (undo-tree-id582 . -6) (undo-tree-id583 . -34) 4048 (t 26286 11285 205831 512000)) nil (26286 11304 157090 711000) 0 nil])
([nil nil ((4249 . 4262) (#("V.iforM_" 0 1 (face tree-sitter-hl-face:type.builtin fontified t) 1 2 (fontified t) 2 3 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 3 8 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . 4249) (undo-tree-id572 . -7) (undo-tree-id573 . -2) (undo-tree-id574 . -2) (undo-tree-id575 . -8) (undo-tree-id576 . -8)) nil (26286 11304 157086 653000) 0 nil])
([nil nil ((4358 . 4360) (#("m" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -4358) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) 4359 (4352 . 4359) (#("z" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -4352) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (#("u" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -4353) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (#("." 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . -4354) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) 4355 (4352 . 4355) (#("let !intervals =" 0 3 (face tree-sitter-hl-face:keyword fontified t) 3 4 (fontified t) 4 5 (face haskell-operator-face syntax-table (1) fontified t) 5 14 (face tree-sitter-hl-face:variable fontified t) 14 15 (fontified t) 15 16 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . 4352) (undo-tree-id612 . -15) (undo-tree-id613 . -10) (undo-tree-id614 . -10) (undo-tree-id615 . -16) (undo-tree-id616 . -16) (t 26286 11304 159112 556000)) nil (26286 11341 625355 37000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3628 . 3629) (#("
" 0 1 (fontified nil)) . -3652) (3628 . 3653) 3605) nil (26286 11341 625348 11000) 0 nil])
([nil nil ((apply -3 3605 3632 undo--wrap-and-run-primitive-undo 3605 3632 ((3605 . 3608)))) nil (26286 11341 625347 475000) 0 nil])
([nil nil ((3652 . 3655) (#("Map" 0 3 (face (tree-sitter-hl-face:type.builtin tree-sitter-hl-face:operator) fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . 3652) (undo-tree-id584 . -2) (undo-tree-id585 . -3) (undo-tree-id586 . -3) (undo-tree-id587 . -3)) nil (26286 11341 625345 485000) 0 nil])
([nil nil ((#("U.genearte nIntervals " 0 1 (face tree-sitter-hl-face:type.builtin fontified t) 1 2 (fontified t) 2 10 (face tree-sitter-hl-face:variable fontified t) 10 11 (fontified t) 11 21 (face tree-sitter-hl-face:variable fontified t) 21 22 (fontified t)) . 4388) (undo-tree-id624 . -21) (undo-tree-id625 . -22) (t 26286 11341 626667 853000)) nil (26286 11351 172825 313000) 0 nil])
([nil nil ((4502 . 4519) 4493) nil (26286 11351 172824 334000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4540 . 4541) (nil fontified nil 4519 . 4541) (4519 . 4541) 4518) nil (26286 11351 172823 703000) 0 nil])
([nil nil ((4385 . 4386) (#("M" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4385) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1)) nil (26286 11359 708864 819000) 0 nil])
([nil nil ((4074 . 4079) (4069 . 4074) (#("    " 0 2 (fontified t) 2 3 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 3 4 (fontified t)) . 4069) (undo-tree-id631 . -4) (undo-tree-id632 . -4) (undo-tree-id633 . -4) (undo-tree-id634 . -4) (undo-tree-id635 . -4) (undo-tree-id636 . -4) (undo-tree-id637 . -4) (undo-tree-id638 . -4) (undo-tree-id639 . -4) (undo-tree-id640 . -4) 4073 (4068 . 4073) 4030 (t 26286 11351 176809 333000)) nil (26286 11385 850076 870000) 0 nil] [nil nil ((4283 . 4285) (t 26286 11351 176809 333000)) ((#("(`" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 1 2 (face tree-sitter-hl-face:operator fontified t)) . 4283)) (26286 11359 203124 791000) 0 nil])
([nil nil ((#("    sizes <- UM.replicate n (0 :: Int)
" 0 2 (fontified t) 2 3 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 3 4 (fontified t) 4 9 (face tree-sitter-hl-face:variable fontified t) 9 10 (fontified t) 10 11 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 11 12 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 12 13 (fontified t) 13 15 (face tree-sitter-hl-face:type.builtin fontified t) 15 16 (fontified t) 16 25 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 25 26 (fontified t) 26 27 (face tree-sitter-hl-face:variable fontified t) 27 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 29 30 (face tree-sitter-hl-face:number syntax-table (2) fontified t) 30 31 (fontified t) 31 32 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 32 33 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 33 34 (haskell-type t font-lock-multiline t fontified t) 34 35 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 35 37 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 37 38 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 38 39 (fontified t)) . 4030) (undo-tree-id644 . -38) (undo-tree-id645 . -39) (undo-tree-id646 . -39) (undo-tree-id647 . -39) (undo-tree-id648 . -39) (undo-tree-id649 . -39) (undo-tree-id650 . -39) (undo-tree-id651 . -39) (undo-tree-id652 . -39) (undo-tree-id653 . -8) (undo-tree-id654 . -39) (undo-tree-id655 . -8) (undo-tree-id656 . -39) (undo-tree-id657 . -8) (undo-tree-id658 . -39) 4038 (t 26286 11385 852322 843000)) nil (26286 11415 772274 537000) 0 nil])
([nil nil ((#("forM" 0 4 (face tree-sitter-hl-face:variable fontified t)) . 4287) (undo-tree-id626 . -3) (undo-tree-id627 . -3) (undo-tree-id628 . -3) (undo-tree-id629 . -4) (undo-tree-id630 . -4)) ((4287 . 4291)) (26286 11359 201884 606000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4518 . 4519) (#("
" 0 1 (fontified nil)) . -4553) (4514 . 4554)) nil (26286 11415 772269 678000) 0 nil])
nil
([nil nil ((#("    " 0 2 (fontified t) 2 3 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 3 4 (fontified t)) . -4554) (undo-tree-id641 . -4) (undo-tree-id642 . -4) (undo-tree-id643 . -4) 4558 (4553 . 4558) 4519) nil (26286 11415 772267 525000) 0 nil])
([nil nil ((4553 . 4558) 4515 (t 26286 11415 775765 755000)) nil (26286 11431 165488 305000) 0 nil])
([nil nil (3998) nil (26286 11431 285480 776000) 0 nil])
([nil nil ((#("    

" 0 2 (fontified t) 2 3 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (indent-bars-display #("  │
" 2 3 (face indent-bars-1)) fontified t)) . 4554) (undo-tree-id662 . -5) (undo-tree-id663 . -5) (undo-tree-id664 . -5) (undo-tree-id665 . -3) (undo-tree-id666 . -3) (undo-tree-id667 . -3) (undo-tree-id668 . -5) (undo-tree-id669 . -5) (undo-tree-id670 . -5) (undo-tree-id671 . -5) (undo-tree-id672 . -6) (undo-tree-id673 . -6) 4559 (t 26286 11432 109007 427000)) nil (26286 11434 647728 441000) 0 nil] [nil nil ((4000 . 4004)) ((#("let " 0 3 (face tree-sitter-hl-face:keyword fontified t) 3 4 (fontified t)) . 4000)) (26286 11431 168320 336000) 0 nil])
([nil nil ((#("    " 0 2 (fontified t) 2 3 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 3 4 (fontified t)) . -4554) (undo-tree-id674 . -4) (undo-tree-id675 . -4) (undo-tree-id676 . -4) (undo-tree-id677 . -4) (undo-tree-id678 . -4) (undo-tree-id679 . -4) (undo-tree-id680 . -4) (undo-tree-id681 . -4) (undo-tree-id682 . -4) (undo-tree-id683 . -4) 4558 (4553 . 4558) 4519 (t 26286 11434 650045 20000)) nil (26286 11436 61116 219000) 0 nil])
([nil nil ((4020 . 4021) (#("<- runST $" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 1 2 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 2 3 (fontified t) 3 8 (face tree-sitter-hl-face:variable fontified t) 8 9 (fontified t) 9 10 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . 4020) (undo-tree-id659 . -9) (undo-tree-id660 . -10) (undo-tree-id661 . -10)) ((4020 . 4030) (#("=" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . 4020)) (26286 11431 165483 463000) 0 nil])
([nil nil ((4528 . 4533) (#("UM.replicate n (0 :: Int)" 0 2 (face tree-sitter-hl-face:type.builtin fontified t) 2 3 (fontified t) 3 12 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 12 13 (fontified t) 13 14 (face tree-sitter-hl-face:variable fontified t) 14 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 16 17 (face tree-sitter-hl-face:number syntax-table (2) fontified t) 17 18 (fontified t) 18 19 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 19 20 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 20 21 (haskell-type t font-lock-multiline t fontified t) 21 22 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 22 24 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 24 25 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 4528) (undo-tree-id687 . -24) (undo-tree-id688 . -24) (undo-tree-id689 . -21) (undo-tree-id690 . -24) (undo-tree-id691 . -18) (undo-tree-id692 . -21) (undo-tree-id693 . -16) (undo-tree-id694 . -18) (undo-tree-id695 . -15) (undo-tree-id696 . -16) (undo-tree-id697 . -13) (undo-tree-id698 . -15) (undo-tree-id699 . -3) (undo-tree-id700 . -13) (undo-tree-id701 . -2) (undo-tree-id702 . -3) (undo-tree-id703 . -2) (undo-tree-id704 . -25) (undo-tree-id705 . -25) (undo-tree-id706 . -25) (undo-tree-id707 . -25) (t 26286 11436 63065 924000)) nil (26286 11444 902789 160000) 0 nil])
nil
([nil nil (4532) nil (26286 11444 902783 454000) 0 nil])
([nil nil ((4519 . 4523)) nil (26286 11444 902783 291000) 0 nil])
([nil nil ((4523 . 4524)) nil (26286 11444 902782 330000) 0 nil])
([nil nil ((4530 . 4531) (#("<-" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 1 2 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . 4530) (undo-tree-id684 . -1) (undo-tree-id685 . -2) (undo-tree-id686 . -2)) nil (26286 11444 902779 183000) 0 nil])
([nil nil ((4532 . 4533) (#("U" 0 1 (face tree-sitter-hl-face:type.builtin fontified t)) . 4532) (undo-tree-id720 . -1) (t 26286 11444 906196 739000)) nil (26286 11473 830802 881000) 0 nil])
([nil nil ((4537 . 4539)) nil (26286 11473 830802 275000) 0 nil])
([nil nil ((4539 . 4546)) nil (26286 11473 830802 29000) 0 nil])
([nil nil ((4554 . 4558) (4553 . 4554) (4546 . 4553)) nil (26286 11473 830801 529000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4558) (undo-tree-id717 . 1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) 4557) nil (26286 11473 830800 734000) 0 nil])
([nil nil ((4574 . 4575) (4568 . 4574) (4567 . 4568) (4564 . 4567) (#(",) <$> U.unsafeFreeze vec <*> U.unsafeFreeze sizes" 0 1 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 1 2 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 2 3 (fontified t) 3 4 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 4 5 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 5 6 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 6 7 (fontified t) 7 8 (face tree-sitter-hl-face:type.builtin fontified t) 8 9 (fontified t) 9 21 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 21 22 (fontified t) 22 25 (face tree-sitter-hl-face:variable fontified t) 25 26 (fontified t) 26 27 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 27 28 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 28 29 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 29 30 (fontified t) 30 31 (face tree-sitter-hl-face:type.builtin fontified t) 31 32 (fontified t) 32 44 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 44 45 (fontified t) 45 50 (face tree-sitter-hl-face:variable fontified t)) . 4564) (undo-tree-id708 . -49) (undo-tree-id709 . -37) (undo-tree-id710 . -37) (undo-tree-id711 . -3) (undo-tree-id712 . -3) (undo-tree-id713 . -50) (undo-tree-id714 . -50) (undo-tree-id715 . -50) (undo-tree-id716 . -50)) nil (26286 11473 830797 579000) 0 nil])
([nil nil ((#("V.map (IM.size . unIM) vec" 0 1 (face tree-sitter-hl-face:type.builtin fontified t) 1 2 (fontified t) 2 5 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 5 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 7 9 (face tree-sitter-hl-face:type.builtin fontified t) 9 10 (fontified t) 10 14 (face tree-sitter-hl-face:variable fontified t) 14 15 (fontified t) 15 16 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 16 17 (fontified t) 17 21 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 21 22 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 22 23 (fontified t) 23 26 (face tree-sitter-hl-face:variable fontified t)) . 4532) (undo-tree-id824 . -25) (undo-tree-id825 . -26) (undo-tree-id826 . -6) (undo-tree-id827 . -6) (undo-tree-id828 . -6) (undo-tree-id829 . -6) (undo-tree-id830 . -6) (undo-tree-id831 . -6) (undo-tree-id832 . -26) (undo-tree-id833 . -26) (t 26286 11473 835624 575000)) nil (26286 11483 834605 614000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4568 . 4569) (nil fontified nil 4543 . 4569) (4543 . 4569)) nil (26286 11483 834603 324000) 0 nil])
([nil nil ((#("sizes" 0 5 (face tree-sitter-hl-face:variable fontified t)) . 4569) (undo-tree-id805 . -4) (undo-tree-id806 . -5) (undo-tree-id807 . -5) (undo-tree-id808 . -5) (undo-tree-id809 . -5) (undo-tree-id810 . -5) (undo-tree-id811 . -5) (undo-tree-id812 . -5) (undo-tree-id813 . -5) (undo-tree-id814 . -5) (undo-tree-id815 . -5) (undo-tree-id816 . -5) (undo-tree-id817 . -5) (undo-tree-id818 . -5) (undo-tree-id819 . -5) (undo-tree-id820 . -5) (undo-tree-id821 . -5) (undo-tree-id822 . -5) (undo-tree-id823 . -5)) nil (26286 11483 834602 524000) 0 nil])
([nil nil ((#("    let !sizes = 
" 0 2 (fontified t) 2 3 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 3 4 (fontified t rear-nonsticky t) 4 7 (face tree-sitter-hl-face:keyword fontified t) 7 8 (fontified t) 8 9 (face haskell-operator-face syntax-table (1) fontified t) 9 14 (face tree-sitter-hl-face:variable fontified t) 14 15 (fontified t) 15 16 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 16 17 (fontified t) 17 18 (fontified t)) . 4515) (undo-tree-id754 . -16) (undo-tree-id755 . -17) (undo-tree-id756 . -16) (undo-tree-id757 . 1) (undo-tree-id758 . -16) (undo-tree-id759 . -16) (undo-tree-id760 . -18) (undo-tree-id761 . -18) (undo-tree-id762 . -18) (undo-tree-id763 . -18) (undo-tree-id764 . -18) (undo-tree-id765 . -16) (undo-tree-id766 . -17) (undo-tree-id767 . -17) (undo-tree-id768 . -17) (undo-tree-id769 . -17) (undo-tree-id770 . -17) (undo-tree-id771 . -17) (undo-tree-id772 . -17) (undo-tree-id773 . -18) (undo-tree-id774 . -4) (undo-tree-id775 . -8) (undo-tree-id776 . -4) (undo-tree-id777 . -9) (undo-tree-id778 . -8) (undo-tree-id779 . -15) (undo-tree-id780 . -9) (undo-tree-id781 . -17) (undo-tree-id782 . -15) (undo-tree-id783 . -17) (undo-tree-id784 . -16) (undo-tree-id785 . -17) (undo-tree-id786 . -16) (undo-tree-id787 . -16) (undo-tree-id788 . -16) (undo-tree-id789 . -16) (undo-tree-id790 . -16) (undo-tree-id791 . -16) (undo-tree-id792 . -16) (undo-tree-id793 . -16) (undo-tree-id794 . -18) (undo-tree-id795 . -18) (undo-tree-id796 . -16) (undo-tree-id797 . -16) (undo-tree-id798 . -16) (undo-tree-id799 . -16) (undo-tree-id800 . -16) (undo-tree-id801 . -16) (undo-tree-id802 . -16) (undo-tree-id803 . -16) (undo-tree-id804 . -18) 4531) nil (26286 11483 834594 222000) 0 nil])
([nil nil ((#("
    let o

" 0 1 (indent-bars-display #("  │
" 2 3 (face indent-bars-1)) fontified t) 1 3 (fontified t) 3 4 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 4 5 (fontified t) 5 8 (face tree-sitter-hl-face:keyword fontified t) 8 9 (fontified t) 9 10 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 10 11 (fontified t) 11 12 (indent-bars-display #("  │
" 2 3 (face indent-bars-1)) fontified t)) . 4030) (undo-tree-id721 . -11) (undo-tree-id722 . -11) (undo-tree-id723 . -11) (undo-tree-id724 . -11) (undo-tree-id725 . -11) (undo-tree-id726 . -11) (undo-tree-id727 . -9) (undo-tree-id728 . -9) (undo-tree-id729 . -9) (undo-tree-id730 . -9) (undo-tree-id731 . -9) (undo-tree-id732 . -9) (undo-tree-id733 . -9) (undo-tree-id734 . -9) (undo-tree-id735 . -6) (undo-tree-id736 . -6) (undo-tree-id737 . -6) (undo-tree-id738 . -11) (undo-tree-id739 . -11) (undo-tree-id740 . -11) (undo-tree-id741 . -9) (undo-tree-id742 . -9) (undo-tree-id743 . -9) (undo-tree-id744 . -11) (undo-tree-id745 . -11) (undo-tree-id746 . -11) (undo-tree-id747 . -11) (undo-tree-id748 . -11) (undo-tree-id749 . -1) (undo-tree-id750 . -11) (undo-tree-id751 . -1) (undo-tree-id752 . -12) (undo-tree-id753 . -12)) nil (26286 11483 833959 430000) 0 nil])
([nil nil ((4354 . 4357) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . -4354) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) 4355 (4354 . 4355) (4347 . 4354) (#(" $ " 0 1 (fontified t) 1 2 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 2 3 (fontified t)) . 4347) (undo-tree-id917 . -2) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -3) (undo-tree-id921 . -3) (t 26286 11483 836772 442000)) nil (26286 11503 289833 201000) 0 nil])
([nil nil ((4516 . 4517) (#(" " 0 1 (indent-bars-display #("│" 0 1 (face indent-bars-4)) fontified t)) . -4516) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (#(" " 0 1 (fontified t)) . -4517) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (#(" " 0 1 (fontified t)) . -4518) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (#(" " 0 1 (fontified t)) . -4519) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (#(" " 0 1 (fontified t)) . -4520) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (#(" " 0 1 (fontified t)) . -4521) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (#(" " 0 1 (fontified t)) . -4522) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (#(" " 0 1 (fontified t)) . -4523) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) 4524 (4507 . 4524) (#(" " 0 1 (fontified t rear-nonsticky t)) . 4507) 4478) nil (26286 11503 289827 981000) 0 nil])
([nil nil ((4565 . 4568) (#(" " 0 1 (fontified t)) . -4565) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4566) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4567) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) 4568 (4563 . 4568) (4542 . 4563) (4533 . 4542) (4526 . 4533) (4517 . 4526) 4516 (t 26286 11503 292060 35000)) nil (26286 11516 98429 361000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 4554) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1)) nil (26286 11516 98424 34000) 0 nil])
([nil nil ((4567 . 4568)) nil (26286 11516 98412 782000) 0 nil])
([nil nil ((#("    " 0 2 (fontified t) 2 3 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 3 4 (fontified t)) . -4232) (undo-tree-id949 . -4) (undo-tree-id950 . -4) (undo-tree-id951 . -4) (undo-tree-id952 . -4) (undo-tree-id953 . -4) (undo-tree-id954 . -4) (undo-tree-id955 . -4) (undo-tree-id956 . -4) (undo-tree-id957 . -4) (undo-tree-id958 . -4) 4236 (4231 . 4236) 4120 (t 26286 11516 101249 344000)) nil (26286 11518 308551 164000) 0 nil])
([nil nil ((4246 . 4250) (#("forM" 0 4 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . 4246) (undo-tree-id959 . -3) (undo-tree-id960 . -4) (undo-tree-id961 . -4) (t 26286 11518 310281 988000)) nil (26286 11531 96422 661000) 0 nil])
([nil nil ((4244 . 4246)) nil (26286 11531 97999 673000) 0 nil])
([nil nil ((4264 . 4265)) nil (26286 11550 167364 287000) 0 nil] [nil nil ((nil rear-nonsticky nil 4249 . 4250) (nil fontified nil 4246 . 4250) (4246 . 4250) 4245) ((#("forM" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (face tree-sitter-hl-face:variable rear-nonsticky nil fontified nil)) . 4246) (undo-tree-id962 . -1) (undo-tree-id963 . -3) (undo-tree-id964 . 2) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -2) (undo-tree-id968 . -1) (nil rear-nonsticky t 4249 . 4250)) (26286 11531 96414 168000) 0 nil])
([nil nil ((4237 . 4242) (#("<-" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 1 2 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . 4241) (undo-tree-id1003 . -1) (undo-tree-id1004 . -2) (undo-tree-id1005 . -2)) nil (26286 11550 167363 890000) 0 nil])
nil
([nil nil ((apply -36 4344 4655 undo--wrap-and-run-primitive-undo 4344 4655 ((4580 . 4581) nil (4579 . 4580) nil (4578 . 4579) nil (4577 . 4578) nil (4560 . 4561) nil (4559 . 4560) nil (4558 . 4559) nil (4557 . 4558) nil (4546 . 4547) nil (4545 . 4546) nil (4544 . 4545) nil (4543 . 4544) nil (4504 . 4505) nil (4503 . 4504) nil (4502 . 4503) nil (4501 . 4502) nil (4475 . 4476) nil (4474 . 4475) nil (4473 . 4474) nil (4472 . 4473) nil (4430 . 4431) nil (4429 . 4430) nil (4428 . 4429) nil (4427 . 4428) nil (4385 . 4386) nil (4384 . 4385) nil (4383 . 4384) nil (4382 . 4383) nil (4366 . 4367) nil (4365 . 4366) nil (4364 . 4365) nil (4363 . 4364) nil (4347 . 4348) nil (4346 . 4347) nil (4345 . 4346) nil (4344 . 4345))) (4290 . 4294)) nil (26286 11550 167362 111000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4248) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (4244 . 4248) (#("x" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4244) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (#(" " 0 1 (fontified t)) . -4245) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . -4246) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) 4247 (4242 . 4247) (#("vec" 0 3 (face tree-sitter-hl-face:variable fontified t)) . 4242) (undo-tree-id1000 . -2) (undo-tree-id1001 . -3) (undo-tree-id1002 . -3)) nil (26286 11550 167361 51000) 0 nil])
([nil nil ((#("runST " 0 5 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 5 6 (fontified t)) . 4019) (undo-tree-id973 . -5) (undo-tree-id974 . -6)) nil (26286 11550 167352 229000) 0 nil])
([nil nil ((#("$ " 0 1 (face haskell-operator-face syntax-table (1) fontified t) 1 2 (fontified t)) . 4019) (undo-tree-id969 . -1) (undo-tree-id970 . -2) (undo-tree-id971 . -2) (undo-tree-id972 . -2)) nil (26286 11550 167347 933000) 0 nil])
([nil nil ((4370 . 4371) 4375 (4515 . 4517) (4525 . 4547) 4536 (t 26286 11550 170752 721000)) nil (26286 11552 445709 779000) 0 nil])
([nil nil ((#("                      U.genearte
                      nIntervals
" 0 2 (fontified t) 2 3 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 3 4 (fontified t) 4 5 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 5 6 (fontified t) 6 7 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified t) 7 8 (fontified t) 8 9 (indent-bars-display #("│" 0 1 (face indent-bars-4)) fontified t) 9 10 (fontified t) 10 11 (indent-bars-display #("│" 0 1 (face indent-bars-5)) fontified t) 11 12 (fontified t) 12 13 (indent-bars-display #("│" 0 1 (face indent-bars-6)) fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 22 (fontified t) 22 23 (face tree-sitter-hl-face:type.builtin fontified t) 23 24 (fontified t) 24 32 (face tree-sitter-hl-face:variable fontified t) 32 35 (fontified t) 35 36 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 36 37 (fontified t) 37 38 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 38 39 (fontified t) 39 40 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified t) 40 41 (fontified t) 41 42 (indent-bars-display #("│" 0 1 (face indent-bars-4)) fontified t) 42 43 (fontified t) 43 44 (indent-bars-display #("│" 0 1 (face indent-bars-5)) fontified t) 44 45 (fontified t) 45 46 (indent-bars-display #("│" 0 1 (face indent-bars-6)) fontified t) 46 54 (fontified t) 54 55 (fontified t) 55 65 (face tree-sitter-hl-face:variable fontified t) 65 66 (fontified t)) . 4496) (undo-tree-id1006 . -33) (undo-tree-id1007 . -65) (undo-tree-id1008 . -33) (undo-tree-id1009 . -66) (undo-tree-id1010 . -33) (undo-tree-id1011 . -66) (undo-tree-id1012 . -33) (undo-tree-id1013 . -33) (undo-tree-id1014 . -66) (undo-tree-id1015 . -33) (undo-tree-id1016 . -33) (undo-tree-id1017 . -66) (undo-tree-id1018 . -33) (undo-tree-id1019 . -66) (undo-tree-id1020 . -66) (t 26286 11552 447786 357000)) nil (26286 11556 894734 478000) 0 nil])
([nil nil ((4372 . 4376) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4372) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4373) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (#(" " 0 1 (fontified t)) . -4374) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4375) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) 4376 (4372 . 4376) (t 26286 11556 896852 76000)) nil (26286 11563 499627 274000) 0 nil])
([nil nil ((4491 . 4503) (#("(t1, t2)" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 1 3 (face tree-sitter-hl-face:variable fontified t) 3 4 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 4 5 (fontified t) 5 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 4491) (undo-tree-id1074 . -7) (undo-tree-id1075 . -8) (undo-tree-id1076 . -8) (undo-tree-id1077 . -8) (undo-tree-id1078 . -8) (t 26286 11563 502949 651000)) nil (26286 11582 841499 584000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4505) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4506) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) 4507 (4500 . 4507)) nil (26286 11582 841495 557000) 0 nil])
([nil nil ((4505 . 4506) (t 26286 11582 844235 287000)) nil (26286 11587 267821 915000) 0 nil])
([nil nil ((4501 . 4502) (#("4" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4501) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1)) nil (26286 11587 267821 310000) 0 nil])
([nil nil ((4501 . 4502) (#("2" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4501) (undo-tree-id1079 . -1)) nil (26286 11587 267816 802000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3655 . 3656) (#("
" 0 1 (fontified nil)) . -3679) (3655 . 3680) 3632 (t 26286 11587 270300 644000)) nil (26286 11601 418886 469000) 0 nil])
([nil nil ((3652 . 3655) (#("Set" 0 3 (face (tree-sitter-hl-face:type.builtin tree-sitter-hl-face:operator) fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . 3652) (undo-tree-id1083 . -2) (undo-tree-id1084 . -2) (undo-tree-id1085 . -3) (undo-tree-id1086 . -3) (undo-tree-id1087 . -3) (undo-tree-id1088 . -3)) nil (26286 11601 418884 584000) 0 nil])
([nil nil ((#("-- import Data.IntervalMap
" 0 3 (face tree-sitter-hl-face:comment fontified t) 3 9 (face tree-sitter-hl-face:comment fontified t) 9 10 (face tree-sitter-hl-face:comment fontified t) 10 14 (face tree-sitter-hl-face:comment fontified t) 14 15 (face tree-sitter-hl-face:comment fontified t) 15 26 (face tree-sitter-hl-face:comment fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9)) 26 27 (rear-nonsticky t fontified t)) . 3605) (undo-tree-id1100 . -26) (undo-tree-id1101 . -26) (undo-tree-id1102 . -26) (undo-tree-id1103 . -26) (undo-tree-id1104 . -26) (undo-tree-id1105 . -25) (undo-tree-id1106 . -25) (undo-tree-id1107 . -22) (undo-tree-id1108 . -22) (undo-tree-id1109 . -22) (undo-tree-id1110 . -27) 3627 (t 26286 11601 420509 570000)) nil (26286 11602 831307 370000) 0 nil])
([nil nil ((#("import Data.IntervalSet
" 0 6 (face tree-sitter-hl-face:keyword fontified t) 6 7 (fontified t) 7 11 (face (tree-sitter-hl-face:type.builtin tree-sitter-hl-face:operator) fontified t) 11 12 (face tree-sitter-hl-face:operator fontified t) 12 23 (face (tree-sitter-hl-face:type.builtin tree-sitter-hl-face:operator) fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9)) 23 24 (fontified t)) . 3629) (undo-tree-id1089 . -23) (undo-tree-id1090 . -24) (undo-tree-id1091 . -24) (undo-tree-id1092 . -24) (undo-tree-id1093 . -24) (undo-tree-id1094 . -24) (undo-tree-id1095 . -24) (undo-tree-id1096 . -22) (undo-tree-id1097 . -22) (undo-tree-id1098 . -22) (undo-tree-id1099 . -24) 3651) nil (26286 11602 831301 488000) 0 nil])
([nil nil ((4471 . 4472) (#("S" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . 4471) (undo-tree-id1112 . -1) (t 26286 11602 833530 431000)) nil (26286 11607 400954 439000) 0 nil])
([nil nil ((4515 . 4516) (#("S" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4515) (undo-tree-id1111 . -1)) nil (26286 11607 400951 26000) 0 nil])
([nil nil ((4489 . 4490) (4488 . 4489) (4483 . 4488) (4480 . 4483) (#(" " 0 1 (fontified t)) . -4480) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number syntax-table (2) fontified t)) . -4481) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number syntax-table (2) fontified t)) . -4482) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) 4483 (4479 . 4483) (t 26286 11607 403597 900000)) nil (26286 11620 508871 625000) 0 nil])
([nil nil ((4470 . 4471) (4468 . 4470) (4467 . 4468) (4464 . 4467) (#("insertIM t1 t2 (0 :: Int) set" 0 7 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 7 8 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 8 9 (fontified t) 9 10 (face tree-sitter-hl-face:variable fontified t) 10 11 (face tree-sitter-hl-face:variable fontified t) 11 12 (fontified t) 12 14 (face tree-sitter-hl-face:variable fontified t) 14 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 16 17 (face tree-sitter-hl-face:number syntax-table (2) fontified t) 17 18 (fontified t) 18 19 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 19 20 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 20 21 (haskell-type t font-lock-multiline t fontified t) 21 24 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 24 25 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 25 26 (fontified t) 26 29 (face tree-sitter-hl-face:variable fontified t)) . 4464) (undo-tree-id1133 . -28) (undo-tree-id1134 . 3) (undo-tree-id1135 . -10) (undo-tree-id1136 . -10) (undo-tree-id1137 . -10) (undo-tree-id1138 . -16) (undo-tree-id1139 . -16) (undo-tree-id1140 . -16) (undo-tree-id1141 . -16) (undo-tree-id1142 . -16) (undo-tree-id1143 . -16) (undo-tree-id1144 . -16) (undo-tree-id1145 . -16) (undo-tree-id1146 . -25) (undo-tree-id1147 . -26) (undo-tree-id1148 . -25) (undo-tree-id1149 . -25) (undo-tree-id1150 . -25) (undo-tree-id1151 . -25) (undo-tree-id1152 . -25) (undo-tree-id1153 . -25) (undo-tree-id1154 . -25) (undo-tree-id1155 . -25) (undo-tree-id1156 . -25) (undo-tree-id1157 . -25) (undo-tree-id1158 . -29) (undo-tree-id1159 . -29) (undo-tree-id1160 . -29) (undo-tree-id1161 . -29) (t 26286 11620 511791 401000)) nil (26286 11697 162001 201000) 0 nil])
([nil nil ((4469 . 4470) (t 26286 11690 445823 347000)) nil (26286 11699 954603 846000) 0 nil] [nil nil ((4323 . 4326) (#("foldl" 0 4 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 4 5 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . 4323) (undo-tree-id1162 . -4) (undo-tree-id1163 . -4) (undo-tree-id1164 . -4) (undo-tree-id1165 . -4) (undo-tree-id1166 . -4) (undo-tree-id1167 . -5) (undo-tree-id1168 . -5) (t 26286 11690 445823 347000)) ((4323 . 4328) (#("map" 0 3 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . 4323) (undo-tree-id1169 . -2) (undo-tree-id1170 . -2) (undo-tree-id1171 . -2) (undo-tree-id1172 . -3) (undo-tree-id1173 . -2)) (26286 11697 160230 222000) 0 nil])
([nil nil ((4500 . 4501) (4499 . 4500) (#("emptyIM" 0 6 (face tree-sitter-hl-face:variable fontified t) 6 7 (face tree-sitter-hl-face:variable fontified t)) . 4499) (undo-tree-id1177 . -6) (undo-tree-id1178 . -6) (undo-tree-id1179 . -6) (undo-tree-id1180 . -6) (undo-tree-id1181 . -6) (undo-tree-id1182 . -7) (undo-tree-id1183 . -7) (t 26286 11699 956963 642000)) nil (26286 11706 770448 342000) 0 nil])
nil
([nil nil ((4479 . 4480) (4477 . 4479) (#("t" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . -4477) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) 4478 (4473 . 4478) (4464 . 4465)) nil (26286 11706 770441 873000) 0 nil])
([nil nil ((4216 . 4217) (#("U" 0 1 (font-lock-multiline t face tree-sitter-hl-face:type.builtin fontified t font-lock-fontified t)) . 4216) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (t 26286 11706 774064 192000)) nil (26286 11746 534137 736000) 0 nil])
([nil nil ((4207 . 4216) (#("maps" 0 4 (face tree-sitter-hl-face:variable fontified t)) . 4207) (undo-tree-id1826 . -3) (undo-tree-id1827 . -4) (undo-tree-id1828 . -4) (t 26286 11744 807625 65000)) nil (26286 11752 290438 137000) 0 nil] [nil nil ((#("
    let !maps = (`V.map` tpsByPerson) $ \\iPerson tts -> do
          let !nIntervals = (G.length ts + 1) `div` 2
          U.foldl'
            ( \\set i ->
                let !t1 = ts G.! (2 * i + 0)
                    !t2 = ts G.! (2 * i + 1)
                 in ((t1, t2) : set)
            )
            []
            (U.generate nIntervals id)

" 0 1 (indent-bars-display #("  │
" 2 3 (face indent-bars-1)) fontified t) 1 3 (fontified t) 3 4 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 4 5 (fontified t) 5 8 (face tree-sitter-hl-face:keyword fontified t) 8 9 (fontified t) 9 10 (face haskell-operator-face syntax-table (1) fontified t) 10 14 (face tree-sitter-hl-face:variable fontified t) 14 15 (fontified t) 15 16 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 16 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 18 19 (font-lock-multiline t face tree-sitter-hl-face:operator fontified t font-lock-fontified t) 19 20 (font-lock-multiline t face tree-sitter-hl-face:type.builtin font-lock-fontified t fontified t) 20 21 (font-lock-multiline t fontified t font-lock-fontified t) 21 24 (font-lock-multiline t face tree-sitter-hl-face:variable fontified t font-lock-fontified t) 24 25 (font-lock-multiline t face tree-sitter-hl-face:operator fontified t font-lock-fontified t) 25 26 (fontified t) 26 37 (face tree-sitter-hl-face:variable fontified t) 37 38 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 38 39 (fontified t) 39 40 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 40 41 (fontified t) 41 42 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 42 49 (face tree-sitter-hl-face:variable fontified t) 49 50 (fontified t) 50 53 (face tree-sitter-hl-face:variable fontified t) 53 54 (fontified t) 54 55 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 55 56 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 56 57 (fontified t) 57 59 (face tree-sitter-hl-face:keyword fontified t) 59 60 (fontified t) 60 62 (fontified t) 62 63 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 63 64 (fontified t) 64 65 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 65 66 (fontified t) 66 67 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified t) 67 68 (fontified t) 68 69 (indent-bars-display #("│" 0 1 (face indent-bars-4)) fontified t) 69 70 (fontified t) 70 73 (face tree-sitter-hl-face:keyword fontified t) 73 74 (fontified t) 74 75 (face haskell-operator-face syntax-table (1) fontified t) 75 76 (face tree-sitter-hl-face:variable fontified t) 76 85 (face tree-sitter-hl-face:variable fontified t) 85 86 (fontified t) 86 87 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 87 88 (fontified t) 88 89 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 89 90 (face tree-sitter-hl-face:type.builtin fontified t) 90 91 (fontified t) 91 97 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 97 98 (fontified t) 98 100 (face tree-sitter-hl-face:variable fontified t) 100 101 (fontified t) 101 102 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 102 103 (fontified t) 103 104 (syntax-table (2) face tree-sitter-hl-face:number fontified t) 104 105 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 105 106 (fontified t) 106 107 (font-lock-multiline t face tree-sitter-hl-face:operator fontified t font-lock-fontified t) 107 110 (font-lock-multiline t face (tree-sitter-hl-face:operator tree-sitter-hl-face:variable) fontified t font-lock-fontified t) 110 111 (font-lock-multiline t face tree-sitter-hl-face:operator fontified t font-lock-fontified t) 111 112 (fontified t font-lock-fontified t) 112 113 (syntax-table (2) face tree-sitter-hl-face:number fontified t font-lock-fontified t) 113 114 (fontified t font-lock-fontified t) 114 116 (fontified t font-lock-fontified t) 116 117 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t font-lock-fontified t) 117 118 (fontified t font-lock-fontified t) 118 119 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 119 120 (fontified t) 120 121 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified t) 121 122 (fontified t) 122 123 (indent-bars-display #("│" 0 1 (face indent-bars-4)) fontified t) 123 124 (fontified t) 124 125 (face tree-sitter-hl-face:type.builtin fontified t) 125 126 (fontified t) 126 130 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 130 131 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 131 132 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 132 133 (fontified t) 133 135 (fontified t) 135 136 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 136 137 (fontified t) 137 138 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 138 139 (fontified t) 139 140 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified t) 140 141 (fontified t) 141 142 (indent-bars-display #("│" 0 1 (face indent-bars-4)) fontified t) 142 143 (fontified t) 143 144 (indent-bars-display #("│" 0 1 (face indent-bars-5)) fontified t) 144 145 (fontified t) 145 146 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 146 147 (fontified t) 147 148 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 148 151 (face tree-sitter-hl-face:variable fontified t) 151 152 (fontified t) 152 153 (face tree-sitter-hl-face:variable fontified t) 153 154 (fontified t) 154 155 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 155 156 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 156 157 (fontified t) 157 159 (fontified t) 159 160 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 160 161 (fontified t) 161 162 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 162 163 (fontified t) 163 164 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified t) 164 165 (fontified t) 165 166 (indent-bars-display #("│" 0 1 (face indent-bars-4)) fontified t) 166 167 (fontified t) 167 168 (indent-bars-display #("│" 0 1 (face indent-bars-5)) fontified t) 168 169 (fontified t) 169 170 (indent-bars-display #("│" 0 1 (face indent-bars-6)) fontified t) 170 171 (fontified t) 171 172 (fontified t) 172 173 (fontified t) 173 176 (face tree-sitter-hl-face:keyword fontified t) 176 177 (fontified t) 177 178 (face haskell-operator-face syntax-table (1) fontified t) 178 180 (face tree-sitter-hl-face:variable fontified t) 180 181 (fontified t) 181 182 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 182 183 (fontified t) 183 185 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 185 186 (fontified t) 186 187 (face tree-sitter-hl-face:type.builtin fontified t) 187 188 (fontified t) 188 189 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 189 190 (fontified t) 190 191 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 191 192 (syntax-table (2) face tree-sitter-hl-face:number fontified t) 192 193 (fontified t) 193 194 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 194 195 (fontified t) 195 196 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 196 197 (fontified t) 197 198 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 198 199 (fontified t) 199 200 (syntax-table (2) face tree-sitter-hl-face:number fontified t) 200 201 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 201 204 (fontified t) 204 205 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 205 206 (fontified t) 206 207 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 207 208 (fontified t) 208 209 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified t) 209 210 (fontified t) 210 211 (indent-bars-display #("│" 0 1 (face indent-bars-4)) fontified t) 211 212 (fontified t) 212 213 (indent-bars-display #("│" 0 1 (face indent-bars-5)) fontified t) 213 214 (fontified t rear-nonsticky t) 214 215 (indent-bars-display #("│" 0 1 (face indent-bars-6)) fontified t) 215 216 (fontified t) 216 217 (fontified t) 217 218 (fontified t) 218 219 (fontified t) 219 220 (fontified t) 220 221 (fontified t) 221 222 (fontified t) 222 223 (face haskell-operator-face syntax-table (1) fontified t) 223 224 (face tree-sitter-hl-face:variable fontified t) 224 225 (face tree-sitter-hl-face:variable fontified t) 225 226 (fontified t) 226 227 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 227 228 (fontified t) 228 230 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 230 231 (fontified t) 231 232 (face tree-sitter-hl-face:type.builtin fontified t) 232 233 (fontified t) 233 234 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 234 235 (fontified t) 235 236 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 236 237 (syntax-table (2) face tree-sitter-hl-face:number fontified t) 237 238 (fontified t) 238 239 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 239 240 (fontified t) 240 241 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 241 242 (fontified t) 242 243 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 243 244 (fontified t) 244 245 (syntax-table (2) face tree-sitter-hl-face:number fontified t) 245 246 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 246 247 (fontified t) 247 249 (fontified t) 249 250 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 250 251 (fontified t) 251 252 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 252 253 (fontified t) 253 254 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified t) 254 255 (fontified t) 255 256 (indent-bars-display #("│" 0 1 (face indent-bars-4)) fontified t) 256 257 (fontified t) 257 258 (indent-bars-display #("│" 0 1 (face indent-bars-5)) fontified t) 258 259 (fontified t) 259 260 (indent-bars-display #("│" 0 1 (face indent-bars-6)) fontified t) 260 261 (fontified t) 261 262 (fontified t) 262 263 (fontified t) 263 264 (fontified t) 264 266 (face tree-sitter-hl-face:keyword fontified t) 266 267 (fontified t) 267 268 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 268 269 (face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified t) 269 271 (face tree-sitter-hl-face:variable fontified t) 271 272 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 272 273 (fontified t) 273 274 (face tree-sitter-hl-face:variable fontified t) 274 275 (face tree-sitter-hl-face:variable fontified t) 275 276 (face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified t) 276 277 (fontified t) 277 278 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 278 279 (fontified t) 279 282 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 282 283 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 283 284 (fontified t) 284 286 (fontified t) 286 287 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 287 288 (fontified t) 288 289 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 289 290 (fontified t) 290 291 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified t) 291 292 (fontified t) 292 293 (indent-bars-display #("│" 0 1 (face indent-bars-4)) fontified t) 293 294 (fontified t) 294 295 (indent-bars-display #("│" 0 1 (face indent-bars-5)) fontified t) 295 296 (fontified t) 296 297 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 297 298 (fontified t) 298 300 (fontified t) 300 301 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 301 302 (fontified t) 302 303 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 303 304 (fontified t) 304 305 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified t) 305 306 (fontified t) 306 307 (indent-bars-display #("│" 0 1 (face indent-bars-4)) fontified t) 307 308 (fontified t) 308 309 (indent-bars-display #("│" 0 1 (face indent-bars-5)) fontified t) 309 310 (fontified t) 310 311 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 311 312 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 312 313 (fontified t) 313 315 (fontified t) 315 316 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 316 317 (fontified t) 317 318 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 318 319 (fontified t) 319 320 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified t) 320 321 (fontified t) 321 322 (indent-bars-display #("│" 0 1 (face indent-bars-4)) fontified t) 322 323 (fontified t) 323 324 (indent-bars-display #("│" 0 1 (face indent-bars-5)) fontified t) 324 325 (fontified t) 325 326 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 326 327 (face tree-sitter-hl-face:type.builtin fontified t) 327 328 (fontified t) 328 336 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 336 337 (fontified t) 337 347 (face tree-sitter-hl-face:variable fontified t) 347 348 (fontified t) 348 350 (face tree-sitter-hl-face:variable fontified t) 350 351 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 351 352 (fontified t) 352 353 (indent-bars-display #("  │ │ │ │ │
" 2 3 (face indent-bars-1) 4 5 (face indent-bars-2) 6 7 (face indent-bars-3) 8 9 (face indent-bars-4) 10 11 (face indent-bars-5)) fontified t)) . 4197) (undo-tree-id1705 . -352) (undo-tree-id1706 . 327) (undo-tree-id1707 . -172) (undo-tree-id1708 . -172) (undo-tree-id1709 . -172) (undo-tree-id1710 . -352) (undo-tree-id1711 . -130) (undo-tree-id1712 . -130) (undo-tree-id1713 . -172) (undo-tree-id1714 . -172) (undo-tree-id1715 . -130) (undo-tree-id1716 . -130) (undo-tree-id1717 . -21) (undo-tree-id1718 . -19) (undo-tree-id1719 . -21) (undo-tree-id1720 . -17) (undo-tree-id1721 . -17) (undo-tree-id1722 . -17) (undo-tree-id1723 . -17) (undo-tree-id1724 . -17) (undo-tree-id1725 . -17) (undo-tree-id1726 . -353) (undo-tree-id1727 . -352) (undo-tree-id1728 . -352) (undo-tree-id1729 . -353) (undo-tree-id1730 . -353) (undo-tree-id1731 . -353) (undo-tree-id1732 . -353) (undo-tree-id1733 . -352) (undo-tree-id1734 . -350) (undo-tree-id1735 . -19) (undo-tree-id1736 . -60) (undo-tree-id1737 . -15) (undo-tree-id1738 . -352) (undo-tree-id1739 . -352) (undo-tree-id1740 . -284) (undo-tree-id1741 . -284) (undo-tree-id1742 . -265) (undo-tree-id1743 . -265) (undo-tree-id1744 . -265) (undo-tree-id1745 . -265) (undo-tree-id1746 . -265) (undo-tree-id1747 . -265) (undo-tree-id1748 . -265) (undo-tree-id1749 . -265) (undo-tree-id1750 . -267) (undo-tree-id1751 . -267) (undo-tree-id1752 . -352) (undo-tree-id1753 . -352) (undo-tree-id1754 . -310) (undo-tree-id1755 . -310) (undo-tree-id1756 . -219) (undo-tree-id1757 . -219) (undo-tree-id1758 . -219) (undo-tree-id1759 . -275) (undo-tree-id1760 . -275) (undo-tree-id1761 . -352) (undo-tree-id1762 . -352) (undo-tree-id1763 . -126) (undo-tree-id1764 . -282) (undo-tree-id1765 . -282) (undo-tree-id1766 . -126) (undo-tree-id1767 . -282) (undo-tree-id1768 . -26) (undo-tree-id1769 . -26) (undo-tree-id1770 . -282) (undo-tree-id1771 . -26) (undo-tree-id1772 . -26) (undo-tree-id1773 . -26) (undo-tree-id1774 . -1) (undo-tree-id1775 . -26) (undo-tree-id1776 . -26) (undo-tree-id1777 . -26) (undo-tree-id1778 . -26) (undo-tree-id1779 . -26) (undo-tree-id1780 . -26) (undo-tree-id1781 . -26) (undo-tree-id1782 . -26) (undo-tree-id1783 . -26) (undo-tree-id1784 . -26) (undo-tree-id1785 . -26) (undo-tree-id1786 . -26) (undo-tree-id1787 . -26) (undo-tree-id1788 . -26) (undo-tree-id1789 . -26) (undo-tree-id1790 . -26) (undo-tree-id1791 . -26) (undo-tree-id1792 . -26) (undo-tree-id1793 . -26) (undo-tree-id1794 . -26) (undo-tree-id1795 . -26) (undo-tree-id1796 . -26) (undo-tree-id1797 . -26) (undo-tree-id1798 . -26) (undo-tree-id1799 . -26) (undo-tree-id1800 . -352) (undo-tree-id1801 . -352) (undo-tree-id1802 . -352) (undo-tree-id1803 . -352) (undo-tree-id1804 . -352) (undo-tree-id1805 . -352) (undo-tree-id1806 . -352) (undo-tree-id1807 . -352) (undo-tree-id1808 . -352) (undo-tree-id1809 . -352) (undo-tree-id1810 . -352) (undo-tree-id1811 . -352) (undo-tree-id1812 . -352) (undo-tree-id1813 . -352) (undo-tree-id1814 . -352) (undo-tree-id1815 . -352) (undo-tree-id1816 . -352) (undo-tree-id1817 . -352) (undo-tree-id1818 . -352) (undo-tree-id1819 . -352) (undo-tree-id1820 . -352) (undo-tree-id1821 . -352) (undo-tree-id1822 . -352) (undo-tree-id1823 . -352) (undo-tree-id1824 . -352) (undo-tree-id1825 . -352) (t 26286 11744 807625 65000)) ((4197 . 4550)) (26286 11745 204948 327000) 0 nil] [nil nil ((4223 . 4227)) ((#("U.co" 0 1 (face tree-sitter-hl-face:type.builtin fontified t) 1 2 (fontified t) 2 4 (face tree-sitter-hl-face:variable fontified t)) . 4223) (undo-tree-id1186 . -3) (undo-tree-id1187 . -3) (undo-tree-id1188 . -3) (undo-tree-id1189 . -4) (undo-tree-id1190 . -3)) (26286 11712 6454 452000) 0 nil])
([nil nil ((#("  (!maps, !sizes) <- do
" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 3 4 (face haskell-operator-face syntax-table (1) fontified t) 4 8 (face tree-sitter-hl-face:variable fontified t) 8 9 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 9 10 (fontified t) 10 11 (face haskell-operator-face syntax-table (1) fontified t) 11 16 (face tree-sitter-hl-face:variable fontified t) 16 17 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 17 18 (fontified t) 18 19 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 19 20 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 20 21 (fontified t) 21 23 (face tree-sitter-hl-face:keyword fontified t) 23 24 (fontified t)) . 3971) (undo-tree-id1862 . -23) (undo-tree-id1863 . -2) (undo-tree-id1864 . -24) (undo-tree-id1865 . -24) (undo-tree-id1866 . -24) (undo-tree-id1867 . -24) (undo-tree-id1868 . -24) (undo-tree-id1869 . -24) (undo-tree-id1870 . -24) (undo-tree-id1871 . -24) (undo-tree-id1872 . -24) (undo-tree-id1873 . -24) (undo-tree-id1874 . -24) (undo-tree-id1875 . -24) (undo-tree-id1876 . -24) (undo-tree-id1877 . -24) (undo-tree-id1878 . -24) (undo-tree-id1879 . -24) (undo-tree-id1880 . -18) (undo-tree-id1881 . -2) (undo-tree-id1882 . -24) (undo-tree-id1883 . -24) (undo-tree-id1884 . -24) (undo-tree-id1885 . -24) (undo-tree-id1886 . -21) (undo-tree-id1887 . -2) (undo-tree-id1888 . -17) (undo-tree-id1889 . -17) (undo-tree-id1890 . -17) (undo-tree-id1891 . -24) 3988 (t 26286 11752 293735 443000)) nil (26286 11760 949941 485000) 0 nil])
([nil nil ((#("    let !tpsByPerson = V.map (V.fromList . reverse) . V.accumulate (flip (:)) (V.replicate n []) $ tpsByPerson_
" 0 1 (fontified t) 1 2 (fontified t rear-nonsticky t) 2 3 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 3 4 (fontified t) 4 7 (face tree-sitter-hl-face:keyword fontified t) 7 8 (fontified t) 8 9 (face haskell-operator-face fontified t syntax-table (1)) 9 20 (face tree-sitter-hl-face:variable fontified t) 20 21 (fontified t) 21 22 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 22 23 (fontified t) 23 24 (face tree-sitter-hl-face:type.builtin fontified t) 24 25 (fontified t) 25 28 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 28 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 30 31 (face tree-sitter-hl-face:type.builtin fontified t) 31 32 (fontified t) 32 40 (face tree-sitter-hl-face:variable fontified t) 40 41 (fontified t) 41 42 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 42 43 (fontified t) 43 50 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 50 51 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 51 52 (fontified t) 52 53 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 53 54 (fontified t) 54 55 (face tree-sitter-hl-face:type.builtin fontified t) 55 56 (fontified t) 56 66 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 66 67 (fontified t) 67 68 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 68 72 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 72 73 (fontified t) 73 74 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 74 75 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 75 76 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 76 77 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 77 78 (fontified t) 78 79 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 79 80 (face tree-sitter-hl-face:type.builtin fontified t) 80 81 (fontified t) 81 90 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 90 91 (fontified t) 91 92 (face tree-sitter-hl-face:variable fontified t) 92 93 (fontified t) 93 94 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 94 95 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 95 96 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 96 97 (fontified t) 97 98 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 98 99 (fontified t) 99 111 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 111 112 (fontified t)) . 4085) (undo-tree-id1416 . -112) (undo-tree-id1417 . -111) (undo-tree-id1418 . -112) (undo-tree-id1419 . -112) (undo-tree-id1420 . -112) (undo-tree-id1421 . -4) (undo-tree-id1422 . -4) (undo-tree-id1423 . -9) (undo-tree-id1424 . -9) (undo-tree-id1425 . -9) (undo-tree-id1426 . -9) (undo-tree-id1427 . -9) (undo-tree-id1428 . -9) (undo-tree-id1429 . -8) (undo-tree-id1430 . -8) (undo-tree-id1431 . -8) (undo-tree-id1432 . -43) (undo-tree-id1433 . -43) (undo-tree-id1434 . -43) (undo-tree-id1435 . -43) (undo-tree-id1436 . -99) (undo-tree-id1437 . -99) (undo-tree-id1438 . -20) (undo-tree-id1439 . -112) (undo-tree-id1440 . -112) (undo-tree-id1441 . -112) (undo-tree-id1442 . -112) (undo-tree-id1443 . -112) (undo-tree-id1444 . -112) (undo-tree-id1445 . -112) (undo-tree-id1446 . -112) (undo-tree-id1447 . -112) (undo-tree-id1448 . -112) (undo-tree-id1449 . -112) (undo-tree-id1450 . -112) (undo-tree-id1451 . -112) (undo-tree-id1452 . -112) (undo-tree-id1453 . -112) (undo-tree-id1454 . -112) (undo-tree-id1455 . -112) (undo-tree-id1456 . -112) (undo-tree-id1457 . -112) (undo-tree-id1458 . -112) (undo-tree-id1459 . -112) (undo-tree-id1460 . -112) (undo-tree-id1461 . -112) (undo-tree-id1462 . -112) (undo-tree-id1463 . -112) (undo-tree-id1464 . -112) (undo-tree-id1465 . -112) (undo-tree-id1466 . -29) (undo-tree-id1467 . -50) (undo-tree-id1468 . -112) (undo-tree-id1469 . -112) (undo-tree-id1470 . -112) (undo-tree-id1471 . -112) (undo-tree-id1472 . -112) (undo-tree-id1473 . -112) (undo-tree-id1474 . -112) (undo-tree-id1475 . -112) (undo-tree-id1476 . -112) (undo-tree-id1477 . -112) (undo-tree-id1478 . -112) (undo-tree-id1479 . -112) (undo-tree-id1480 . -112) (undo-tree-id1481 . -112) (undo-tree-id1482 . -112) (undo-tree-id1483 . -112) (undo-tree-id1484 . -112) (undo-tree-id1485 . -112) (undo-tree-id1486 . -112) (undo-tree-id1487 . -112) (undo-tree-id1488 . -112) (undo-tree-id1489 . -112) (undo-tree-id1490 . -112) (undo-tree-id1491 . -112) (undo-tree-id1492 . -112) (undo-tree-id1493 . -112) (undo-tree-id1494 . -112) (undo-tree-id1495 . -112) (undo-tree-id1496 . -112) (undo-tree-id1497 . -112) (undo-tree-id1498 . -112) (undo-tree-id1499 . -112) (undo-tree-id1500 . -112) (undo-tree-id1501 . -112) (undo-tree-id1502 . -112) (undo-tree-id1503 . -112) (undo-tree-id1504 . -112) (undo-tree-id1505 . -112) (undo-tree-id1506 . -112) (undo-tree-id1507 . -112) (undo-tree-id1508 . -112) (undo-tree-id1509 . -112) (undo-tree-id1510 . -112) (undo-tree-id1511 . -112) (undo-tree-id1512 . -112) (undo-tree-id1513 . -112) (undo-tree-id1514 . -112) (undo-tree-id1515 . -112) (undo-tree-id1516 . -112) (undo-tree-id1517 . -112) (undo-tree-id1518 . -112) (undo-tree-id1519 . -112) (undo-tree-id1520 . -112) (undo-tree-id1521 . -112) (undo-tree-id1522 . -112) (undo-tree-id1523 . -112) (undo-tree-id1524 . -112) (undo-tree-id1525 . -112) (undo-tree-id1526 . -112) (undo-tree-id1527 . -112) (undo-tree-id1528 . -112) (undo-tree-id1529 . -112) (undo-tree-id1530 . -112) (undo-tree-id1531 . -112) (undo-tree-id1532 . -112) (undo-tree-id1533 . -112) (undo-tree-id1534 . -112) (undo-tree-id1535 . -112) (undo-tree-id1536 . -112) (undo-tree-id1537 . -112) (undo-tree-id1538 . -112) (undo-tree-id1539 . -112) (undo-tree-id1540 . -112) (undo-tree-id1541 . -112) (undo-tree-id1542 . -112) (undo-tree-id1543 . -112) (undo-tree-id1544 . -112) (undo-tree-id1545 . -112) (undo-tree-id1546 . -112) (undo-tree-id1547 . -112) (undo-tree-id1548 . -112) (undo-tree-id1549 . -112) (undo-tree-id1550 . -112) (undo-tree-id1551 . -112) (undo-tree-id1552 . -112) (undo-tree-id1553 . -112) (undo-tree-id1554 . -112) (undo-tree-id1555 . -112) (undo-tree-id1556 . -112) (undo-tree-id1557 . -112) (undo-tree-id1558 . -112) (undo-tree-id1559 . -112) (undo-tree-id1560 . -112) (undo-tree-id1561 . -112) (undo-tree-id1562 . -112) (undo-tree-id1563 . -112)) ((4085 . 4197)) (26286 11741 356246 93000) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . 3971) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1)) nil (26286 11760 949933 615000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3974 . 3975) (3971 . 4083)) ((#("    let !tpsByPerson = V.map (V.fromList . reverse) . V.accumulate (flip (:)) (V.replicate n []) $ tpsByPerson_
" 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t) 2 3 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified nil) 3 4 (rear-nonsticky nil fontified nil) 4 7 (face tree-sitter-hl-face:keyword fontified nil) 7 8 (fontified nil) 8 9 (face haskell-operator-face syntax-table (1) fontified nil) 9 20 (face tree-sitter-hl-face:variable fontified nil) 20 21 (fontified nil) 21 22 (syntax-table (1) face tree-sitter-hl-face:operator fontified nil) 22 23 (fontified nil) 23 24 (face tree-sitter-hl-face:type.builtin fontified nil) 24 25 (fontified nil) 25 28 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified nil) 28 29 (fontified nil) 29 30 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified nil) 30 31 (face tree-sitter-hl-face:type.builtin fontified nil) 31 32 (fontified nil) 32 40 (face tree-sitter-hl-face:variable fontified nil) 40 41 (fontified nil) 41 42 (syntax-table (1) face tree-sitter-hl-face:operator fontified nil) 42 43 (fontified nil) 43 50 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified nil) 50 51 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified nil) 51 52 (fontified nil) 52 53 (syntax-table (1) face tree-sitter-hl-face:operator fontified nil) 53 54 (fontified nil) 54 55 (face tree-sitter-hl-face:type.builtin fontified nil) 55 56 (fontified nil) 56 66 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified nil) 66 67 (fontified nil) 67 68 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified nil) 68 72 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified nil) 72 73 (fontified nil) 73 74 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified nil) 74 75 (syntax-table (1) face tree-sitter-hl-face:operator fontified nil) 75 76 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified nil) 76 77 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified nil) 77 78 (fontified nil) 78 79 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified nil) 79 80 (face tree-sitter-hl-face:type.builtin fontified nil) 80 81 (fontified nil) 81 90 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified nil) 90 91 (fontified nil) 91 92 (face tree-sitter-hl-face:variable fontified nil) 92 93 (fontified nil) 93 94 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified nil) 94 95 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified nil) 95 96 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified nil) 96 97 (fontified nil) 97 98 (syntax-table (1) face tree-sitter-hl-face:operator fontified nil) 98 99 (fontified nil) 99 111 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified nil) 111 112 (fontified nil)) . 3971) (undo-tree-id1668 . -2) (undo-tree-id1669 . -112) (undo-tree-id1670 . -112) (undo-tree-id1671 . -4) (undo-tree-id1672 . -3) (undo-tree-id1673 . -4) (undo-tree-id1674 . -3) (undo-tree-id1675 . -112) (undo-tree-id1676 . -112) (undo-tree-id1677 . -112) (undo-tree-id1678 . -112) (undo-tree-id1679 . -112) (undo-tree-id1680 . -112) (undo-tree-id1681 . -112) (undo-tree-id1682 . -112) (undo-tree-id1683 . -112) (undo-tree-id1684 . -112) (undo-tree-id1685 . -112) (undo-tree-id1686 . -112) (undo-tree-id1687 . -112) (undo-tree-id1688 . -112) (undo-tree-id1689 . -2) (undo-tree-id1690 . -97) (undo-tree-id1691 . -112) (undo-tree-id1692 . -97) (undo-tree-id1693 . -97) (undo-tree-id1694 . -112) (undo-tree-id1695 . -97) (undo-tree-id1696 . -2) (undo-tree-id1697 . -2) (undo-tree-id1698 . -2) (undo-tree-id1699 . -2) (undo-tree-id1700 . -2) (undo-tree-id1701 . -2) (undo-tree-id1702 . -2) (undo-tree-id1703 . -2) (undo-tree-id1704 . -2) (nil rear-nonsticky t 3974 . 3975)) (26286 11741 191294 919000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t rear-nonsticky t)) . 3971) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1)) nil (26286 11760 949932 954000) 0 nil])
([nil nil ((#("  " 0 1 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 1 2 (rear-nonsticky t fontified t)) . 3973) (undo-tree-id1410 . -1) (undo-tree-id1411 . -2) (undo-tree-id1412 . -1) (undo-tree-id1413 . -2) (undo-tree-id1414 . -1) (undo-tree-id1415 . -2)) ((3973 . 3975)) (26286 11741 29112 586000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4059) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1)) nil (26286 11760 949931 998000) 0 nil])
([nil nil ((#("  (!maps, !sizes) <- do
    let tpsByPerson_ = V.map swap . U.convert $ U.modify (VAI.sortBy (comparing fst)) tps
    (vec, V.map (IM.size . unIM) vec)
" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 3 4 (face haskell-operator-face syntax-table (1) fontified t) 4 8 (face tree-sitter-hl-face:variable fontified t) 8 9 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 9 10 (fontified t) 10 11 (face haskell-operator-face syntax-table (1) fontified t) 11 16 (face tree-sitter-hl-face:variable fontified t) 16 17 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 17 18 (fontified t) 18 19 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 19 20 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 20 21 (fontified t) 21 23 (face tree-sitter-hl-face:keyword fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t rear-nonsticky t) 26 27 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 27 28 (fontified t) 28 31 (face tree-sitter-hl-face:keyword fontified t) 31 32 (fontified t) 32 44 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 44 45 (fontified t) 45 46 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 46 47 (fontified t) 47 48 (face tree-sitter-hl-face:type.builtin fontified t) 48 49 (fontified t) 49 52 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 52 53 (fontified t) 53 57 (face tree-sitter-hl-face:variable fontified t) 57 58 (fontified t) 58 59 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 59 60 (fontified t) 60 61 (face tree-sitter-hl-face:type.builtin fontified t) 61 62 (fontified t) 62 69 (face tree-sitter-hl-face:variable fontified t) 69 70 (fontified t) 70 71 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 71 72 (fontified t) 72 73 (face tree-sitter-hl-face:type.builtin fontified t) 73 74 (fontified t) 74 80 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 80 81 (fontified t) 81 82 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 82 85 (face tree-sitter-hl-face:type.builtin fontified t) 85 86 (fontified t) 86 92 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 92 93 (fontified t) 93 94 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 94 103 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 103 104 (fontified t) 104 107 (face tree-sitter-hl-face:variable fontified t) 107 108 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 108 109 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 109 110 (fontified t) 110 112 (face tree-sitter-hl-face:variable fontified t) 112 113 (face tree-sitter-hl-face:variable fontified t rear-nonsticky t) 113 114 (fontified t) 114 116 (fontified t) 116 117 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 117 118 (fontified t) 118 119 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 119 122 (face tree-sitter-hl-face:variable fontified t) 122 123 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 123 124 (fontified t) 124 125 (face tree-sitter-hl-face:type.builtin fontified t) 125 126 (fontified t) 126 129 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 129 130 (fontified t) 130 131 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 131 133 (face tree-sitter-hl-face:type.builtin fontified t) 133 134 (fontified t) 134 138 (face tree-sitter-hl-face:variable fontified t) 138 139 (fontified t) 139 140 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 140 141 (fontified t) 141 145 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 145 146 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 146 147 (fontified t) 147 149 (face tree-sitter-hl-face:variable fontified t) 149 150 (face tree-sitter-hl-face:variable fontified t rear-nonsticky t) 150 151 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 151 152 (fontified t)) . 4081) (undo-tree-id1191 . -114) (undo-tree-id1192 . -151) (undo-tree-id1193 . -2) (undo-tree-id1194 . -114) (undo-tree-id1195 . 38) (undo-tree-id1196 . -114) (undo-tree-id1197 . -114) (undo-tree-id1198 . 108) (undo-tree-id1199 . -32) (undo-tree-id1200 . -32) (undo-tree-id1201 . -32) (undo-tree-id1202 . -32) (undo-tree-id1203 . -81) (undo-tree-id1204 . -112) (undo-tree-id1205 . -112) (undo-tree-id1206 . -58) (undo-tree-id1207 . -32) (undo-tree-id1208 . -32) (undo-tree-id1209 . -32) (undo-tree-id1210 . -32) (undo-tree-id1211 . -32) (undo-tree-id1212 . -32) (undo-tree-id1213 . -114) (undo-tree-id1214 . -114) (undo-tree-id1215 . -114) (undo-tree-id1216 . -114) (undo-tree-id1217 . -33) (undo-tree-id1218 . -33) (undo-tree-id1219 . -33) (undo-tree-id1220 . -33) (undo-tree-id1221 . -114) (undo-tree-id1222 . -114) (undo-tree-id1223 . -114) (undo-tree-id1224 . -114) (undo-tree-id1225 . -114) (undo-tree-id1226 . -114) (undo-tree-id1227 . -114) (undo-tree-id1228 . -114) (undo-tree-id1229 . -114) (undo-tree-id1230 . -114) (undo-tree-id1231 . -114) (undo-tree-id1232 . -114) (undo-tree-id1233 . -32) (undo-tree-id1234 . -114) (undo-tree-id1235 . -114) (undo-tree-id1236 . -114) (undo-tree-id1237 . -27) (undo-tree-id1238 . -114) (undo-tree-id1239 . -114) (undo-tree-id1240 . -114) (undo-tree-id1241 . -114) (undo-tree-id1242 . -114) (undo-tree-id1243 . -114) (undo-tree-id1244 . -114) (undo-tree-id1245 . -114) (undo-tree-id1246 . -24) (undo-tree-id1247 . -24) (undo-tree-id1248 . -114) (undo-tree-id1249 . -114) (undo-tree-id1250 . -114) (undo-tree-id1251 . -114) (undo-tree-id1252 . -114) (undo-tree-id1253 . -114) (undo-tree-id1254 . -114) (undo-tree-id1255 . -114) (undo-tree-id1256 . -24) (undo-tree-id1257 . -24) (undo-tree-id1258 . -24) (undo-tree-id1259 . -24) (undo-tree-id1260 . -24) (undo-tree-id1261 . -24) (undo-tree-id1262 . -24) (undo-tree-id1263 . -24) (undo-tree-id1264 . -24) (undo-tree-id1265 . -24) (undo-tree-id1266 . -24) (undo-tree-id1267 . -114) (undo-tree-id1268 . -114) (undo-tree-id1269 . -24) (undo-tree-id1270 . -24) (undo-tree-id1271 . -24) (undo-tree-id1272 . -18) (undo-tree-id1273 . -2) (undo-tree-id1274 . -24) (undo-tree-id1275 . -24) (undo-tree-id1276 . -114) (undo-tree-id1277 . -114) (undo-tree-id1278 . -114) (undo-tree-id1279 . -114) (undo-tree-id1280 . -114) (undo-tree-id1281 . -150) (undo-tree-id1282 . -150) (undo-tree-id1283 . -130) (undo-tree-id1284 . -114) (undo-tree-id1285 . -24) (undo-tree-id1286 . -24) (undo-tree-id1287 . -114) (undo-tree-id1288 . -114) (undo-tree-id1289 . -114) (undo-tree-id1290 . -114) (undo-tree-id1291 . -114) (undo-tree-id1292 . -114) (undo-tree-id1293 . -114) (undo-tree-id1294 . -118) (undo-tree-id1295 . -114) (undo-tree-id1296 . -114) (undo-tree-id1297 . -114) (undo-tree-id1298 . -114) (undo-tree-id1299 . -114) (undo-tree-id1300 . -21) (undo-tree-id1301 . -114) (undo-tree-id1302 . -114) (undo-tree-id1303 . -114) (undo-tree-id1304 . -114) (undo-tree-id1305 . -114) (undo-tree-id1306 . -114) (undo-tree-id1307 . -114) (undo-tree-id1308 . -114) (undo-tree-id1309 . -114) (undo-tree-id1310 . -114) (undo-tree-id1311 . -114) (undo-tree-id1312 . -114) (undo-tree-id1313 . -114) (undo-tree-id1314 . -118) (undo-tree-id1315 . -118) (undo-tree-id1316 . -114) (undo-tree-id1317 . -114) (undo-tree-id1318 . -114) (undo-tree-id1319 . -114) (undo-tree-id1320 . -114) (undo-tree-id1321 . -114) (undo-tree-id1322 . -114) (undo-tree-id1323 . -114) (undo-tree-id1324 . -114) (undo-tree-id1325 . -114) (undo-tree-id1326 . -114) (undo-tree-id1327 . -114) (undo-tree-id1328 . -114) (undo-tree-id1329 . -114) (undo-tree-id1330 . -114) (undo-tree-id1331 . -114) (undo-tree-id1332 . -114) (undo-tree-id1333 . -114) (undo-tree-id1334 . -114) (undo-tree-id1335 . -114) (undo-tree-id1336 . -114) (undo-tree-id1337 . -114) (undo-tree-id1338 . -114) (undo-tree-id1339 . -114) (undo-tree-id1340 . -114) (undo-tree-id1341 . -114) (undo-tree-id1342 . -114) (undo-tree-id1343 . -114) (undo-tree-id1344 . -114) (undo-tree-id1345 . -114) (undo-tree-id1346 . -114) (undo-tree-id1347 . -114) (undo-tree-id1348 . -114) (undo-tree-id1349 . -114) (undo-tree-id1350 . -114) (undo-tree-id1351 . -114) (undo-tree-id1352 . -114) (undo-tree-id1353 . -114) (undo-tree-id1354 . -114) (undo-tree-id1355 . -114) (undo-tree-id1356 . -114) (undo-tree-id1357 . -114) (undo-tree-id1358 . -114) (undo-tree-id1359 . -114) (undo-tree-id1360 . -114) (undo-tree-id1361 . -114) (undo-tree-id1362 . -114) (undo-tree-id1363 . -114) (undo-tree-id1364 . -114) (undo-tree-id1365 . -114) (undo-tree-id1366 . -114) (undo-tree-id1367 . -152) (undo-tree-id1368 . -114) (undo-tree-id1369 . -114) (undo-tree-id1370 . -114) (undo-tree-id1371 . -114) (undo-tree-id1372 . -114) (undo-tree-id1373 . -114) (undo-tree-id1374 . -114) (undo-tree-id1375 . -114) (undo-tree-id1376 . -114) (undo-tree-id1377 . -114) (undo-tree-id1378 . -114) (undo-tree-id1379 . -114) (undo-tree-id1380 . -114) (undo-tree-id1381 . -114) (undo-tree-id1382 . -114) (undo-tree-id1383 . -114) (undo-tree-id1384 . -114) (undo-tree-id1385 . -114) (undo-tree-id1386 . -114) (undo-tree-id1387 . -114) (undo-tree-id1388 . -114) (undo-tree-id1389 . -114) (undo-tree-id1390 . -114) (undo-tree-id1391 . -151) (undo-tree-id1392 . -114) (undo-tree-id1393 . -114) (undo-tree-id1394 . -24) (undo-tree-id1395 . -114) (undo-tree-id1396 . -24) (undo-tree-id1397 . -114) (undo-tree-id1398 . -2) (undo-tree-id1399 . -2) (undo-tree-id1400 . -2) (undo-tree-id1401 . -2) (undo-tree-id1402 . -152) (undo-tree-id1403 . -2) (undo-tree-id1404 . -114) (undo-tree-id1405 . -114) (undo-tree-id1406 . -152) (undo-tree-id1407 . -114) (undo-tree-id1408 . -152) (undo-tree-id1409 . -152) 4195) ((4081 . 4233) (t 26286 11739 728550 175000)) (26286 11739 725959 829000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t rear-nonsticky t)) . 4059) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1)) nil (26286 11760 949931 15000) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified nil)) . 4478) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (#(" " 0 1 (fontified nil)) . 4464) (#(" " 0 1 (fontified nil)) . 4451) (#(" " 0 1 (fontified nil)) . 4415) (#(" " 0 1 (fontified nil)) . 4371) (#(" " 0 1 (fontified nil)) . 4327) (#(" " 0 1 (fontified nil)) . 4304) (#(" " 0 1 (fontified nil font-lock-fontified t)) . 4286) (#(" " 0 1 (fontified t)) . 4233) (#(" " 0 1 (fontified t)) . 4170) 4487) nil (26286 11760 949929 907000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 4469) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (#(" " 0 1 (fontified nil)) . 4456) (#(" " 0 1 (fontified nil)) . 4444) (#(" " 0 1 (fontified nil)) . 4409) (#(" " 0 1 (fontified nil)) . 4366) (#(" " 0 1 (fontified nil)) . 4323) (#(" " 0 1 (fontified nil)) . 4301) (#(" " 0 1 (fontified nil font-lock-fontified t)) . 4284) (#(" " 0 1 (fontified nil)) . 4232) (#(" " 0 1 (fontified t)) . 4170) 4478) nil (26286 11760 949928 394000) 0 nil])
([nil nil ((#("
    (vec, V.map (IM.size . unIM) vec)
" 0 1 (indent-bars-display #("  │ │ │ │
" 2 3 (face indent-bars-1) 4 5 (face indent-bars-2) 6 7 (face indent-bars-3) 8 9 (face indent-bars-4)) fontified t) 1 3 (fontified t) 3 4 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 6 9 (face tree-sitter-hl-face:variable fontified t) 9 10 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 10 11 (fontified t) 11 12 (face tree-sitter-hl-face:type.builtin fontified t) 12 13 (fontified t) 13 16 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 16 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 18 20 (face tree-sitter-hl-face:type.builtin fontified t) 20 21 (fontified t) 21 25 (face tree-sitter-hl-face:variable fontified t) 25 26 (fontified t) 26 27 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 27 28 (fontified t) 28 32 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 32 33 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 33 34 (fontified t) 34 36 (face tree-sitter-hl-face:variable fontified t) 36 37 (face tree-sitter-hl-face:variable fontified t rear-nonsticky t) 37 38 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 38 39 (fontified t)) . 4506) (undo-tree-id1829 . -5) (undo-tree-id1830 . -38) (undo-tree-id1831 . -5) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -37) (undo-tree-id1838 . -37) (undo-tree-id1839 . -17) (undo-tree-id1840 . -5) (undo-tree-id1841 . -5) (undo-tree-id1842 . -39) (undo-tree-id1843 . -1) (undo-tree-id1844 . -5) (undo-tree-id1845 . -5) (undo-tree-id1846 . -5) (undo-tree-id1847 . -5) (undo-tree-id1848 . -39) (undo-tree-id1849 . -39)) nil (26286 11760 949925 588000) 0 nil])
([nil nil ((4209 . 4211) (4206 . 4209) (#("z" 0 1 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type.argument fontified t)) . -4206) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (#("I" 0 1 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type.argument fontified t)) . -4207) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) 4208 (4207 . 4208) (#("i" 0 1 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type.argument fontified t)) . -4207) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (#("n" 0 1 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type.argument fontified t)) . -4208) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (#("(" 0 1 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . -4209) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) 4210 (4205 . 4210) (4204 . 4205) (4186 . 4204) (t 26286 11760 952863 107000)) nil (26286 11777 759478 844000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3894) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3895) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3896) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3897) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3898) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (#(" " 0 1 (fontified t)) . -3899) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number syntax-table (2) fontified t)) . -3900) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (#(" " 0 1 (fontified t)) . -3901) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (#("x" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3902) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3903) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (#("0" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3904) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (#(" " 0 1 (fontified t)) . -3905) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3906) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3907) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (#("0" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3908) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (#("
" 0 1 (fontified t)) . -3909) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) 3910 (#("  " 0 2 (fontified t)) . -3910) (undo-tree-id2850 . -2) (undo-tree-id2851 . -1) (undo-tree-id2852 . -2) (undo-tree-id2853 . -1) (undo-tree-id2854 . -2) 3912 (3910 . 3912) (3909 . 3910) (#(" " 0 1 (fontified t)) . -3909) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (#(" " 0 1 (fontified t)) . -3910) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) 3911 (3892 . 3911) (#("+" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . -3892) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) 3893 (3890 . 3893) (#("=" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . -3890) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) 3891 (3889 . 3891) (#("x" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3889) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) 3890 (3884 . 3890) (#("x" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3884) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3885) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (#(" " 0 1 (fontified t)) . -3886) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) 3887 (3879 . 3887) (3878 . 3879) (3876 . 3878) (#(")" 0 1 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . -3876) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) 3877 (3876 . 3877) (3872 . 3876) (3871 . 3872) (3870 . 3871) (#(" " 0 1 (haskell-type t font-lock-multiline t fontified t)) . -3870) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (#("t" 0 1 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type.argument fontified t)) . -3871) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) 3872 (3866 . 3872) (3862 . 3866) (3860 . 3862) (3856 . 3860) (3855 . 3856) (#(" " 0 1 (haskell-type t font-lock-multiline t fontified t)) . -3855) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) 3856 (3850 . 3856) (#("(" 0 1 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . -3850) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (#("[" 0 1 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . -3851) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) 3852 (3846 . 3852) (3844 . 3846) (3840 . 3844) (3839 . 3840) (3826 . 3839) (3825 . 3826) (3824 . 3825) 3805 (t 26286 11777 763110 921000)) nil (26286 11833 517841 518000) 0 nil])
([nil nil ((3879 . 3895) 3893) nil (26286 11833 517171 292000) 0 nil])
([nil nil ((3886 . 3892) (3885 . 3886) (3884 . 3885) (#("xs0 ys0 = " 0 3 (face (tree-sitter-hl-face:variable.parameter tree-sitter-hl-face:variable) fontified t) 3 4 (face tree-sitter-hl-face:variable.parameter fontified t) 4 7 (face (tree-sitter-hl-face:variable.parameter tree-sitter-hl-face:variable) fontified t) 7 8 (fontified t) 8 9 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 9 10 (fontified t)) . 3884) (undo-tree-id2084 . -9) (undo-tree-id2085 . -10) (undo-tree-id2086 . -10) (undo-tree-id2087 . -10) (undo-tree-id2088 . -10)) nil (26286 11833 517170 650000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3892 . 3893) (#("
" 0 1 (fontified nil)) . -3906) (3893 . 3907) (nil face tree-sitter-hl-face:number 3892 . 3893) (nil fontified t 3892 . 3893) (3892 . 3893) 3891) nil (26286 11833 517169 153000) 0 nil])
([nil nil ((3902 . 3906) (3901 . 3902) (3898 . 3901) (#("[] _ = 0" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket tree-sitter-hl-face:variable.parameter) fontified t) 1 2 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket tree-sitter-hl-face:variable.parameter) fontified t) 2 3 (face tree-sitter-hl-face:variable.parameter fontified t) 3 4 (face (tree-sitter-hl-face:operator tree-sitter-hl-face:variable.parameter) fontified t) 4 5 (fontified t) 5 6 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 6 7 (fontified t) 7 8 (face tree-sitter-hl-face:number syntax-table (2) fontified t)) . 3898) (undo-tree-id2079 . -7) (undo-tree-id2080 . -8) (undo-tree-id2081 . -8) (undo-tree-id2082 . -8) (undo-tree-id2083 . -8)) nil (26286 11833 517168 669000) 0 nil])
([nil nil ((3925 . 3928) (3924 . 3925) (#("s" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -3924) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) 3925 (3924 . 3925) (#("=" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . -3924) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) 3925 (3923 . 3925) (3918 . 3923) (3917 . 3918) (3912 . 3917) (#("xs0 ys0 = " 0 3 (face (tree-sitter-hl-face:variable.parameter tree-sitter-hl-face:variable) fontified t) 3 4 (face tree-sitter-hl-face:variable.parameter fontified t) 4 7 (face (tree-sitter-hl-face:variable.parameter tree-sitter-hl-face:variable) fontified t) 7 8 (fontified t) 8 9 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 9 10 (fontified t)) . 3912) (undo-tree-id1954 . -9) (undo-tree-id1955 . -9) (undo-tree-id1956 . -1) (undo-tree-id1957 . -2) (undo-tree-id1958 . -1) (undo-tree-id1959 . -3) (undo-tree-id1960 . -2) (undo-tree-id1961 . -4) (undo-tree-id1962 . -3) (undo-tree-id1963 . -5) (undo-tree-id1964 . -4) (undo-tree-id1965 . -5) (undo-tree-id1966 . -5) (undo-tree-id1967 . -5) (undo-tree-id1968 . -5) (undo-tree-id1969 . -6) (undo-tree-id1970 . -5) (undo-tree-id1971 . -6) (undo-tree-id1972 . -6) (undo-tree-id1973 . -6) (undo-tree-id1974 . -6) (undo-tree-id1975 . -7) (undo-tree-id1976 . -6) (undo-tree-id1977 . -8) (undo-tree-id1978 . -7) (undo-tree-id1979 . -8) (undo-tree-id1980 . -8) (undo-tree-id1981 . -8) (undo-tree-id1982 . -8) (undo-tree-id1983 . -9) (undo-tree-id1984 . -8) (undo-tree-id1985 . -10) (undo-tree-id1986 . -9) (undo-tree-id1987 . -10) (undo-tree-id1988 . -10) (undo-tree-id1989 . -10) (undo-tree-id1990 . -10) (undo-tree-id1991 . -10) (undo-tree-id1992 . -10) (undo-tree-id1993 . -10) (undo-tree-id1994 . -10) (undo-tree-id1995 . -10) (undo-tree-id1996 . -10) (undo-tree-id1997 . -10) (undo-tree-id1998 . -10) (undo-tree-id1999 . -10) (undo-tree-id2000 . -10) (undo-tree-id2001 . -10) (undo-tree-id2002 . -10) (undo-tree-id2003 . -10) (undo-tree-id2004 . -10) (undo-tree-id2005 . -10) (undo-tree-id2006 . -10) (undo-tree-id2007 . -10) (undo-tree-id2008 . -10) (undo-tree-id2009 . -10) (undo-tree-id2010 . -10) (undo-tree-id2011 . -10) (undo-tree-id2012 . -10) (undo-tree-id2013 . -10) (undo-tree-id2014 . -10) (undo-tree-id2015 . -10) (undo-tree-id2016 . -10) (undo-tree-id2017 . -10) (undo-tree-id2018 . -10) (undo-tree-id2019 . -10) (undo-tree-id2020 . -10) (undo-tree-id2021 . -10) (undo-tree-id2022 . -10) (undo-tree-id2023 . -10) (undo-tree-id2024 . -10) (undo-tree-id2025 . -10) (undo-tree-id2026 . -10) (undo-tree-id2027 . -10) (undo-tree-id2028 . -10) (undo-tree-id2029 . -10) (undo-tree-id2030 . -10) (undo-tree-id2031 . -10) (undo-tree-id2032 . -10) (undo-tree-id2033 . -10) (undo-tree-id2034 . -10) (undo-tree-id2035 . -10) (undo-tree-id2036 . -10) (undo-tree-id2037 . -10) (undo-tree-id2038 . -10) (undo-tree-id2039 . -10) (undo-tree-id2040 . -10) (undo-tree-id2041 . -10) (undo-tree-id2042 . -10) (undo-tree-id2043 . -10) (undo-tree-id2044 . -10) (undo-tree-id2045 . -10) (undo-tree-id2046 . -10) (undo-tree-id2047 . -10) (undo-tree-id2048 . -10) (undo-tree-id2049 . -10) (undo-tree-id2050 . -10) (undo-tree-id2051 . -10) (undo-tree-id2052 . -10) (undo-tree-id2053 . -10) (undo-tree-id2054 . -10) (undo-tree-id2055 . -10) (undo-tree-id2056 . -10) (undo-tree-id2057 . -10) (undo-tree-id2058 . -10) (undo-tree-id2059 . -10) (undo-tree-id2060 . -10) (undo-tree-id2061 . -10) (undo-tree-id2062 . -10) (undo-tree-id2063 . -10) (undo-tree-id2064 . -10) (undo-tree-id2065 . -10) (undo-tree-id2066 . -9) (undo-tree-id2067 . -10) (undo-tree-id2068 . -9) (undo-tree-id2069 . -9) (undo-tree-id2070 . -9) (undo-tree-id2071 . -7) (undo-tree-id2072 . -4) (undo-tree-id2073 . -7) (undo-tree-id2074 . -4) (undo-tree-id2075 . -10) (undo-tree-id2076 . -10) (undo-tree-id2077 . -10) (undo-tree-id2078 . -10)) nil (26286 11833 517165 617000) 0 nil])
([nil nil ((3922 . 3923) (3918 . 3922) (3917 . 3918) (3915 . 3917) (#("s" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . -3915) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) 3916 (3913 . 3916) (#("x" 0 1 (face (tree-sitter-hl-face:variable.parameter tree-sitter-hl-face:variable) fontified t)) . 3913) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1)) nil (26286 11833 517115 95000) 0 nil])
([nil nil ((3938 . 3939) (3934 . 3938) (3933 . 3934) (3929 . 3933) (#("y" 0 1 (face (tree-sitter-hl-face:variable.parameter tree-sitter-hl-face:variable) fontified t)) . 3929) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1)) nil (26286 11833 517110 640000) 0 nil])
([nil nil ((3946 . 3947) (t 26286 11833 521932 694000)) nil (26286 11839 609532 81000) 0 nil])
([nil nil ((3866 . 3869) (#("[(Int, Int)]" 0 1 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 1 2 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 2 5 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 5 6 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:punctuation.delimiter fontified t) 6 7 (haskell-type t font-lock-multiline t fontified t) 7 10 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 10 11 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 11 12 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 3866) (undo-tree-id2921 . -11) (undo-tree-id2922 . -4) (undo-tree-id2923 . -4) (undo-tree-id2924 . -4) (undo-tree-id2925 . -4) (undo-tree-id2926 . -4) (undo-tree-id2927 . -10) (undo-tree-id2928 . -10) (undo-tree-id2929 . -10) (undo-tree-id2930 . -10) (undo-tree-id2931 . -10) (undo-tree-id2932 . -10) (undo-tree-id2933 . -12) (undo-tree-id2934 . -12) 3876) nil (26286 11839 609530 21000) 0 nil])
([nil nil ((3914 . 3915) (nil fontified t 3915 . 3916) (nil face (tree-sitter-hl-face:operator tree-sitter-hl-face:variable.parameter) 3915 . 3916) (3915 . 3916) (3930 . 3931) (nil fontified t 3931 . 3932) (nil face (tree-sitter-hl-face:operator tree-sitter-hl-face:variable.parameter) 3931 . 3932) (3931 . 3932) 3898 (t 26286 11839 613022 446000)) nil (26286 11840 766664 813000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4365) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (t 26286 11840 770039 494000)) nil (26286 11871 128095 665000) 0 nil])
([nil nil ((#(" do" 0 1 (fontified t) 1 3 (face tree-sitter-hl-face:keyword fontified t)) . 4370) (undo-tree-id2937 . -2) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -3) (undo-tree-id2941 . -3) (t 26286 11871 130486 793000)) nil (26286 11888 835848 736000) 0 nil])
([nil nil (4433) nil (26286 11900 84494 723000) 0 nil])
([nil nil ((4431 . 4435) (t 26286 11888 840747 679000)) nil (26286 11900 84494 371000) 0 nil])
([nil nil ((apply -24 4470 4696 undo--wrap-and-run-primitive-undo 4470 4696 ((4639 . 4640) nil (4638 . 4639) nil (4637 . 4638) nil (4636 . 4637) nil (4622 . 4623) nil (4621 . 4622) nil (4620 . 4621) nil (4619 . 4620) nil (4606 . 4607) nil (4605 . 4606) nil (4604 . 4605) nil (4603 . 4604) nil (4567 . 4568) nil (4566 . 4567) nil (4565 . 4566) nil (4564 . 4565) nil (4520 . 4521) nil (4519 . 4520) nil (4518 . 4519) nil (4517 . 4518) nil (4473 . 4474) nil (4472 . 4473) nil (4471 . 4472) nil (4470 . 4471))) (4446 . 4448) (4444 . 4446)) nil (26286 11900 84492 44000) 0 nil])
([nil nil ((#("z" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4447) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (#("z" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4448) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . -4449) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (#("w" 0 1 (fontified t)) . -4450) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) 4451 (4447 . 4451) (#(" " 0 1 (fontified t)) . 4447) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (t 26286 11900 87913 346000)) nil (26286 11903 625941 158000) 0 nil])
([nil nil ((4457 . 4458) 4446) nil (26286 11903 625923 804000) 0 nil])
([nil nil ((4330 . 4331) (4294 . 4295) 4328 (t 26286 11903 628965 502000)) nil (26286 11916 565691 982000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4296) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (t 26286 11916 569156 89000)) nil (26286 11918 208329 466000) 0 nil])
([nil nil ((4295 . 4296) (#("!" 0 1 (face haskell-operator-face syntax-table (1) fontified t)) . 4295) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (t 26286 11918 211180 271000)) nil (26286 11919 359427 744000) 0 nil])
([nil nil ((#(":: V.Vector [(Int, Int)]) " 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 1 2 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 2 3 (haskell-type t font-lock-multiline t fontified t) 3 4 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type.builtin fontified t) 4 5 (haskell-type t font-lock-multiline t fontified t) 5 11 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 11 12 (haskell-type t font-lock-multiline t fontified t) 12 13 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 13 14 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified t) 14 17 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 17 18 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:punctuation.delimiter fontified t) 18 19 (haskell-type t font-lock-multiline t fontified t) 19 22 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 22 23 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified t) 23 24 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 24 25 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 25 26 (fontified t)) . 4305) (undo-tree-id3033 . -25) (undo-tree-id3034 . 1) (undo-tree-id3035 . -23) (undo-tree-id3036 . -26) (undo-tree-id3037 . -23) (undo-tree-id3038 . -23) (undo-tree-id3039 . -26) (t 26286 11919 362197 223000)) nil (26286 11924 707974 257000) 0 nil])
([nil nil ((4294 . 4295) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 4294) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1)) nil (26286 11924 707969 359000) 0 nil])
([nil nil ((4312 . 4313) (4307 . 4312) (4286 . 4307) (t 26286 11924 711276 1000)) nil (26286 11945 478428 945000) 0 nil])
([nil nil ((4205 . 4206) (#("V" 0 1 (face tree-sitter-hl-face:type.builtin fontified t)) . 4205) (undo-tree-id3040 . -1)) nil (26286 11945 478425 783000) 0 nil])
([nil nil ((4300 . 4301) (#("V" 0 1 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type.builtin fontified t)) . 4300) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (t 26286 11945 482581 882000)) nil (26286 11947 460183 925000) 0 nil])
([nil nil ((4400 . 4401) (#("G" 0 1 (face tree-sitter-hl-face:type.builtin fontified t)) . 4400) (undo-tree-id3044 . -1) (t 26286 11947 462611 40000)) nil (26286 11961 230333 602000) 0 nil])
([nil nil ((4550 . 4551) (#("G" 0 1 (face tree-sitter-hl-face:type.builtin fontified t)) . -4550) (undo-tree-id3045 . -1) (4503 . 4504) (#("G" 0 1 (face tree-sitter-hl-face:type.builtin fontified t)) . -4503) 4550 (t 26286 11961 234813 830000)) nil (26286 11966 819507 98000) 0 nil])
([nil nil ((4279 . 4281) (4271 . 4279) (4268 . 4269) (t 26286 11966 822896 109000)) nil (26286 11984 287681 876000) 0 nil])
([nil nil ((4198 . 4199) (4194 . 4198) (4193 . 4194) (4176 . 4193) (t 26286 11984 291153 296000)) nil (26286 12007 480554 507000) 0 nil])
([nil nil ((4372 . 4373) (t 26286 12007 484494 742000)) nil (26286 12021 686855 261000) 0 nil])
([nil nil ((4748 . 4769) (4746 . 4748) (4745 . 4746) (4741 . 4745) (4740 . 4741) (4726 . 4740) (#(" " 0 1 (fontified t)) . -4726) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (#("U" 0 1 (face tree-sitter-hl-face:type.builtin fontified t)) . -4727) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) 4728 (4717 . 4728) (4714 . 4717) (t 26286 12021 689703 847000)) nil (26286 12064 459551 944000) 0 nil])
([nil nil ((4800 . 4803) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4800) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4801) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4802) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4803) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) 4804 (4793 . 4804) (4791 . 4793) (4773 . 4791) (4772 . 4773) (#(" " 0 1 (fontified t)) . -4772) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) 4773 (4769 . 4773) (4750 . 4754) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4750) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4751) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) 4752 (4750 . 4752) (#("aclc" 0 4 (face tree-sitter-hl-face:variable fontified t)) . 4750) (undo-tree-id3100 . -3) (undo-tree-id3101 . -1) (undo-tree-id3102 . -2) (undo-tree-id3103 . -1) (undo-tree-id3104 . -3) (undo-tree-id3105 . -2) (undo-tree-id3106 . -4) (undo-tree-id3107 . -3) (undo-tree-id3108 . -4) (undo-tree-id3109 . -4) (undo-tree-id3110 . -4)) nil (26286 12064 459547 190000) 0 nil])
([nil nil ((4815 . 4818) (#("\"TODO\"" 0 1 (face tree-sitter-hl-face:string fontified t) 1 5 (face (warning bold tree-sitter-hl-face:string) fontified t) 5 6 (face tree-sitter-hl-face:string fontified t)) . 4815) (undo-tree-id3046 . -5) (undo-tree-id3047 . -6) (undo-tree-id3048 . -6) (undo-tree-id3049 . -6) (undo-tree-id3050 . -6)) nil (26286 12064 459530 987000) 0 nil])
([nil nil ((4794 . 4796) (#("intervals" 0 9 (face tree-sitter-hl-face:variable fontified t)) . 4794) (undo-tree-id3121 . -8) (undo-tree-id3122 . -6) (undo-tree-id3123 . -6) (undo-tree-id3124 . -6) (undo-tree-id3125 . -6) (undo-tree-id3126 . -6) (undo-tree-id3127 . -6) (undo-tree-id3128 . -6) (undo-tree-id3129 . -6) (undo-tree-id3130 . -6) (undo-tree-id3131 . -6) (undo-tree-id3132 . -6) (undo-tree-id3133 . -6) (undo-tree-id3134 . -6) (undo-tree-id3135 . -8) (undo-tree-id3136 . -8) (undo-tree-id3137 . -9) (undo-tree-id3138 . -9) (t 26286 12064 464333 422000)) nil (26286 12084 907142 853000) 0 nil])
([nil nil ((4810 . 4821) (#("U" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -4810) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) 4811 (4808 . 4811) (t 26286 12084 911634 333000)) nil (26286 12088 634011 394000) 0 nil])
([nil nil ((4034 . 4035) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4034) (undo-tree-id3142 . -1) (t 26286 12088 639689 194000)) nil (26286 12110 260569 418000) 0 nil])
([nil nil ((3954 . 3974) (#("y" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -3954) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (#("l" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -3955) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (#(" " 0 1 (fontified t)) . -3956) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (#(">" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . -3957) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (#(" " 0 1 (fontified t)) . -3958) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (#("x" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -3959) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -3960) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) 3961 (3960 . 3961) (3939 . 3960) (3938 . 3939) (3937 . 3938) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket tree-sitter-hl-face:variable.parameter) fontified t)) . -3937) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (#("
" 0 1 (face tree-sitter-hl-face:variable.parameter fontified t)) . -3938) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) 3939 (3938 . 3939) (#(" " 0 1 (face tree-sitter-hl-face:variable.parameter fontified t)) . 3938) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) 3939 (#("= 0" 0 1 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 1 2 (fontified t) 2 3 (face tree-sitter-hl-face:number fontified t syntax-table (2))) . 3939) (undo-tree-id3292 . -2) (undo-tree-id3293 . -2) (undo-tree-id3294 . -1) (undo-tree-id3295 . -2) (undo-tree-id3296 . -1) (undo-tree-id3297 . -3) (undo-tree-id3298 . -3) (undo-tree-id3299 . -3) (undo-tree-id3300 . -3) (t 26286 12110 265007 411000)) nil (26286 12139 25201 423000) 0 nil])
([nil nil ((3986 . 3991) (3977 . 3986) (3974 . 3977) 3973 (t 26286 12139 28430 620000)) nil (26286 12159 828416 811000) 0 nil])
([nil nil ((4649 . 4664) (t 26286 12141 998474 317000)) nil (26286 12163 812615 495000) 0 nil] [nil nil ((4688 . 4689) (t 26286 12141 998474 317000)) ((#(" " 0 1 (fontified t)) . 4688) (undo-tree-id3301 . -1)) (26286 12159 827216 252000) 0 nil])
([nil nil ((4056 . 4069) (4055 . 4056) (4045 . 4055) (4042 . 4045) (#(" " 0 1 (fontified t)) . -4042) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (#(" " 0 1 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified t)) . -4043) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (#(" " 0 1 (fontified t)) . -4044) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) 4045 (4036 . 4045) (4018 . 4036) (4013 . 4018) (4005 . 4013) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4005) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4006) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) 4007 (3995 . 4007) (3990 . 3995) (#(" " 0 1 (fontified t)) . 3990) 3975 (t 26286 12163 815795 294000)) nil (26286 12190 914234 690000) 0 nil])
nil
([nil nil ((4500 . 4503) (#("." 0 1 (face haskell-operator-face syntax-table (1) fontified t)) . -4500) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (#(" " 0 1 (fontified t)) . -4501) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) 4502 (4495 . 4502) (t 26286 12190 919194 5000)) nil (26286 12218 374507 737000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4386) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4387) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) 4388 (4375 . 4388) (#("2" 0 1 (face tree-sitter-hl-face:number syntax-table (2) fontified t)) . -4375) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4376) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) 4377 (4371 . 4377) (#("b" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . -4371) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) 4372 (4368 . 4372) (#("reverse" 0 7 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . 4368) (undo-tree-id3452 . -6) (undo-tree-id3453 . -7) (undo-tree-id3454 . -7) (undo-tree-id3455 . -7) (t 26286 12218 378597 915000)) nil (26286 12258 380087 513000) 0 nil])
([nil nil ((#(" . sortBt (comparing " 0 1 (fontified t) 1 2 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 2 3 (fontified t) 3 9 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 9 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 11 20 (face tree-sitter-hl-face:variable fontified t) 20 21 (fontified t)) . 4365) (undo-tree-id3337 . -20) (undo-tree-id3338 . -3) (undo-tree-id3339 . -3) (undo-tree-id3340 . -3) (undo-tree-id3341 . -3) (undo-tree-id3342 . -3) (undo-tree-id3343 . -3) (undo-tree-id3344 . -3) (undo-tree-id3345 . -3) (undo-tree-id3346 . -3) (undo-tree-id3347 . -3) (undo-tree-id3348 . -3) (undo-tree-id3349 . -3) (undo-tree-id3350 . -3) (undo-tree-id3351 . -3) (undo-tree-id3352 . -3) (undo-tree-id3353 . -3) (undo-tree-id3354 . -3) (undo-tree-id3355 . -3) (undo-tree-id3356 . -3) (undo-tree-id3357 . -3) (undo-tree-id3358 . -3) (undo-tree-id3359 . -3) (undo-tree-id3360 . -4) (undo-tree-id3361 . -3) (undo-tree-id3362 . -5) (undo-tree-id3363 . -4) (undo-tree-id3364 . -6) (undo-tree-id3365 . -5) (undo-tree-id3366 . -6) (undo-tree-id3367 . -6) (undo-tree-id3368 . -6) (undo-tree-id3369 . -6) (undo-tree-id3370 . -7) (undo-tree-id3371 . -6) (undo-tree-id3372 . -8) (undo-tree-id3373 . -7) (undo-tree-id3374 . -9) (undo-tree-id3375 . -8) (undo-tree-id3376 . -10) (undo-tree-id3377 . -9) (undo-tree-id3378 . -10) (undo-tree-id3379 . -10) (undo-tree-id3380 . -10) (undo-tree-id3381 . -10) (undo-tree-id3382 . -10) (undo-tree-id3383 . -10) (undo-tree-id3384 . -10) (undo-tree-id3385 . -10) (undo-tree-id3386 . -11) (undo-tree-id3387 . -10) (undo-tree-id3388 . -12) (undo-tree-id3389 . -11) (undo-tree-id3390 . -13) (undo-tree-id3391 . -12) (undo-tree-id3392 . -14) (undo-tree-id3393 . -13) (undo-tree-id3394 . -15) (undo-tree-id3395 . -14) (undo-tree-id3396 . -16) (undo-tree-id3397 . -15) (undo-tree-id3398 . -17) (undo-tree-id3399 . -16) (undo-tree-id3400 . -18) (undo-tree-id3401 . -17) (undo-tree-id3402 . -19) (undo-tree-id3403 . -18) (undo-tree-id3404 . -20) (undo-tree-id3405 . -19) (undo-tree-id3406 . -21) (undo-tree-id3407 . -20) (undo-tree-id3408 . -21) (undo-tree-id3409 . -21) (undo-tree-id3410 . -21) (undo-tree-id3411 . -21) (undo-tree-id3412 . -21) (undo-tree-id3413 . -21) (undo-tree-id3414 . -21) (undo-tree-id3415 . -21) (undo-tree-id3416 . -20) (undo-tree-id3417 . -21) (undo-tree-id3418 . -11) (undo-tree-id3419 . -20) (undo-tree-id3420 . -10) (undo-tree-id3421 . -11) (undo-tree-id3422 . -3) (undo-tree-id3423 . -10) (undo-tree-id3424 . -1) (undo-tree-id3425 . -3) (undo-tree-id3426 . -1) (undo-tree-id3427 . -3) (undo-tree-id3428 . -21)) nil (26286 12258 380079 164000) 0 nil])
([nil nil ((4392 . 4395) (4390 . 4392) (4376 . 4390) (4355 . 4376)) nil (26286 12258 377450 139000) 0 nil])
([nil nil ((4364 . 4372) (#("A" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -4364) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (#("V" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -4365) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) 4366 (4364 . 4366) (#("(VAI.sortBy (comparing fst))" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 1 4 (face tree-sitter-hl-face:type.builtin fontified t) 4 5 (fontified t) 5 11 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 11 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified t) 13 22 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 22 23 (fontified t) 23 26 (face tree-sitter-hl-face:variable fontified t) 26 27 (face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified t) 27 28 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 4364) (undo-tree-id3466 . -27) (undo-tree-id3467 . -4) (undo-tree-id3468 . -4) (undo-tree-id3469 . -25) (undo-tree-id3470 . -23) (undo-tree-id3471 . -25) (undo-tree-id3472 . -13) (undo-tree-id3473 . -23) (undo-tree-id3474 . -12) (undo-tree-id3475 . -13) (undo-tree-id3476 . -5) (undo-tree-id3477 . -12) (undo-tree-id3478 . -4) (undo-tree-id3479 . -5) (undo-tree-id3480 . -4) (undo-tree-id3481 . -4) (undo-tree-id3482 . -28) (undo-tree-id3483 . -28) 4368 (t 26286 12258 383186 301000)) nil (26286 12274 559185 502000) 0 nil])
([nil nil ((4348 . 4356) (t 26286 12274 562424 247000)) nil (26286 12319 714220 129000) 0 nil])
([nil nil ((#("U.modify VAI.sort . " 0 1 (face tree-sitter-hl-face:type.builtin fontified t) 1 2 (fontified t) 2 8 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 8 9 (fontified t) 9 12 (face tree-sitter-hl-face:type.builtin fontified t) 12 13 (fontified t) 13 17 (face tree-sitter-hl-face:variable fontified t) 17 18 (fontified t) 18 19 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 19 20 (fontified t)) . 4363) (undo-tree-id3539 . -19) (undo-tree-id3540 . -9) (undo-tree-id3541 . -9) (undo-tree-id3542 . -9) (undo-tree-id3543 . -9) (undo-tree-id3544 . -16) (undo-tree-id3545 . -1) (undo-tree-id3546 . -2) (undo-tree-id3547 . -1) (undo-tree-id3548 . -9) (undo-tree-id3549 . -2) (undo-tree-id3550 . -2) (undo-tree-id3551 . -9) (undo-tree-id3552 . -1) (undo-tree-id3553 . -2) (undo-tree-id3554 . -1) (undo-tree-id3555 . -9) (undo-tree-id3556 . -20) (t 26286 12319 718088 284000)) nil (26286 12355 78331 437000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . 4372) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . -4362) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) 4363) nil (26286 12355 78324 653000) 0 nil])
([nil nil ((#("dbgId " 0 5 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 5 6 (fontified t)) . 4348) (undo-tree-id3502 . -5) (undo-tree-id3503 . -6) (undo-tree-id3504 . -6) (undo-tree-id3505 . -6)) nil (26286 12355 77568 796000) 0 nil])
([nil nil ((#(". " 0 1 (face haskell-operator-face syntax-table (1) fontified t) 1 2 (fontified t)) . 4348) (undo-tree-id3484 . -1) (undo-tree-id3485 . -2) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -2) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -2) (undo-tree-id3497 . -1) (undo-tree-id3498 . -2) (undo-tree-id3499 . -2) (undo-tree-id3500 . -2) (undo-tree-id3501 . -2)) nil (26286 12383 288287 410000) 0 nil])
([nil nil ((4600 . 4605) (4595 . 4600) (t 26286 12383 810030 656000)) nil (26286 12394 237125 713000) 0 nil] [nil nil ((4595 . 4605) (t 26286 12355 81608 265000)) ((#("reverse $ " 0 7 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 7 8 (fontified t) 8 9 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 9 10 (fontified t)) . 4595) (undo-tree-id3557 . -8) (undo-tree-id3558 . -10) (undo-tree-id3559 . -9) (undo-tree-id3560 . -9) (undo-tree-id3561 . -10) (undo-tree-id3562 . -9) (undo-tree-id3563 . -9) (undo-tree-id3564 . -9) (undo-tree-id3565 . -9) (undo-tree-id3566 . -9) (undo-tree-id3567 . -9) (undo-tree-id3568 . -9) (undo-tree-id3569 . -8) (undo-tree-id3570 . -9) (undo-tree-id3571 . -8) (undo-tree-id3572 . -8) (undo-tree-id3573 . -8) (undo-tree-id3574 . -8) (t 26286 12358 735661 991000)) (26286 12358 731393 198000) 0 nil])
([nil nil ((4603 . 4611) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4603) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4604) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4605) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) (#("z" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4606) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) (undo-tree-id3665 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4607) (undo-tree-id3666 . -1) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (undo-tree-id3670 . -1) (undo-tree-id3671 . -1) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4608) (undo-tree-id3677 . -1) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (undo-tree-id3682 . -1) (undo-tree-id3683 . -1) (#(" " 0 1 (fontified t)) . -4609) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) 4610 (4603 . 4610) (t 26286 12394 241184 15000)) nil (26286 12398 745035 624000) 0 nil])
nil
([nil nil ((#("reverse " 0 7 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 7 8 (fontified t)) . 4595) (undo-tree-id3691 . -7) (undo-tree-id3692 . -8) (undo-tree-id3693 . -8) (undo-tree-id3694 . -8) (undo-tree-id3695 . -8) (undo-tree-id3696 . -8) (undo-tree-id3697 . -8) (undo-tree-id3698 . -8) (undo-tree-id3699 . -8) (undo-tree-id3700 . -8) (undo-tree-id3701 . -8) (undo-tree-id3702 . -8) (undo-tree-id3703 . -8) (undo-tree-id3704 . -8) (undo-tree-id3705 . -8) (undo-tree-id3706 . -8) (undo-tree-id3707 . -8) (undo-tree-id3708 . -8) (undo-tree-id3709 . -8) (undo-tree-id3710 . -8) (undo-tree-id3711 . -8) (undo-tree-id3712 . -8) (undo-tree-id3713 . -8) (undo-tree-id3714 . -8) (undo-tree-id3715 . -8) (undo-tree-id3716 . -8) (undo-tree-id3717 . -8) (undo-tree-id3718 . -8) (undo-tree-id3719 . -8) (undo-tree-id3720 . -8) (undo-tree-id3721 . -8) (undo-tree-id3722 . -8) (undo-tree-id3723 . -8) (undo-tree-id3724 . -8) (undo-tree-id3725 . -8) (undo-tree-id3726 . -8) (t 26286 12398 748250 278000)) nil (26286 12414 954532 583000) 0 nil])
([nil nil ((#(". " 0 1 (face haskell-operator-face syntax-table (1) fontified t) 1 2 (fontified t)) . 4595) (undo-tree-id3687 . -1) (undo-tree-id3688 . -2) (undo-tree-id3689 . -2) (undo-tree-id3690 . -2)) nil (26286 12414 954353 295000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3976 . 3977) (#("
" 0 1 (fontified nil)) . -4010) (3974 . 4011) 3939 (t 26286 12414 957488 578000)) nil (26286 12454 830501 827000) 0 nil])
([nil nil ((4020 . 4021) (4000 . 4020) (3979 . 4000) (#("xr < yl || yr < xl = calc xs ys" 0 2 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 2 3 (fontified t) 3 4 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 4 5 (fontified t) 5 7 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 7 8 (fontified t) 8 9 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 9 10 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 10 11 (fontified t) 11 13 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 13 14 (fontified t) 14 15 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 15 16 (fontified t) 16 18 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 18 19 (fontified t) 19 20 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 20 21 (fontified t) 21 25 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 25 26 (fontified t) 26 28 (face tree-sitter-hl-face:variable fontified t) 28 29 (fontified t) 29 31 (face tree-sitter-hl-face:variable fontified t)) . 3979) (undo-tree-id3741 . -30) (undo-tree-id3742 . -31) (undo-tree-id3743 . -31) (undo-tree-id3744 . -31) (undo-tree-id3745 . -31)) nil (26286 12454 830501 309000) 0 nil])
([nil nil ((#("calc " 0 4 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 4 5 (fontified t)) . 4002) (undo-tree-id3727 . -4) (undo-tree-id3728 . -1) (undo-tree-id3729 . -2) (undo-tree-id3730 . -1) (undo-tree-id3731 . -3) (undo-tree-id3732 . -2) (undo-tree-id3733 . -4) (undo-tree-id3734 . -3) (undo-tree-id3735 . -5) (undo-tree-id3736 . -4) (undo-tree-id3737 . -5) (undo-tree-id3738 . -5) (undo-tree-id3739 . -5) (undo-tree-id3740 . -5)) nil (26286 12454 830499 362000) 0 nil])
([nil nil ((4016 . 4027)) nil (26286 12454 830490 534000) 0 nil])
([nil nil ((3903 . 3907)) nil (26286 12454 830490 316000) 0 nil])
([nil nil ((3925 . 3929)) nil (26286 12454 830490 3000) 0 nil])
([nil nil ((4035 . 4038)) nil (26286 12454 830485 818000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -4094) (4038 . 4095) 4037 (t 26286 12454 837074 838000)) nil (26286 12466 758518 474000) 0 nil])
([nil nil ((4043 . 4044) (#("x" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . 4043) (undo-tree-id3757 . -1)) nil (26286 12466 758518 114000) 0 nil])
([nil nil ((4049 . 4050) (#("y" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . 4049) (undo-tree-id3756 . -1)) nil (26286 12466 758517 581000) 0 nil])
([nil nil ((4055 . 4056) (#("x" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . 4055) (undo-tree-id3754 . -1) (4055 . 4056) (#("x" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . 4055) (undo-tree-id3755 . -1)) nil (26286 12466 758516 932000) 0 nil])
([nil nil ((4061 . 4062) (#("y" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . 4061) (undo-tree-id3753 . -1)) nil (26286 12466 758515 752000) 0 nil])
([nil nil ((4067 . 4068) (#("x" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . 4067) (undo-tree-id3752 . -1)) nil (26286 12466 758515 96000) 0 nil])
([nil nil ((4072 . 4073) (#("x" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . 4072) (undo-tree-id3751 . -1)) nil (26286 12466 758514 265000) 0 nil])
([nil nil ((4088 . 4094) (#("xs yys" 0 2 (face tree-sitter-hl-face:variable fontified t) 2 3 (fontified t) 3 6 (face tree-sitter-hl-face:variable fontified t)) . 4088) (undo-tree-id3746 . -5) (undo-tree-id3747 . -6) (undo-tree-id3748 . -6) (undo-tree-id3749 . -6) (undo-tree-id3750 . -6)) nil (26286 12466 758511 889000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3984 . 3985) (#("
" 0 1 (fontified nil)) . -4018) (3982 . 4019) 3947 (t 26286 12466 762250 138000)) nil (26286 12507 93830 998000) 0 nil])
([nil nil ((3959 . 3972) (#("|| yr < xl = calc xs ys" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 1 2 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 2 3 (fontified t) 3 5 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 5 6 (fontified t) 6 7 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 7 8 (fontified t) 8 10 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 10 11 (fontified t) 11 12 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 12 13 (fontified t) 13 17 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 17 18 (fontified t) 18 20 (face tree-sitter-hl-face:variable fontified t) 20 21 (fontified t) 21 23 (face tree-sitter-hl-face:variable fontified t)) . 3959) (undo-tree-id3771 . -22) (undo-tree-id3772 . -23) (undo-tree-id3773 . -23) (undo-tree-id3774 . -23) (undo-tree-id3775 . -23)) nil (26286 12507 93830 473000) 0 nil])
([nil nil ((#("xr " 0 2 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 2 3 (fontified t)) . 3977) (undo-tree-id3769 . -2) (undo-tree-id3770 . -3)) nil (26286 12507 93828 906000) 0 nil])
([nil nil ((#("< " 0 1 (face haskell-operator-face syntax-table (1) fontified t) 1 2 (fontified t)) . 3977) (undo-tree-id3767 . -1) (undo-tree-id3768 . -2)) nil (26286 12507 93828 178000) 0 nil])
([nil nil ((#("yl " 0 2 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 2 3 (fontified t)) . 3977) (undo-tree-id3765 . -2) (undo-tree-id3766 . -3)) nil (26286 12507 93827 268000) 0 nil])
([nil nil ((#("|| " 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 1 2 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 2 3 (fontified t)) . 3977) (undo-tree-id3763 . -2) (undo-tree-id3764 . -3)) nil (26286 12507 93825 505000) 0 nil])
([nil nil ((3992 . 3998) (#("xs ys" 0 2 (face tree-sitter-hl-face:variable fontified t) 2 3 (fontified t) 3 5 (face tree-sitter-hl-face:variable fontified t)) . 3992) (undo-tree-id3758 . -4) (undo-tree-id3759 . -5) (undo-tree-id3760 . -5) (undo-tree-id3761 . -5) (undo-tree-id3762 . -5)) nil (26286 12507 93823 203000) 0 nil])
([nil nil ((3993 . 3994) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 3993) (undo-tree-id3778 . -1) (t 26286 12507 98843 58000)) nil (26286 12533 77644 83000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 3993) (undo-tree-id3776 . -1) (undo-tree-id3777 . -1)) nil (26286 12533 77642 345000) 0 nil])
([nil nil ((3993 . 3994)) nil (26286 12533 77631 875000) 0 nil])
([nil nil ((#("dbgId " 0 5 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 5 6 (fontified t)) . 4731) (undo-tree-id3781 . -5) (undo-tree-id3782 . -6) (t 26286 12533 81224 959000)) nil (26286 12548 525286 917000) 0 nil])
([nil nil ((#("$ " 0 1 (face haskell-operator-face syntax-table (1) fontified t) 1 2 (fontified t)) . 4731) (undo-tree-id3779 . -1) (undo-tree-id3780 . -2)) nil (26286 12548 525283 491000) 0 nil])
([nil nil ((4026 . 4032) (t 26286 12548 528452 0)) nil (26286 12646 558744 433000) 0 nil])
([nil nil ((4088 . 4094)) ((#("dbgId " 0 5 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 5 6 (fontified t)) . 4088)) (26286 12647 442418 728000) 0 nil])
([nil nil ((4193 . 4199)) ((#("dbgId " 0 5 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 5 6 (fontified t)) . 4193) (undo-tree-id3811 . -5) (undo-tree-id3812 . -5) (undo-tree-id3813 . -5) (undo-tree-id3814 . -5)) (26286 12648 698469 805000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4950 . 4951) (#("
" 0 1 (fontified nil)) . -4970) (4931 . 4971) 4921 (t 26286 12649 179931 233000)) nil (26286 12670 592999 952000) 0 nil] [nil nil ((5048 . 5056)) ((#("dbgId $ " 0 5 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 5 6 (fontified t) 6 7 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 7 8 (fontified t)) . 5048)) (26286 12648 544068 94000) 0 nil] [nil nil ((5049 . 5052) (#("v" 0 1 (face (2 5047 nil nil nil nil 2 nil nil (5026 5047) nil) fontified t)) . -5049) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) 5050 (5042 . 5050) (t 26286 12597 450171 11000)) ((#("note (\"v" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 6 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified nil) 6 7 (syntax-table (15) fontified nil) 7 8 (face (2 5047 nil nil nil nil 2 nil nil (5026 5047) nil) fontified nil)) . 5042) (undo-tree-id3786 . -7) (undo-tree-id3787 . -8) (undo-tree-id3788 . -8) (undo-tree-id3789 . -7) (undo-tree-id3790 . -7) (undo-tree-id3791 . -7) (5049 . 5050) (#("cal" 0 1 (face (2 5047 nil nil nil nil 2 nil nil (5026 5047) nil) fontified t) 1 3 (fontified t)) . 5049) (undo-tree-id3792 . -2) (undo-tree-id3793 . -2) (undo-tree-id3794 . -2) (undo-tree-id3795 . -3) (undo-tree-id3796 . -2)) (26286 12619 325183 101000) 0 nil])
([nil nil ((apply -3 4893 4935 undo--wrap-and-run-primitive-undo 4893 4935 ((4912 . 4915)))) nil (26286 12670 592999 571000) 0 nil])
([nil nil ((5075 . 5083)) ((#("dbgId $ " 0 5 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 5 6 (fontified t) 6 7 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 7 8 (fontified t)) . 5075) (undo-tree-id3815 . -7) (undo-tree-id3816 . -7) (undo-tree-id3817 . -7) (undo-tree-id3818 . -7) (undo-tree-id3819 . -7) (undo-tree-id3820 . -7) (undo-tree-id3821 . -7) (undo-tree-id3822 . -7) (undo-tree-id3823 . -7) (undo-tree-id3824 . -7) (undo-tree-id3825 . -7) (undo-tree-id3826 . -7) (t 26286 12628 86621 252000)) (26286 12647 904653 437000) 0 nil])
nil
([nil nil ((4960 . 4961) (#("1" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4960) (undo-tree-id3828 . -1)) nil (26286 12670 592999 143000) 0 nil])
nil
([nil nil ((4964 . 4965) (#("2" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4964) (undo-tree-id3827 . -1)) nil (26286 12670 592996 627000) 0 nil])
([nil nil ((4322 . 4323) (#("1" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4322) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (t 26286 12670 609246 143000)) nil (26286 12711 993224 664000) 0 nil])
([nil nil ((4340 . 4341) (4339 . 4340) (4321 . 4339) (4319 . 4321) (4318 . 4319) (#("
" 0 1 (fontified t)) . -4318) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) 4319 (#("    t,)" 0 2 (fontified t) 2 3 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 3 4 (fontified t) 4 5 (face tree-sitter-hl-face:variable fontified t) 5 6 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 6 7 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . -4319) (undo-tree-id3844 . -7) (undo-tree-id3845 . -4) (undo-tree-id3846 . -5) (undo-tree-id3847 . -4) (undo-tree-id3848 . -6) (undo-tree-id3849 . -5) (undo-tree-id3850 . -7) (undo-tree-id3851 . -6) (undo-tree-id3852 . -7) 4326 (4324 . 4326) (4323 . 4324) (4318 . 4323) (4317 . 4318) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4317) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) 4318 (4317 . 4318) (#("ints10'" 0 4 (face tree-sitter-hl-face:variable fontified t) 4 5 (face tree-sitter-hl-face:variable fontified t) 5 6 (face tree-sitter-hl-face:variable fontified t) 6 7 (face tree-sitter-hl-face:variable fontified t)) . 4317) (undo-tree-id3856 . -6) (undo-tree-id3857 . -5) (undo-tree-id3858 . -5) (undo-tree-id3859 . -5) (undo-tree-id3860 . -5) (undo-tree-id3861 . -5) (undo-tree-id3862 . -5) (undo-tree-id3863 . -5) (undo-tree-id3864 . -5) (undo-tree-id3865 . -5) (undo-tree-id3866 . -5) (undo-tree-id3867 . -5) (undo-tree-id3868 . -5) (undo-tree-id3869 . -5) (undo-tree-id3870 . -5) (undo-tree-id3871 . -5) (undo-tree-id3872 . -7) (undo-tree-id3873 . -7) (undo-tree-id3874 . -7) (undo-tree-id3875 . -7) (t 26286 12712 20747 55000)) nil (26286 12722 80424 752000) 0 nil])
([nil nil ((#(" - 1 -- REMARK:" 0 1 (fontified t) 1 2 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 2 3 (fontified t) 3 4 (syntax-table (2) face tree-sitter-hl-face:number fontified t) 4 5 (fontified t) 5 6 (face tree-sitter-hl-face:comment fontified t) 6 8 (face tree-sitter-hl-face:comment fontified t) 8 15 (face (success bold tree-sitter-hl-face:comment) fontified t)) . 4894) (undo-tree-id3876 . -14) (undo-tree-id3877 . -14) (undo-tree-id3878 . -14) (undo-tree-id3879 . -8) (undo-tree-id3880 . -14) (undo-tree-id3881 . -5) (undo-tree-id3882 . -8) (undo-tree-id3883 . -3) (undo-tree-id3884 . -5) (undo-tree-id3885 . -1) (undo-tree-id3886 . -3) (undo-tree-id3887 . -1) (undo-tree-id3888 . -15) (undo-tree-id3889 . -15) (t 26286 12722 102869 272000)) nil (26286 12745 722123 572000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4861 . 4862) (nil fontified nil 4847 . 4862) (4847 . 4862) 4846) nil (26286 12745 722112 268000) 0 nil])
([nil nil ((#("dbgId " 0 5 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 5 6 (fontified t)) . 4654) (undo-tree-id3895 . -5) (undo-tree-id3896 . -6) (t 26286 12745 736157 482000)) nil (26286 12788 309271 286000) 0 nil])
([nil nil ((#(". " 0 1 (face haskell-operator-face syntax-table (1) fontified t) 1 2 (fontified t)) . 4654) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) (undo-tree-id3892 . -2) (undo-tree-id3893 . -1) (undo-tree-id3894 . -2)) nil (26286 12788 309267 950000) 0 nil])
([nil nil ((4123 . 4139) 4137 (t 26286 12788 321682 623000)) nil (26286 12851 54672 202000) 0 nil])
([nil nil ((4127 . 4137) (#("y" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -4127) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (undo-tree-id3900 . -1) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) (undo-tree-id3903 . -1) (undo-tree-id3904 . -1) (undo-tree-id3905 . -1) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) (undo-tree-id3909 . -1) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) (undo-tree-id3915 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -4128) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (#(" " 0 1 (fontified t)) . -4129) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) (undo-tree-id3941 . -1) (#("<" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . -4130) (undo-tree-id3942 . -1) (undo-tree-id3943 . -1) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . -4131) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) 4132 (4127 . 4132) (#("otherwise =" 0 9 (face tree-sitter-hl-face:variable fontified t) 9 10 (fontified t) 10 11 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . 4127) (undo-tree-id3952 . -10) (undo-tree-id3953 . -11) (undo-tree-id3954 . -11) (undo-tree-id3955 . -11) (undo-tree-id3956 . -11)) nil (26286 12851 54670 691000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4141 . 4142) (#("
" 0 1 (fontified nil)) . -4222) (4137 . 4223) 4136) nil (26286 12851 54651 60000) 0 nil])
([nil nil ((4220 . 4221)) nil (26286 12851 54648 173000) 0 nil])
([nil nil ((4319 . 4326) (#("xs ys" 0 2 (face tree-sitter-hl-face:variable fontified t) 2 3 (fontified t) 3 5 (face tree-sitter-hl-face:variable fontified t)) . 4319) (undo-tree-id3957 . -4) (undo-tree-id3958 . -4) (undo-tree-id3959 . -5) (undo-tree-id3960 . -4) (undo-tree-id3961 . -3) (undo-tree-id3962 . -3) (undo-tree-id3963 . -5) (undo-tree-id3964 . -5) (undo-tree-id3965 . -5) (undo-tree-id3966 . -5) (t 26286 12851 93469 223000)) nil (26286 12875 745197 698000) 0 nil])
([nil nil ((4321 . 4322) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4321) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (t 26286 12875 784782 393000)) nil (26286 12879 960159 29000) 0 nil])
([nil nil ((apply -8 4064 4167 undo--wrap-and-run-primitive-undo 4064 4167 ((4098 . 4099) nil (4097 . 4098) nil (#("\"" 0 1 (fontified t)) . -4097) (#<marker at 4081 in Main.hs<g>> . -1) (#<marker at 4081 in Main.hs<g>> . -1) (#<marker in no buffer> . -1) 4098 nil (4097 . 4098) nil (4096 . 4097) nil (4095 . 4096) nil (4094 . 4095) nil (4093 . 4094) nil (4092 . 4093) nil (4091 . 4092))) (4032 . 4034) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -4032) (undo-tree-id3976 . -1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) 4033 (4032 . 4033) (4026 . 4032) (#("dbgId" 0 5 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . 4083) (undo-tree-id3979 . -4) (undo-tree-id3980 . -4) (undo-tree-id3981 . -4) (undo-tree-id3982 . -4) (undo-tree-id3983 . -4) (undo-tree-id3984 . -4) (undo-tree-id3985 . -4) (undo-tree-id3986 . -5) (undo-tree-id3987 . -5) (undo-tree-id3988 . -5) (#("dbgId" 0 5 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . 4026) 4092 (t 26286 12879 987835 900000)) nil (26286 12918 743005 433000) 0 nil])
([nil nil ((4097 . 4098) (#("A" 0 1 (face tree-sitter-hl-face:string fontified t)) . 4097) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (undo-tree-id3975 . -1)) nil (26286 12918 743000 817000) 0 nil])
([nil nil ((4097 . 4098) (#("G" 0 1 (face tree-sitter-hl-face:string fontified t)) . 4097) (undo-tree-id3970 . -1)) nil (26286 12918 742996 528000) 0 nil])
([nil nil ((4031 . 4032) (t 26286 12918 747331 947000)) nil (26286 12942 174019 274000) 0 nil])
([nil nil ((4051 . 4052) (4048 . 4051) (4047 . 4048) (4046 . 4047) (#("," 0 1 (face tree-sitter-hl-face:punctuation.delimiter fontified t)) . -4046) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) 4047 (4046 . 4047) (4044 . 4046) (4043 . 4044) (4040 . 4043) (4039 . 4040) (4036 . 4039) (4035 . 4036)) nil (26286 12942 174018 699000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4134 . 4135) (nil fontified nil 4114 . 4135) (4114 . 4135)) nil (26286 12942 174017 69000) 0 nil])
([nil nil ((#("\"r\"" 0 1 (face tree-sitter-hl-face:string fontified t) 1 2 (face tree-sitter-hl-face:string fontified t) 2 3 (face tree-sitter-hl-face:string fontified t)) . 4135) (undo-tree-id3990 . -2) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -3)) nil (26286 12942 174016 347000) 0 nil])
([nil nil ((4116 . 4117) (#("A" 0 1 (face tree-sitter-hl-face:string fontified t)) . 4116) (undo-tree-id3989 . -1)) nil (26286 12942 174009 130000) 0 nil])
([nil nil ((4086 . 4087) (#("x" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . 4086) (undo-tree-id4003 . -1) (t 26286 12942 179634 23000)) nil (26286 12968 512474 531000) 0 nil])
([nil nil ((#("note (\"A\", xl, xr, yl, yr)" 0 4 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 6 7 (face tree-sitter-hl-face:string fontified t) 7 9 (face tree-sitter-hl-face:string fontified t) 9 10 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 10 11 (fontified t) 11 13 (face tree-sitter-hl-face:variable fontified t) 13 14 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 14 15 (fontified t) 15 17 (face tree-sitter-hl-face:variable fontified t) 17 18 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 18 19 (fontified t) 19 21 (face tree-sitter-hl-face:variable fontified t) 21 22 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 22 23 (fontified t) 23 25 (face tree-sitter-hl-face:variable fontified t) 25 26 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 4026) (undo-tree-id4021 . -25) (undo-tree-id4022 . -25) (undo-tree-id4023 . -26) (undo-tree-id4024 . -5) (undo-tree-id4025 . -25) (undo-tree-id4026 . -26) (t 26286 12968 516975 408000)) nil (26286 12973 894151 906000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4026) (undo-tree-id4017 . 1) (undo-tree-id4018 . 1) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1)) nil (26286 12973 894149 918000) 0 nil])
([nil nil ((#("note (\"B\", xl, xr, yl, yr)" 0 4 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 6 7 (face tree-sitter-hl-face:string fontified t) 7 8 (face tree-sitter-hl-face:string fontified t) 8 9 (face tree-sitter-hl-face:string fontified t) 9 10 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 10 11 (fontified t) 11 13 (face tree-sitter-hl-face:variable fontified t) 13 14 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 14 15 (fontified t) 15 17 (face tree-sitter-hl-face:variable fontified t) 17 18 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 18 19 (fontified t) 19 21 (face tree-sitter-hl-face:variable fontified t) 21 22 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 22 23 (fontified t) 23 25 (face tree-sitter-hl-face:variable fontified t) 25 26 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) rear-nonsticky t fontified t)) . 4082) (undo-tree-id4007 . -5) (undo-tree-id4008 . -25) (undo-tree-id4009 . -26) (undo-tree-id4010 . -26) (undo-tree-id4011 . -26) (undo-tree-id4012 . -5) (undo-tree-id4013 . -5) (undo-tree-id4014 . -5) (undo-tree-id4015 . -5) (undo-tree-id4016 . -26)) nil (26286 12973 894148 390000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4082) (undo-tree-id4004 . 1) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1)) nil (26286 12973 894144 268000) 0 nil])
([nil nil ((#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4311) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (t 26286 12973 899045 405000)) nil (26286 12996 821892 712000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4037) (#(" " 0 1 (fontified t)) . 4092) (#(" " 0 1 (fontified t)) . 4124) (4126 . 4128) (4157 . 4159) (4172 . 4174) 4211 (4232 . 4234) (4251 . 4252) (4259 . 4260) (4274 . 4276) 4311 (5011 . 5014) (5053 . 5055) (#("in" 0 2 (face tree-sitter-hl-face:keyword fontified t)) . 5053) 4992 (t 26286 12996 825344 425000)) nil (26286 13006 510700 618000) 0 nil])
([nil nil ((#("dbgId " 0 5 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 5 6 (fontified t)) . 4291) (undo-tree-id4031 . -5) (undo-tree-id4032 . -5) (undo-tree-id4033 . -5) (undo-tree-id4034 . -5) (undo-tree-id4035 . -5) (undo-tree-id4036 . -5) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -6) (t 26286 13006 514471 205000)) nil (26286 13010 61083 388000) 0 nil])
([nil nil ((#("dbgId " 0 5 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 5 6 (fontified t)) . 4183) (undo-tree-id4029 . -5) (undo-tree-id4030 . -6)) nil (26286 13010 60932 3000) 0 nil])
([nil current ((4954 . 4971) (4941 . 4954) (#("r" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -4941) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (#("e" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -4942) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (#("v" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -4943) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (#("e" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -4944) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) (undo-tree-id4082 . -1) 4945 (4941 . 4945) (t 26286 13010 64517 715000)) nil (26286 13029 654054 988000) 0 nil])
nil
