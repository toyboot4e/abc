(undo-tree-save-format-version . 1)
"2380eebda354ce8f2ff94f4cf1cc8e703640f878"
[nil nil nil nil (26286 8273 615024 430000) 0 nil]
([nil nil ((3801 . 3802) (t 26286 7112 637917 368000)) nil (26286 8273 615023 537000) 0 nil])
([nil nil ((3802 . 5029) (apply tempel--disable) (#("monoidAction" 0 12 (face tree-sitter-hl-face:variable fontified nil)) . -3802) (undo-tree-id0 . -6) (undo-tree-id1 . -1) (undo-tree-id2 . -2) (undo-tree-id3 . -1) (undo-tree-id4 . -3) (undo-tree-id5 . -2) (undo-tree-id6 . -4) (undo-tree-id7 . -3) (undo-tree-id8 . -5) (undo-tree-id9 . -4) (undo-tree-id10 . -6) (undo-tree-id11 . -5) (undo-tree-id12 . -6) (3808 . 3814) (3802 . 3808) (3801 . 3802)) nil (26286 8273 615021 972000) 0 nil])
([nil nil ((5241 . 5242) 5028) nil (26286 8273 614990 796000) 0 nil])
([nil nil ((3819 . 3820) (3807 . 3819) (#("I" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -3807) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 3808 (3807 . 3808) (#("Add" 0 3 (face tree-sitter-hl-face:comment fontified t)) . 3807) (undo-tree-id16 . -3) (undo-tree-id17 . -3) (undo-tree-id18 . -2) (t 26286 8273 615475 940000)) nil (26286 8280 171840 246000) 0 nil])
([nil nil ((4029 . 4030) (4026 . 4029) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t syntax-table (2))) . 4026) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (t 26286 8280 173575 147000)) nil (26286 8288 545843 215000) 0 nil])
([nil nil ((3967 . 3969) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3967) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("2" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3968) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 3969 (3964 . 3969) (3949 . 3964) (3946 . 3949) (#(" " 0 1 (fontified t)) . -3946) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) 3947 (#("= Op (x1 + x2)" 0 1 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 1 2 (fontified t) 2 4 (face tree-sitter-hl-face:constructor fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 6 8 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 8 9 (fontified t) 9 10 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 10 11 (fontified t) 11 13 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 13 14 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 3947) (undo-tree-id60 . -13) (undo-tree-id61 . -13) (undo-tree-id62 . -11) (undo-tree-id63 . -13) (undo-tree-id64 . -9) (undo-tree-id65 . -11) (undo-tree-id66 . -6) (undo-tree-id67 . -9) (undo-tree-id68 . -5) (undo-tree-id69 . -6) (undo-tree-id70 . -2) (undo-tree-id71 . -5) (undo-tree-id72 . -1) (undo-tree-id73 . -2) (undo-tree-id74 . -1) (undo-tree-id75 . -14) (undo-tree-id76 . -14) (undo-tree-id77 . -14) (undo-tree-id78 . -14) (t 26286 8288 546701 810000)) nil (26286 8304 729986 688000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3973 . 3974) (#("
" 0 1 (fontified nil)) . -3992) (3969 . 3993) 3968) nil (26286 8304 729975 25000) 0 nil])
([nil nil ((3977 . 3978) (#("1" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . 3977) (undo-tree-id23 . -1)) nil (26286 8304 729974 387000) 0 nil])
([nil nil ((3991 . 3992) (#("2" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 3991) (undo-tree-id22 . -1)) nil (26286 8304 729971 850000) 0 nil])
([nil nil ((apply -42 3802 4206 undo--wrap-and-run-primitive-undo 3802 4206 ((4162 . 4165) (4137 . 4140) (4096 . 4099) (4073 . 4076) (4046 . 4049) (4018 . 4021) (3991 . 3994) (3965 . 3968) (3939 . 3942) (3914 . 3917) (3877 . 3880) (3846 . 3849) (3824 . 3827) (3802 . 3805) 4163))) nil (26286 8311 292895 695000) 0 nil])
([nil nil ((4214 . 4220) (#("i" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -4214) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) 4215 (4211 . 4215) (#("w" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -4211) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) 4212 (4211 . 4212) (#("Max" 0 3 (face tree-sitter-hl-face:comment fontified t)) . 4211) (undo-tree-id85 . -2) (undo-tree-id86 . -3) (undo-tree-id87 . -3) (t 26286 8311 294045 922000)) nil (26286 8316 38912 166000) 0 nil])
([nil nil ((apply -3 4777 5105 undo--wrap-and-run-primitive-undo 4777 5105 ((4777 . 4780)))) nil (26286 8318 597844 734000) 0 nil])
([nil nil ((4327 . 4336) (#(" " 0 1 (fontified t)) . -4327) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) 4328 (4319 . 4328) (4316 . 4319) (#(" = Acc (x1 `max` x2)" 0 1 (fontified t) 1 2 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 2 3 (fontified t) 3 6 (face tree-sitter-hl-face:constructor fontified t) 6 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 8 10 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 10 11 (fontified t) 11 12 (font-lock-multiline t face tree-sitter-hl-face:operator fontified t font-lock-fontified t) 12 15 (font-lock-multiline t face (tree-sitter-hl-face:operator tree-sitter-hl-face:variable) fontified t font-lock-fontified t) 15 16 (font-lock-multiline t face tree-sitter-hl-face:operator fontified t font-lock-fontified t) 16 17 (fontified t) 17 19 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 19 20 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 4316) (undo-tree-id96 . -19) (undo-tree-id97 . -19) (undo-tree-id98 . -17) (undo-tree-id99 . -19) (undo-tree-id100 . -15) (undo-tree-id101 . -17) (undo-tree-id102 . -12) (undo-tree-id103 . -15) (undo-tree-id104 . -11) (undo-tree-id105 . -12) (undo-tree-id106 . -8) (undo-tree-id107 . -11) (undo-tree-id108 . -7) (undo-tree-id109 . -8) (undo-tree-id110 . -3) (undo-tree-id111 . -7) (undo-tree-id112 . -1) (undo-tree-id113 . -3) (undo-tree-id114 . -1) (undo-tree-id115 . -20) (undo-tree-id116 . -20) (undo-tree-id117 . -20) (undo-tree-id118 . -20) (t 26286 8318 598156 416000)) nil (26286 8337 743340 242000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4340 . 4341) (#("
" 0 1 (fontified nil)) . -4356) (4336 . 4357) 4335) nil (26286 8337 743332 737000) 0 nil])
([nil nil ((4344 . 4345) (#("1" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . 4344) (undo-tree-id92 . -1)) nil (26286 8337 743332 323000) 0 nil])
([nil nil ((4355 . 4356) (#("2" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4355) (undo-tree-id91 . -1)) nil (26286 8337 743331 108000) 0 nil])
([nil nil ((4375 . 4390) (4361 . 4375) (4356 . 4361) 4355) nil (26286 8337 743330 269000) 0 nil])
([nil nil ((4460 . 4461) (4457 . 4460) (#("minBound" 0 8 (face tree-sitter-hl-face:variable fontified t)) . 4457) (undo-tree-id88 . -7) (undo-tree-id89 . -8) (undo-tree-id90 . -8)) nil (26286 8337 743328 311000) 0 nil])
([nil nil ((5175 . 5176) (t 26286 8337 744446 55000)) nil (26286 8350 751611 86000) 0 nil])
([nil nil ((5205 . 5207) (5184 . 5205) (#("z" 0 1 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type.argument fontified t)) . -5184) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("u" 0 1 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type.argument fontified t)) . -5185) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#("." 0 1 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . -5186) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#("V" 0 1 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t)) . -5187) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) 5188 (5176 . 5188) (#("
" 0 1 (fontified t)) . -5176) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5177) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5178) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5179) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) 5180 (5177 . 5180) (5176 . 5177) (5175 . 5176)) nil (26286 8350 751608 153000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5225) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . -5226) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) 5227 (5220 . 5227) (#("日" 0 1 (face tree-sitter-hl-face:variable.parameter fontified t)) . -5220) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:variable.parameter tree-sitter-hl-face:variable) fontified t)) . -5221) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (#("＝" 0 1 (face tree-sitter-hl-face:variable.parameter syntax-table (1) fontified t)) . -5222) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#("っ" 0 1 (face tree-sitter-hl-face:variable.parameter fontified t)) . -5223) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("っ" 0 1 (face tree-sitter-hl-face:variable.parameter fontified t)) . -5224) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (#("っ" 0 1 (face tree-sitter-hl-face:variable.parameter fontified t)) . -5225) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (#("ｂ" 0 1 (face (tree-sitter-hl-face:variable.parameter tree-sitter-hl-face:variable) fontified t)) . -5226) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (#("　" 0 1 (face tree-sitter-hl-face:variable.parameter fontified t)) . -5227) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) 5228 (5211 . 5228) (5210 . 5211) (5207 . 5210) (t 26286 8350 752642 842000)) nil (26286 8363 314491 77000) 0 nil])
([nil nil ((5239 . 5248) (5236 . 5239) (5235 . 5236) (#("i" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . -5235) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (#("
" 0 1 (fontified t)) . -5236) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) 5237 (5236 . 5237) (5225 . 5236) (t 26286 8363 314832 883000)) nil (26286 8379 309520 123000) 0 nil])
([nil nil ((5248 . 5257) (t 26286 8379 311074 878000)) nil (26286 8393 529424 734000) 0 nil])
([nil nil ((#("A" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -5268) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) 5269 (5259 . 5269) (#(" " 0 1 (fontified t)) . -5259) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) 5260 (5248 . 5260) (#("newSTree " 0 8 (face tree-sitter-hl-face:variable fontified t) 8 9 (fontified t)) . 5248) (undo-tree-id356 . -8) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -2) (undo-tree-id364 . -1) (undo-tree-id365 . -3) (undo-tree-id366 . -2) (undo-tree-id367 . -4) (undo-tree-id368 . -3) (undo-tree-id369 . -5) (undo-tree-id370 . -4) (undo-tree-id371 . -6) (undo-tree-id372 . -5) (undo-tree-id373 . -7) (undo-tree-id374 . -6) (undo-tree-id375 . -8) (undo-tree-id376 . -7) (undo-tree-id377 . -9) (undo-tree-id378 . -8) (undo-tree-id379 . -8) (undo-tree-id380 . -9) (undo-tree-id381 . -8) (undo-tree-id382 . -9) (undo-tree-id383 . -9) (undo-tree-id384 . -9) (undo-tree-id385 . -9)) nil (26286 8393 529422 456000) 0 nil])
([nil nil ((5274 . 5281) (5273 . 5274) (5268 . 5273) (t 26286 8393 530289 990000)) nil (26286 8416 640514 20000) 0 nil])
([nil nil ((5279 . 5281) (#("t" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -5279) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) 5280 (5279 . 5280) (#("ti" 0 2 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . 5279) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -2) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -2) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -2) (undo-tree-id402 . -2) (undo-tree-id403 . -2) (undo-tree-id404 . -2)) nil (26286 8416 640513 218000) 0 nil])
([nil nil ((5263 . 5264)) nil (26286 8416 640506 750000) 0 nil])
([nil nil ((5284 . 5296) (5271 . 5273)) nil (26286 8416 640506 328000) 0 nil])
([nil nil ((5318 . 5321) (5317 . 5318) (5300 . 5317) (#("i" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -5300) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) 5301 (5299 . 5301) (5277 . 5280)) nil (26286 8416 640503 932000) 0 nil])
([nil nil ((5324 . 5344) (5321 . 5324) 5320 (t 26286 8416 643639 660000)) nil (26286 8425 823783 898000) 0 nil])
([nil nil ((5394 . 5396) (5385 . 5394) (5379 . 5385) (#(" " 0 1 (fontified t)) . -5379) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (#("c" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . -5380) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) 5381 (5376 . 5381) (5375 . 5376) (5359 . 5375) (#("." 0 1 (face tree-sitter-hl-face:operator fontified t)) . -5359) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) 5360 (5347 . 5360) (5344 . 5347) 5343 (t 26286 8425 824778 559000)) nil (26286 8449 962061 112000) 0 nil])
([nil nil ((5385 . 5388)) nil (26286 8449 962057 304000) 0 nil])
([nil nil ((5368 . 5369)) nil (26286 8449 962057 136000) 0 nil])
([nil nil ((#("let " 0 3 (face tree-sitter-hl-face:keyword fontified t) 3 4 (fontified t)) . 5347) (undo-tree-id425 . -3) (undo-tree-id426 . -1) (undo-tree-id427 . -2) (undo-tree-id428 . -1) (undo-tree-id429 . -3) (undo-tree-id430 . -2) (undo-tree-id431 . -4) (undo-tree-id432 . -3) (undo-tree-id433 . -4) (undo-tree-id434 . -4)) nil (26286 8449 962056 734000) 0 nil])
([nil nil ((5352 . 5354) (#("=" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . 5352) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1)) nil (26286 8449 962054 62000) 0 nil])
([nil nil ((5399 . 5418) (#(" " 0 1 (fontified t)) . -5399) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (#(" " 0 1 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t)) . -5400) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (#(" " 0 1 (fontified t)) . -5401) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) 5402 (5397 . 5402) 5395) nil (26286 8449 962051 164000) 0 nil])
([nil nil ((5349 . 5352) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5349) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5350) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) 5351 (5347 . 5351) (5352 . 5355) (5347 . 5352) (#("!res <-" 0 1 (face haskell-operator-face syntax-table (1) fontified t) 1 4 (face tree-sitter-hl-face:variable fontified t) 4 5 (fontified t) 5 6 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 6 7 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . 5347) (undo-tree-id462 . -6) (undo-tree-id463 . -5) (undo-tree-id464 . -5) (undo-tree-id465 . -7) (undo-tree-id466 . -7) (t 26286 8449 965143 774000)) nil (26286 8459 703605 220000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5360) (undo-tree-id467 . -1) (undo-tree-id468 . -1)) nil (26286 8461 555862 433000) 0 nil] [nil nil ((#(" " 0 1 (fontified t)) . 5351) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1)) ((5351 . 5352)) (26286 8459 701129 860000) 0 nil])
([nil nil ((#("  reutnr $ U.sum res
" 0 2 (fontified t) 2 8 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 8 9 (fontified t) 9 10 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 10 11 (fontified t) 11 12 (face tree-sitter-hl-face:type.builtin fontified t) 12 13 (fontified t) 13 16 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 16 17 (fontified t) 17 20 (face tree-sitter-hl-face:variable fontified t) 20 21 (fontified t)) . 5403) (undo-tree-id469 . -20) (undo-tree-id470 . -15) (undo-tree-id471 . -15) (undo-tree-id472 . -15) (undo-tree-id473 . -21) 5418 (t 26286 8461 556319 133000)) nil (26286 8462 677928 121000) 0 nil])
nil
([nil nil ((5400 . 5407) (#("--" 0 1 (face tree-sitter-hl-face:comment fontified t) 1 2 (face tree-sitter-hl-face:comment fontified t)) . 5400) (undo-tree-id494 . -1) (undo-tree-id495 . -2) (undo-tree-id496 . -2) (undo-tree-id497 . -2) (undo-tree-id498 . -2) (t 26286 8462 678336 108000)) nil (26286 8476 522719 844000) 0 nil])
([nil nil ((#("let " 0 3 (face tree-sitter-hl-face:keyword fontified t) 3 4 (fontified t)) . 5400) (undo-tree-id484 . -3) (undo-tree-id485 . -1) (undo-tree-id486 . -2) (undo-tree-id487 . -1) (undo-tree-id488 . -3) (undo-tree-id489 . -2) (undo-tree-id490 . -4) (undo-tree-id491 . -3) (undo-tree-id492 . -4) (undo-tree-id493 . -4)) nil (26286 8476 522718 233000) 0 nil])
([nil nil ((5438 . 5439) (5431 . 5438) (5430 . 5431) (5426 . 5430) (5413 . 5426) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5413) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5414) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) 5415 (5403 . 5415)) nil (26286 8476 522713 686000) 0 nil])
([nil nil ((#("    " 0 1 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 1 2 (fontified t) 2 3 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified t) 3 4 (fontified t)) . 5396) (undo-tree-id499 . -4) (undo-tree-id500 . -4) (undo-tree-id501 . -4) (undo-tree-id502 . -4) (undo-tree-id503 . -4) (undo-tree-id504 . -4) (undo-tree-id505 . -4) (undo-tree-id506 . -4) (undo-tree-id507 . -4) (undo-tree-id508 . -4) 5438 (t 26286 8476 524545 587000)) nil (26286 8477 620406 407000) 0 nil])
([nil nil ((5440 . 5451) (#("w" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5440) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) 5441 (5440 . 5441) (5435 . 5440) 5434 (t 26286 8477 621562 185000)) nil (26286 8483 784248 720000) 0 nil])
([nil nil (5406) nil (26286 8483 784243 705000) 0 nil])
([nil nil ((5396 . 5400)) nil (26286 8483 784241 300000) 0 nil])
([nil nil ((5462 . 5475) (5455 . 5462) 5447 (t 26286 8483 785655 441000)) nil (26286 8487 358712 314000) 0 nil])
([nil nil ((5482 . 5487) (5475 . 5482) 5474 (t 26286 8487 359709 514000)) nil (26286 8489 372094 137000) 0 nil])
([nil nil ((5487 . 5489) (t 26286 8489 373739 984000)) nil (26286 8490 442681 904000) 0 nil])
([nil nil ((5515 . 5516) (5497 . 5515) (#(" " 0 1 (fontified t)) . -5497) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) 5498 (5496 . 5498) (5489 . 5496) 5488 (t 26286 8490 443756 173000)) nil (26286 8505 229860 718000) 0 nil])
([nil nil ((#(">" 0 1 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . 5508) (5509 . 5510) 5508 (#(">" 0 1 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . 5507) (t 26286 8505 231979 907000) (5508 . 5509) 5507 (t 26286 8505 231979 907000)) nil (26286 8508 53454 25000) 0 nil])
([nil nil ((5506 . 5507) (5497 . 5498) 5504 (t 26286 8508 55022 618000)) nil (26286 8531 228321 233000) 0 nil])
([nil nil ((5528 . 5529) (5526 . 5528) (5518 . 5526)) nil (26286 8531 228319 97000) 0 nil])
([nil nil (5528) nil (26286 8534 952369 702000) 0 nil])
([nil nil ((5496 . 5505) (t 26286 8531 229373 232000)) nil (26286 8534 952369 464000) 0 nil])
([nil nil ((#("do" 0 2 (face tree-sitter-hl-face:keyword fontified t)) . 5487) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -2)) nil (26286 8534 952368 998000) 0 nil])
([nil nil ((5486 . 5487) (#("         " 0 1 (fontified nil) 1 3 (fontified nil) 3 4 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified nil) 4 5 (fontified nil) 5 6 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified nil) 6 7 (fontified nil) 7 8 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified nil) 8 9 (fontified nil)) . 5486) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -7) (undo-tree-id518 . -8) (undo-tree-id519 . -7) (undo-tree-id520 . -8) (undo-tree-id521 . -8) (undo-tree-id522 . -8) (undo-tree-id523 . -8) (undo-tree-id524 . -8) (undo-tree-id525 . -9) (undo-tree-id526 . -8) (undo-tree-id527 . -9) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (#("
" 0 1 (fontified t)) . -5487) (undo-tree-id535 . -1) 5486) nil (26286 8534 952365 310000) 0 nil])
([nil nil ((3605 . 3641) (t 26286 8534 953429 575000)) nil (26286 8565 162837 422000) 0 nil])
([nil nil ((apply 3 3605 3637 undo--wrap-and-run-primitive-undo 3605 3637 ((#("-- " 0 3 (face tree-sitter-hl-face:comment fontified t)) . -3605)))) nil (26286 8565 162836 867000) 0 nil])
([nil nil ((3617 . 3635) (#("Core.SemigroupAction" 0 4 (face (tree-sitter-hl-face:type.builtin tree-sitter-hl-face:operator) fontified t) 4 5 (face tree-sitter-hl-face:operator fontified t) 5 20 (face (tree-sitter-hl-face:type.builtin tree-sitter-hl-face:operator) fontified t)) . 3617) (undo-tree-id540 . -19) (undo-tree-id541 . -20) (undo-tree-id542 . -20) (undo-tree-id543 . -20) (undo-tree-id544 . -20)) nil (26286 8565 162835 81000) 0 nil])
([nil nil ((5659 . 5680) (5638 . 5659) (5635 . 5638) 5620 (t 26286 8565 164886 661000)) nil (26286 8609 362383 349000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5680) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . 1) (undo-tree-id555 . -1) 5679 (t 26286 8609 364405 52000)) nil (26286 8611 795047 872000) 0 nil])
([nil nil ((5692 . 5695) (#("\"TODO\"" 0 1 (face tree-sitter-hl-face:string fontified t) 1 5 (face (warning bold tree-sitter-hl-face:string) fontified t) 5 6 (face tree-sitter-hl-face:string fontified t)) . 5692) (undo-tree-id545 . -5) (undo-tree-id546 . -5) (undo-tree-id547 . -5) (undo-tree-id548 . -6) (undo-tree-id549 . -6) (undo-tree-id550 . -6) (undo-tree-id551 . -6)) nil (26286 8611 795044 712000) 0 nil])
([nil nil ((apply -4 4372 4431 undo--wrap-and-run-primitive-undo 4372 4431 ((4392 . 4393) nil (4391 . 4392) nil (4390 . 4391) nil (4389 . 4390))) (4365 . 4369) (t 26286 8611 795431 245000)) nil (26286 8630 84603 8000) 0 nil])
([nil nil ((5535 . 5537) (#("1 :: Int" 0 1 (syntax-table (2) face tree-sitter-hl-face:number fontified t) 1 2 (fontified t) 2 3 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 3 4 (syntax-table (1) face tree-sitter-hl-face:operator fontified t) 4 5 (haskell-type t font-lock-multiline t fontified t) 5 8 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t)) . 5535) (undo-tree-id583 . -7) (undo-tree-id584 . -7) (undo-tree-id585 . -8) (undo-tree-id586 . -8) 5534 (t 26286 8630 86629 735000)) nil (26286 8657 433772 720000) 0 nil])
([nil nil ((#("(gb)" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 1 3 (face tree-sitter-hl-face:variable fontified t) 3 4 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 5534) (undo-tree-id560 . 1) (undo-tree-id561 . -3) (undo-tree-id562 . -1) (undo-tree-id563 . -2) (undo-tree-id564 . -2) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -2) (undo-tree-id574 . -1) (undo-tree-id575 . -3) (undo-tree-id576 . -2) (undo-tree-id577 . -2) (undo-tree-id578 . -3) (undo-tree-id579 . -2) (undo-tree-id580 . -2) (undo-tree-id581 . -4) (undo-tree-id582 . -4) 5536) nil (26286 8657 433771 205000) 0 nil])
([nil nil ((5534 . 5538) (#(" .<<. " 0 1 (fontified t) 1 2 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 2 3 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 3 4 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 4 5 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 5 6 (fontified t)) . 5534) (undo-tree-id556 . 6) (undo-tree-id557 . -5) (undo-tree-id558 . -6) (undo-tree-id559 . -6)) nil (26286 8657 433765 248000) 0 nil])
([nil nil ((5542 . 5549)) nil (26286 8657 433756 884000) 0 nil])
([nil nil ((5533 . 5535) (t 26286 8657 436931 21000)) nil (26286 8675 533289 301000) 0 nil])
([nil nil ((5386 . 5396) (5383 . 5386) 5362 (t 26286 8675 535133 225000)) nil (26286 8986 784499 384000) 0 nil])
([nil nil ((nil fontified nil 5391 . 5392) (nil face haskell-operator-face 5391 . 5392) (5391 . 5392) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 5391) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1)) nil (26286 8986 784497 864000) 0 nil])
([nil nil ((5398 . 5411) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5398) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) 5399 (5396 . 5399) (t 26286 8986 786893 992000)) nil (26286 8997 660899 935000) 0 nil])
([nil nil ((5444 . 5445) (5432 . 5444) (5424 . 5432) (#("@" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . -5424) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (#("@" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . -5425) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) 5426 (5419 . 5426) (#("i" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -5419) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (#("f" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -5420) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (#(" " 0 1 (fontified t)) . -5421) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) 5422 (5411 . 5422) (t 26286 8997 663033 164000)) nil (26286 9015 989879 172000) 0 nil])
([nil nil ((5416 . 5418)) nil (26286 9015 990636 324000) 0 nil])
([nil nil ((5448 . 5456) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) font-lock-fontified t fontified t)) . -5448) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) 5449 (5447 . 5449) (5443 . 5446) (#("Bti" 0 3 (face tree-sitter-hl-face:variable font-lock-fontified t fontified t)) . 5443) (undo-tree-id654 . -2) (undo-tree-id655 . -3) (undo-tree-id656 . -3)) nil (26286 9022 415172 129000) 0 nil] [nil nil ((#("Bit" 0 3 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) font-lock-fontified t fontified t)) . 5436) (undo-tree-id593 . -2) (undo-tree-id594 . -1) (undo-tree-id595 . -2) (undo-tree-id596 . -1) (undo-tree-id597 . -3) (undo-tree-id598 . -2) (undo-tree-id599 . -3) (undo-tree-id600 . -3) (undo-tree-id601 . -3)) ((5436 . 5439)) (26286 9015 989866 942000) 0 nil])
([nil nil ((5421 . 5424) (5420 . 5421) (5418 . 5420) (5417 . 5418) (5396 . 5417) (#(">" 0 1 (face haskell-operator-face syntax-table (1) fontified t)) . -5396) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5397) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5398) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5399) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5400) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (#(" " 0 1 (fontified t)) . -5401) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) 5402 (5396 . 5402) (t 26286 9022 416351 455000)) nil (26286 9037 90028 674000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 5486 . 5487) (#("
" 0 1 (fontified nil)) . -5585) (5484 . 5586) 5386 (t 26286 9037 119541 497000)) nil (26286 9044 962704 672000) 0 nil])
([nil nil ((5492 . 5496) (#("bs" 0 1 (face tree-sitter-hl-face:variable fontified t) 1 2 (face tree-sitter-hl-face:variable fontified t)) . 5492) (undo-tree-id756 . -1) (undo-tree-id757 . -2) (undo-tree-id758 . -2)) nil (26286 9044 962704 71000) 0 nil])
([nil nil ((5492 . 5508) (#("cusm = U.map (bool (0 :: Int) 1) $ U.postscanl' (\\isOn x -> isOn `xor` testBit x iBit) False xs" 0 4 (face tree-sitter-hl-face:variable fontified t) 4 5 (fontified t) 5 6 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 6 7 (fontified t) 7 8 (face tree-sitter-hl-face:type.builtin fontified t) 8 9 (fontified t) 9 12 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 12 13 (fontified t) 13 14 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 14 18 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 18 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 20 21 (face tree-sitter-hl-face:number syntax-table (2) fontified t) 21 22 (fontified t) 22 23 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 23 24 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 24 25 (haskell-type t font-lock-multiline t fontified t) 25 28 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 28 29 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 29 30 (fontified t) 30 31 (face tree-sitter-hl-face:number syntax-table (2) fontified t) 31 32 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 32 33 (fontified t) 33 34 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 34 35 (fontified t) 35 36 (face tree-sitter-hl-face:type.builtin fontified t) 36 37 (fontified t) 37 47 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 47 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 49 50 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 50 54 (face tree-sitter-hl-face:variable fontified t) 54 55 (fontified t) 55 56 (face tree-sitter-hl-face:variable fontified t) 56 57 (fontified t) 57 58 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 58 59 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 59 60 (fontified t) 60 64 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 64 65 (fontified t) 65 66 (font-lock-multiline t face tree-sitter-hl-face:operator fontified t font-lock-fontified t) 66 69 (font-lock-multiline t face (tree-sitter-hl-face:operator tree-sitter-hl-face:variable) fontified t font-lock-fontified t) 69 70 (font-lock-multiline t face tree-sitter-hl-face:operator fontified t font-lock-fontified t) 70 71 (fontified t font-lock-fontified t) 71 75 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t font-lock-fontified t) 75 78 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t font-lock-fontified t) 78 79 (fontified t font-lock-fontified t) 79 80 (face tree-sitter-hl-face:variable fontified t font-lock-fontified t) 80 81 (fontified t font-lock-fontified t) 81 85 (face tree-sitter-hl-face:variable fontified t font-lock-fontified t) 85 86 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t font-lock-fontified t) 86 87 (fontified t font-lock-fontified t) 87 92 (face tree-sitter-hl-face:constructor fontified t font-lock-fontified t) 92 93 (fontified t font-lock-fontified t) 93 95 (face tree-sitter-hl-face:variable fontified t font-lock-fontified t)) . 5492) (undo-tree-id740 . 91) (undo-tree-id741 . -94) (undo-tree-id742 . -1) (undo-tree-id743 . -2) (undo-tree-id744 . -1) (undo-tree-id745 . -3) (undo-tree-id746 . -2) (undo-tree-id747 . -4) (undo-tree-id748 . -3) (undo-tree-id749 . -3) (undo-tree-id750 . -4) (undo-tree-id751 . -3) (undo-tree-id752 . -95) (undo-tree-id753 . -95) (undo-tree-id754 . -95) (undo-tree-id755 . -95)) nil (26286 9044 962701 510000) 0 nil])
([nil nil ((#("  fmap U.sum $ U.generateM (n - 1) $ \\il -> do
    Acc !ir <- foldSTree stree (il + 1) (n - 1)
    if ir == -1
      then return 0
      else return $ (bit iBit :: Int) * (n - ir)
" 0 2 (fontified t) 2 6 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 6 7 (fontified t) 7 8 (face tree-sitter-hl-face:type.builtin fontified t) 8 9 (fontified t) 9 12 (face tree-sitter-hl-face:variable fontified t) 12 13 (fontified t) 13 14 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 14 15 (fontified t) 15 16 (face tree-sitter-hl-face:type.builtin fontified t) 16 17 (fontified t) 17 26 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 26 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 28 29 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 29 30 (fontified t) 30 31 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 31 32 (fontified t) 32 33 (face tree-sitter-hl-face:number syntax-table (2) fontified t) 33 34 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 34 35 (fontified t) 35 36 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 36 37 (fontified t) 37 38 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 38 40 (face tree-sitter-hl-face:variable fontified t) 40 41 (fontified t) 41 42 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 42 43 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 43 44 (fontified t) 44 46 (face tree-sitter-hl-face:keyword fontified t) 46 47 (fontified t) 47 49 (fontified t) 49 50 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 50 51 (fontified t) 51 54 (face tree-sitter-hl-face:constructor fontified t) 54 55 (fontified t) 55 56 (face haskell-operator-face syntax-table (1) fontified t) 56 58 (face tree-sitter-hl-face:variable fontified t) 58 59 (fontified t) 59 60 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 60 61 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 61 62 (fontified t) 62 71 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 71 72 (fontified t) 72 77 (face tree-sitter-hl-face:variable fontified t) 77 78 (fontified t) 78 79 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 79 81 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 81 82 (fontified t) 82 83 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 83 84 (fontified t) 84 85 (face tree-sitter-hl-face:number syntax-table (2) fontified t) 85 86 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 86 87 (fontified t) 87 88 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 88 89 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 89 90 (fontified t) 90 91 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 91 92 (fontified t) 92 93 (face tree-sitter-hl-face:number syntax-table (2) fontified t) 93 94 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 94 95 (fontified t) 95 97 (fontified t) 97 98 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 98 99 (fontified t) 99 101 (face tree-sitter-hl-face:keyword fontified t) 101 102 (fontified t) 102 104 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 104 105 (fontified t) 105 106 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 106 107 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 107 108 (fontified t) 108 109 (face tree-sitter-hl-face:number syntax-table (1) fontified t) 109 110 (face tree-sitter-hl-face:number syntax-table (2) fontified t) 110 111 (fontified t) 111 113 (fontified t) 113 114 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 114 115 (fontified t) 115 116 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 116 117 (fontified t) 117 121 (face tree-sitter-hl-face:keyword fontified t) 121 122 (fontified t) 122 128 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 128 129 (fontified t) 129 130 (face tree-sitter-hl-face:number syntax-table (2) fontified t) 130 131 (fontified t) 131 133 (fontified t) 133 134 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 134 135 (fontified t) 135 136 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 136 137 (fontified t) 137 141 (face tree-sitter-hl-face:keyword fontified t) 141 142 (fontified t) 142 148 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 148 149 (fontified t) 149 150 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 150 151 (fontified t) 151 152 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 152 155 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 155 156 (fontified t) 156 160 (face tree-sitter-hl-face:variable fontified t) 160 161 (fontified t) 161 162 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 162 163 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 163 164 (haskell-type t font-lock-multiline t fontified t) 164 167 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 167 168 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 168 169 (fontified t) 169 170 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 170 171 (fontified t) 171 172 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 172 173 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 173 174 (fontified t) 174 175 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 175 176 (fontified t) 176 178 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 178 179 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 179 180 (fontified t)) . 5509) (undo-tree-id785 . -131) (undo-tree-id786 . -179) (undo-tree-id787 . -22) (undo-tree-id788 . -131) (undo-tree-id789 . -6) (undo-tree-id790 . -152) (undo-tree-id791 . -152) (undo-tree-id792 . -141) (undo-tree-id793 . -141) (undo-tree-id794 . -176) (undo-tree-id795 . -176) (undo-tree-id796 . -62) (undo-tree-id797 . -62) (undo-tree-id798 . -62) (undo-tree-id799 . -62) (undo-tree-id800 . -62) (undo-tree-id801 . -62) (undo-tree-id802 . -180) (undo-tree-id803 . -180) (undo-tree-id804 . -180) (undo-tree-id805 . -176) (undo-tree-id806 . -176) (undo-tree-id807 . -176) (undo-tree-id808 . -180) (undo-tree-id809 . -180) (undo-tree-id810 . -180) (undo-tree-id811 . -180) (undo-tree-id812 . -56) (undo-tree-id813 . -56) (undo-tree-id814 . -56) (undo-tree-id815 . -56) (undo-tree-id816 . -56) (undo-tree-id817 . -56) (undo-tree-id818 . -152) (undo-tree-id819 . -152) (undo-tree-id820 . -152) (undo-tree-id821 . -152) (undo-tree-id822 . -152) (undo-tree-id823 . -152) (undo-tree-id824 . -152) (undo-tree-id825 . -152) (undo-tree-id826 . -150) (undo-tree-id827 . -151) (undo-tree-id828 . -131) (undo-tree-id829 . -180) (undo-tree-id830 . -22) (undo-tree-id831 . -22) (undo-tree-id832 . -22) (undo-tree-id833 . -22) (undo-tree-id834 . -180) (undo-tree-id835 . -22) (undo-tree-id836 . -131) (undo-tree-id837 . -131) (undo-tree-id838 . -180) (undo-tree-id839 . -131) (undo-tree-id840 . -180) (undo-tree-id841 . -180) 5640 (t 26286 9044 964643 187000)) nil (26286 9061 397222 359000) 0 nil])
([nil nil ((#("  stree <- buildSTree $ U.imap (\\i x -> if testBit x iBit then Acc i else mempty) xs
" 0 2 (fontified t) 2 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (fontified t) 8 9 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 9 10 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 10 11 (fontified t) 11 21 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 21 22 (fontified t) 22 23 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 23 24 (fontified t) 24 25 (face tree-sitter-hl-face:type.builtin fontified t) 25 26 (fontified t) 26 27 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 27 30 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 30 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 32 33 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 33 34 (face tree-sitter-hl-face:variable fontified t) 34 35 (fontified t) 35 36 (face tree-sitter-hl-face:variable fontified t) 36 37 (fontified t) 37 38 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 38 39 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 39 40 (fontified t) 40 42 (face tree-sitter-hl-face:keyword fontified t) 42 43 (fontified t) 43 50 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 50 51 (fontified t) 51 52 (face tree-sitter-hl-face:variable fontified t) 52 53 (fontified t) 53 57 (face tree-sitter-hl-face:variable fontified t) 57 58 (fontified t) 58 62 (face tree-sitter-hl-face:keyword fontified t) 62 63 (fontified t) 63 66 (face tree-sitter-hl-face:constructor fontified t) 66 67 (fontified t) 67 68 (face tree-sitter-hl-face:variable fontified t) 68 69 (fontified t) 69 73 (face tree-sitter-hl-face:keyword fontified t) 73 74 (fontified t) 74 80 (face tree-sitter-hl-face:variable fontified t) 80 81 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 81 82 (fontified t) 82 84 (face tree-sitter-hl-face:variable fontified t) 84 85 (fontified t)) . 5276) (undo-tree-id777 . -84) (undo-tree-id778 . -31) (undo-tree-id779 . -15) (undo-tree-id780 . -15) (undo-tree-id781 . -15) (undo-tree-id782 . -85) (undo-tree-id783 . -85) (undo-tree-id784 . -85)) nil (26286 9061 397206 628000) 0 nil])
([nil nil ((#("runST $ do" 0 5 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 5 6 (fontified t) 6 7 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 7 8 (fontified t) 8 10 (face tree-sitter-hl-face:keyword fontified t)) . 5265) (undo-tree-id770 . -9) (undo-tree-id771 . -8) (undo-tree-id772 . -6) (undo-tree-id773 . -8) (undo-tree-id774 . -6) (undo-tree-id775 . -10) (undo-tree-id776 . -10)) nil (26286 9061 397204 366000) 0 nil])
([nil nil ((#("
  " 0 1 (fontified nil face tree-sitter-hl-face:operator) 1 3 (fontified nil)) . 5264) (undo-tree-id759 . -2) (undo-tree-id760 . -3) (5264 . 5267) (#(" " 0 1 (fontified t)) . 5264) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1)) nil (26286 9061 397202 573000) 0 nil])
([nil nil ((#("t" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . 5292) (5293 . 5294) 5292 (#("e" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . 5291) (5292 . 5293) 5291 (#("l" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . 5290) (5291 . 5292) 5290) nil (26286 9061 397192 299000) 0 nil])
([nil nil ((#("t" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified nil)) . 5393) (5394 . 5395) 5393 (#("e" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified nil)) . 5392) (5393 . 5394) 5392 (#("l" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . 5391) (5392 . 5393) 5391) nil (26286 9061 397187 611000) 0 nil])
([nil nil ((5432 . 5435) (#("U" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -5432) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (#("." 0 1 (face tree-sitter-hl-face:operator fontified t)) . -5433) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5434) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5435) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5436) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) 5437 (#(" " 0 1 (fontified t)) . -5437) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) 5438 (5429 . 5438) (#(" " 0 1 (fontified t)) . -5429) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (#(" " 0 1 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t)) . -5430) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (#(" " 0 1 (fontified t)) . -5431) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (#(" " 0 1 (fontified t)) . -5432) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (#(" " 0 1 (fontified t)) . -5433) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) 5434 (5425 . 5434) (#(" " 0 1 (fontified t)) . 5425) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) 5426 (5422 . 5426) (5419 . 5422) (5412 . 5419) 5393 (t 26286 9061 400856 873000)) nil (26286 9067 552630 756000) 0 nil])
([nil nil (5421) nil (26286 9082 449455 143000) 0 nil])
([nil nil ((5419 . 5420) (t 26286 9067 553937 87000)) nil (26286 9082 449454 919000) 0 nil])
([nil nil ((5432 . 5451) (#("=" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . -5432) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5433) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) 5434 (5431 . 5434) (5428 . 5429) (5425 . 5428) (5424 . 5425)) nil (26286 9082 449454 312000) 0 nil])
([nil nil ((5466 . 5477) (5461 . 5466) (5459 . 5461) (5452 . 5459) (5434 . 5435)) nil (26286 9082 449442 826000) 0 nil])
([nil nil ((5491 . 5492) (5477 . 5491) (5466 . 5477) (#("
" 0 1 (fontified t)) . -5466) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (#("
" 0 1 (indent-bars-display #("  │ │ │
" 2 3 (face indent-bars-1) 4 5 (face indent-bars-2) 6 7 (face indent-bars-3)) fontified t)) . -5467) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) 5468 (#("          " 0 2 (fontified t) 2 3 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 3 4 (fontified t) 4 5 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 5 6 (fontified t) 6 7 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified t) 7 10 (fontified t)) . -5468) (undo-tree-id1098 . -10) (undo-tree-id1099 . -10) (undo-tree-id1100 . -10) 5478 (5467 . 5478) (#("          " 0 2 (fontified t) 2 3 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 3 4 (fontified t) 4 5 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 5 6 (fontified t) 6 7 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t)) . 5467) (undo-tree-id1101 . -10) (undo-tree-id1102 . -9) (undo-tree-id1103 . -10) (undo-tree-id1104 . -9) (undo-tree-id1105 . -9) (undo-tree-id1106 . -9) (undo-tree-id1107 . -9) (undo-tree-id1108 . -9) (undo-tree-id1109 . -9) (undo-tree-id1110 . -10) (undo-tree-id1111 . -9) (undo-tree-id1112 . -10) (undo-tree-id1113 . -9) (undo-tree-id1114 . -10) (undo-tree-id1115 . -10) (undo-tree-id1116 . -10) (undo-tree-id1117 . -10) (undo-tree-id1118 . -10) (undo-tree-id1119 . -10) (undo-tree-id1120 . -10) (undo-tree-id1121 . -10) (undo-tree-id1122 . -10) (undo-tree-id1123 . -10) (undo-tree-id1124 . -10) (undo-tree-id1125 . -10) (undo-tree-id1126 . -10) (undo-tree-id1127 . -10) (undo-tree-id1128 . -10) (undo-tree-id1129 . -10) (undo-tree-id1130 . -10) (undo-tree-id1131 . -10) 5477 (#("s" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -5477) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -5478) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -5479) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) 5480 (5477 . 5480) (t 26286 9082 452131 784000)) nil (26286 9093 567568 670000) 0 nil])
([nil nil ((5524 . 5525) (5523 . 5524) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5523) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5524) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5525) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) 5526 (5521 . 5526) (5520 . 5521) (5510 . 5520) (5499 . 5510) (5498 . 5499) (5495 . 5498) (#("s" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -5495) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (#("e" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -5496) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) 5497 (5492 . 5497) (t 26286 9093 569277 506000)) nil (26286 9104 617704 89000) 0 nil])
([nil nil ((5526 . 5531) (5525 . 5526) (t 26286 9104 619422 706000)) nil (26286 9115 598233 73000) 0 nil])
([nil nil ((5564 . 5569) (5549 . 5564) (5544 . 5549) (#("q" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5544) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5545) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (#("w" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5546) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) 5547 (5544 . 5547) (5531 . 5544) 5530 (t 26286 9115 600567 344000)) nil (26286 9128 840652 699000) 0 nil])
([nil nil ((5566 . 5568) (#("=" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . -5566) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (#(" " 0 1 (fontified t)) . -5567) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) 5568 (5567 . 5568) (t 26286 9128 842742 209000)) nil (26286 9131 823062 666000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5569) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (t 26286 9131 824781 654000)) nil (26286 9133 653649 938000) 0 nil])
([nil nil ((5570 . 5591) (5569 . 5570) (t 26286 9133 654805 873000)) nil (26286 9147 458573 553000) 0 nil])
([nil nil ((5568 . 5572) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5568) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) 5569 (5565 . 5569) (#(" " 0 1 (fontified t)) . -5565) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (#(" " 0 1 (fontified t)) . -5566) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) 5567 (5552 . 5567) (5548 . 5552) (5544 . 5548) (#("b" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -5544) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) 5545 (5540 . 5545) (5529 . 5540) (#(" =" 0 1 (fontified t) 1 2 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . 5529) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -2) (undo-tree-id1254 . -2) (undo-tree-id1255 . -2) (undo-tree-id1256 . -2) (t 26286 9147 461988 888000)) nil (26286 9155 619475 940000) 0 nil])
([nil nil ((5552 . 5553) (t 26286 9155 622097 288000)) nil (26286 9156 934387 881000) 0 nil])
([nil nil ((5557 . 5560) (5553 . 5557) (t 26286 9156 938114 786000)) nil (26286 9166 272650 61000) 0 nil])
([nil nil ((5570 . 5571) (5564 . 5570) (5563 . 5564) (5560 . 5563) (t 26286 9166 274239 54000)) nil (26286 9188 144321 631000) 0 nil])
([nil nil ((5591 . 5592)) nil (26286 9188 144321 245000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 5591) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1)) nil (26286 9188 144320 858000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5592 . 5593) (nil fontified nil 5591 . 5593) (5591 . 5593) 5590) nil (26286 9188 144319 764000) 0 nil])
([nil nil ((#(" =" 0 1 (fontified t) 1 2 (face tree-sitter-hl-face:operator syntax-table (1) rear-nonsticky t fontified t)) . 5591) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -2) (undo-tree-id1263 . -2)) nil (26286 9188 144319 215000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5608 . 5609) (nil fontified nil 5591 . 5609) (5591 . 5609) 5590) nil (26286 9188 144312 923000) 0 nil])
([nil nil ((5591 . 5595)) nil (26286 9188 144310 944000) 0 nil])
([nil nil ((5598 . 5599) (5597 . 5598) (5592 . 5597) (#("-" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -5592) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) 5593 (5592 . 5593) (#("
" 0 1 (fontified t)) . -5592) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) 5593 (#("                " 0 2 (fontified t) 2 3 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 3 4 (fontified t) 4 5 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 5 6 (fontified t) 6 7 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified t) 7 8 (fontified t) 8 9 (indent-bars-display #("│" 0 1 (face indent-bars-4)) fontified t) 9 10 (fontified t) 10 11 (indent-bars-display #("│" 0 1 (face indent-bars-5)) fontified t) 11 12 (fontified t) 12 13 (indent-bars-display #("│" 0 1 (face indent-bars-6)) fontified t) 13 16 (fontified t)) . -5593) (undo-tree-id1277 . -16) (undo-tree-id1278 . -16) (undo-tree-id1279 . -16) 5609 (5592 . 5609) (#("  " 0 1 (fontified t) 1 2 (fontified t)) . 5592) (undo-tree-id1280 . -1) (undo-tree-id1281 . -2) (undo-tree-id1282 . -2) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) 5593 (5591 . 5593) (#("n" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . 5591) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (t 26286 9188 147531 52000)) nil (26286 9197 279638 914000) 0 nil])
([nil nil ((#("            | not b' = csum +! (i, n - 1)
            | b' = (n - i) - csum +! (i, n - 1)
" 0 2 (fontified t) 2 3 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 3 4 (fontified t) 4 5 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 5 6 (fontified t) 6 7 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified t) 7 8 (fontified t) 8 9 (indent-bars-display #("│" 0 1 (face indent-bars-4)) fontified t) 9 10 (fontified t) 10 11 (indent-bars-display #("│" 0 1 (face indent-bars-5)) fontified t) 11 12 (fontified t) 12 13 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 13 14 (fontified t) 14 17 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 17 18 (fontified t) 18 20 (face tree-sitter-hl-face:variable fontified t) 20 21 (fontified t) 21 22 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 22 23 (fontified t) 23 27 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 27 28 (fontified t) 28 29 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 29 30 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 30 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 32 33 (face tree-sitter-hl-face:variable fontified t) 33 34 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 34 35 (fontified t) 35 36 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 36 37 (fontified t) 37 38 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 38 39 (fontified t) 39 40 (face tree-sitter-hl-face:number syntax-table (2) fontified t) 40 41 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 41 42 (fontified t) 42 44 (fontified t) 44 45 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 45 46 (fontified t) 46 47 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 47 48 (fontified t) 48 49 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified t) 49 50 (fontified t) 50 51 (indent-bars-display #("│" 0 1 (face indent-bars-4)) fontified t) 51 52 (fontified t) 52 53 (indent-bars-display #("│" 0 1 (face indent-bars-5)) fontified t) 53 54 (fontified t) 54 55 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 55 56 (fontified t) 56 58 (face tree-sitter-hl-face:variable fontified t) 58 59 (fontified t) 59 60 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 60 61 (fontified t) 61 62 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 62 63 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 63 64 (fontified t) 64 65 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 65 66 (fontified t) 66 67 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 67 68 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 68 69 (fontified t) 69 70 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 70 71 (fontified t) 71 75 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 75 76 (fontified t) 76 78 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 78 79 (fontified t) 79 80 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 80 81 (face tree-sitter-hl-face:variable fontified t) 81 82 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 82 83 (fontified t) 83 84 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 84 85 (fontified t) 85 86 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 86 87 (fontified t) 87 88 (face tree-sitter-hl-face:number syntax-table (2) fontified t) 88 89 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) rear-nonsticky t fontified t) 89 90 (fontified t)) . 5530) (undo-tree-id1294 . -64) (undo-tree-id1295 . 67) (undo-tree-id1296 . -89) (undo-tree-id1297 . -22) (undo-tree-id1298 . -64) (undo-tree-id1299 . -64) (undo-tree-id1300 . -61) (undo-tree-id1301 . -70) (undo-tree-id1302 . -70) (undo-tree-id1303 . -62) (undo-tree-id1304 . -62) (undo-tree-id1305 . -62) (undo-tree-id1306 . -62) (undo-tree-id1307 . -62) (undo-tree-id1308 . -62) (undo-tree-id1309 . -62) (undo-tree-id1310 . -68) (undo-tree-id1311 . -69) (undo-tree-id1312 . -68) (undo-tree-id1313 . -68) (undo-tree-id1314 . -68) (undo-tree-id1315 . -68) (undo-tree-id1316 . -68) (undo-tree-id1317 . -68) (undo-tree-id1318 . -68) (undo-tree-id1319 . -54) (undo-tree-id1320 . -68) (undo-tree-id1321 . -54) (undo-tree-id1322 . -54) (undo-tree-id1323 . -54) (undo-tree-id1324 . -61) (undo-tree-id1325 . -54) (undo-tree-id1326 . -54) (undo-tree-id1327 . -90) (undo-tree-id1328 . -42) (undo-tree-id1329 . -90) (undo-tree-id1330 . -42) (undo-tree-id1331 . -10) (undo-tree-id1332 . -52) (undo-tree-id1333 . -10) (undo-tree-id1334 . -52) (undo-tree-id1335 . -52) (undo-tree-id1336 . -10) (undo-tree-id1337 . -52) (undo-tree-id1338 . -12) (undo-tree-id1339 . -10) (undo-tree-id1340 . -14) (undo-tree-id1341 . -12) (undo-tree-id1342 . -18) (undo-tree-id1343 . -14) (undo-tree-id1344 . -19) (undo-tree-id1345 . -18) (undo-tree-id1346 . -21) (undo-tree-id1347 . -19) (undo-tree-id1348 . -21) (undo-tree-id1349 . -21) (undo-tree-id1350 . -20) (undo-tree-id1351 . -21) (undo-tree-id1352 . -21) (undo-tree-id1353 . -20) (undo-tree-id1354 . -23) (undo-tree-id1355 . -21) (undo-tree-id1356 . -23) (undo-tree-id1357 . -23) (undo-tree-id1358 . -22) (undo-tree-id1359 . -23) (undo-tree-id1360 . -22) (undo-tree-id1361 . -22) (undo-tree-id1362 . -42) (undo-tree-id1363 . -64) (undo-tree-id1364 . -22) (undo-tree-id1365 . -64) (undo-tree-id1366 . -90) 5594 (t 26286 9197 281653 335000)) nil (26286 9242 689265 370000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5601 . 5602) (#("
" 0 1 (fontified nil)) . -5679) (5589 . 5680) 5564) nil (26286 9242 688306 256000) 0 nil])
([nil nil ((5603 . 5608) (#(" " 0 1 (fontified t)) . -5603) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) 5604 (5589 . 5604) 5560) nil (26286 9242 688305 780000) 0 nil])
([nil nil ((apply -4 5655 5718 undo--wrap-and-run-primitive-undo 5655 5718 ((5670 . 5671) nil (5669 . 5670) nil (5668 . 5669) nil (5667 . 5668))) (5621 . 5625)) nil (26286 9242 688303 794000) 0 nil])
([nil nil ((5541 . 5542) (5538 . 5541) (5537 . 5538) (5535 . 5537) (#("'" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -5535) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) 5536 (5529 . 5536)) nil (26286 9242 688302 167000) 0 nil])
([nil nil ((5403 . 5411) (t 26286 9242 690264 122000)) nil (26286 9251 897679 431000) 0 nil])
([nil nil ((#("dbgId " 0 5 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 5 6 (fontified t)) . 5403) (undo-tree-id1379 . -5) (undo-tree-id1380 . -6) (undo-tree-id1381 . -6) (undo-tree-id1382 . -6) (t 26286 9251 899388 556000)) nil (26286 9261 18624 322000) 0 nil])
([nil nil ((#("$ " 0 1 (face haskell-operator-face syntax-table (1) fontified t) 1 2 (fontified t)) . 5403) (undo-tree-id1367 . -1) (undo-tree-id1368 . -2) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -2) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -2)) nil (26286 9266 522561 817000) 0 nil])
([nil nil ((5617 . 5619) (#("acc'" 0 4 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . 5617) (undo-tree-id1407 . -3) (undo-tree-id1408 . -4) (undo-tree-id1409 . -4) (undo-tree-id1410 . -4) (undo-tree-id1411 . -4) (t 26286 9261 20511 981000)) nil (26286 9277 56841 676000) 0 nil] [nil nil ((5575 . 5577) (t 26286 9261 20511 981000)) ((#("ac" 0 2 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . 5575) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -2) (undo-tree-id1387 . -1)) (26286 9266 521470 814000) 0 nil])
([nil nil ((5537 . 5539) (#(" " 0 1 (fontified t)) . -5537) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) 5538 (5533 . 5538)) nil (26286 9277 56840 69000) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . -5537) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (#("x" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -5538) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) 5539 (5538 . 5539)) nil (26286 9277 56838 705000) 0 nil])
([nil nil ((#("'" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . 5541) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1)) nil (26286 9277 56833 494000) 0 nil])
([nil nil ((5432 . 5440) (t 26286 9277 58729 428000)) nil (26286 9290 32799 386000) 0 nil])
([nil nil ((5432 . 5441) (#("dbgId" 0 5 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . 5432) (undo-tree-id1412 . -4) (undo-tree-id1413 . -5) (undo-tree-id1414 . -5) (t 26286 9290 35905 760000)) nil (26286 9292 390674 634000) 0 nil])
([nil nil ((5634 . 5635) (#("x" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . 5634) (undo-tree-id1418 . -1) (t 26286 9292 392937 823000)) nil (26286 9309 65406 642000) 0 nil])
([nil nil ((5546 . 5547) (#("x" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . 5546) (undo-tree-id1419 . -1)) nil (26286 9313 239627 248000) 0 nil] [nil nil ((5540 . 5541) (#("x" 0 1 (face (tree-sitter-hl-face:variable.parameter tree-sitter-hl-face:variable) fontified t)) . 5540) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1)) ((5540 . 5541) (#("n" 0 1 (face (tree-sitter-hl-face:variable.parameter tree-sitter-hl-face:variable) fontified t)) . 5540)) (26286 9309 63419 816000) 0 nil])
([nil nil ((5547 . 5558)) nil (26286 9313 239618 716000) 0 nil])
nil
([nil nil ((5684 . 5688) (t 26286 9313 242221 909000)) nil (26286 9373 598049 150000) 0 nil])
([nil nil ((5740 . 5744)) nil (26286 9386 346095 46000) 0 nil])
([nil nil ((5472 . 5473) (5465 . 5470) (#("ta" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified nil) 1 2 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified nil)) . 5465) (undo-tree-id1437 . -1) (undo-tree-id1438 . -2) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (5462 . 5467) (t 26286 9388 508254 117000)) ((#("(U.ta" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified nil) 1 2 (face tree-sitter-hl-face:type.builtin fontified nil) 2 3 (fontified nil) 3 4 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified nil) 4 5 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified nil)) . 5462) (undo-tree-id1430 . -4) (undo-tree-id1431 . -5) (undo-tree-id1432 . -4) (undo-tree-id1433 . -4) (undo-tree-id1434 . -4) (5465 . 5467) (#("init " 0 4 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified nil) 4 5 (fontified nil)) . 5465) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 5472) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (t 26286 9379 321127 597000)) (26286 9392 200524 678000) 0 nil])
([nil nil ((5740 . 5741) (5734 . 5740) (#("i" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . 5734) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (t 26286 9392 743312 487000)) nil (26286 9425 568470 490000) 0 nil])
([nil nil ((5403 . 5411) (t 26286 9425 571765 924000)) nil (26286 9459 297078 479000) 0 nil])
([nil nil ((5403 . 5412) (#("dbgId" 0 5 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t)) . 5403) (undo-tree-id1449 . -4) (undo-tree-id1450 . -5) (undo-tree-id1451 . -5) (t 26286 9457 22201 867000)) nil (26286 9461 411197 907000) 0 nil] [nil nil ((#("=" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t)) . 5401) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (t 26286 9457 22201 867000)) ((5401 . 5402)) (26286 9459 296029 614000) 0 nil])
([nil nil ((5300 . 5308) (t 26286 9461 413262 848000)) nil (26286 9508 989047 601000) 0 nil])
nil
([nil nil ((5907 . 5908) (#("28" 0 1 (syntax-table (2) face tree-sitter-hl-face:number fontified t) 1 2 (syntax-table (2) face tree-sitter-hl-face:number fontified t)) . 5907) (undo-tree-id1452 . -1) (undo-tree-id1453 . -2) (undo-tree-id1454 . -2) (t 26286 9508 990925 298000)) nil (26286 9564 483197 599000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5920 . 5921) (#("
" 0 1 (fontified nil)) . -5962) (5918 . 5963) 5907 (t 26286 9564 484701 671000)) nil (26286 9568 295535 441000) 0 nil])
([nil nil ((apply -3 5919 5966 undo--wrap-and-run-primitive-undo 5919 5966 ((5921 . 5924)))) nil (26286 9568 295534 936000) 0 nil])
([nil nil ((5954 . 5956) (#("4" 0 1 (face tree-sitter-hl-face:comment fontified t)) . 5954) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1)) nil (26286 9568 295533 455000) 0 nil])
([nil nil ((#("'" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 5699) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (t 26286 9568 297755 153000)) nil (26286 9639 604492 219000) 0 nil])
([nil nil ((#("'" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 5744) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1)) nil (26286 9639 604489 29000) 0 nil])
([nil nil ((#("b `xor` testBit x iBit" 0 1 (face (tree-sitter-hl-face:property tree-sitter-hl-face:variable) fontified t) 1 2 (fontified t) 2 3 (font-lock-multiline t face tree-sitter-hl-face:operator fontified t font-lock-fontified t) 3 6 (font-lock-multiline t face (tree-sitter-hl-face:operator tree-sitter-hl-face:variable) fontified t font-lock-fontified t) 6 7 (font-lock-multiline t face tree-sitter-hl-face:operator fontified t font-lock-fontified t) 7 8 (fontified t font-lock-fontified t) 8 15 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t font-lock-fontified t) 15 16 (fontified t font-lock-fontified t) 16 17 (face tree-sitter-hl-face:variable fontified t font-lock-fontified t) 17 18 (fontified t font-lock-fontified t) 18 22 (face tree-sitter-hl-face:variable fontified t font-lock-fontified t)) . 5636) (undo-tree-id1485 . -21) (undo-tree-id1486 . -22) (undo-tree-id1487 . -22) (t 26286 9639 607758 298000)) nil (26286 9644 964105 928000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5616 . 5617) (nil fontified nil 5595 . 5617) (5595 . 5617)) nil (26286 9644 964104 615000) 0 nil])
([nil nil ((#("b'" 0 2 (face tree-sitter-hl-face:variable fontified t)) . 5617) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -2)) nil (26286 9644 964104 133000) 0 nil])
([nil nil ((#("              b' = 
" 0 2 (fontified t) 2 3 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 3 4 (fontified t) 4 5 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 5 6 (fontified t) 6 7 (indent-bars-display #("│" 0 1 (face indent-bars-3)) fontified t) 7 8 (fontified t) 8 9 (indent-bars-display #("│" 0 1 (face indent-bars-4)) fontified t) 9 10 (fontified t) 10 11 (indent-bars-display #("│" 0 1 (face indent-bars-5)) fontified t) 11 12 (fontified t) 12 13 (indent-bars-display #("│" 0 1 (face indent-bars-6)) fontified t) 13 14 (fontified t) 14 16 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 16 17 (fontified t) 17 18 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 18 19 (fontified t) 19 20 (fontified t font-lock-fontified t)) . 5637) (undo-tree-id1462 . -19) (undo-tree-id1463 . -14) (undo-tree-id1464 . -14) (undo-tree-id1465 . -19) (undo-tree-id1466 . -19) (undo-tree-id1467 . -19) (undo-tree-id1468 . -19) (undo-tree-id1469 . -18) (undo-tree-id1470 . -19) (undo-tree-id1471 . -18) (undo-tree-id1472 . -18) (undo-tree-id1473 . -18) (undo-tree-id1474 . -18) (undo-tree-id1475 . -18) (undo-tree-id1476 . -18) (undo-tree-id1477 . -18) (undo-tree-id1478 . -18) (undo-tree-id1479 . -18) (undo-tree-id1480 . -20) 5655) nil (26286 9730 64253 339000) 0 nil])
([nil nil ((apply 3 5895 5939 undo--wrap-and-run-primitive-undo 5895 5939 ((#("-- " 0 3 (face tree-sitter-hl-face:comment fontified t)) . -5897) 5895))) nil (26286 9732 99006 19000) 0 nil] [nil nil ((6075 . 6426) (apply tempel--disable) (#("quickcheck" 0 10 (face tree-sitter-hl-face:variable fontified nil)) . -6075) (undo-tree-id1488 . -10) (undo-tree-id1489 . -1) (undo-tree-id1490 . -10) (undo-tree-id1491 . -1) (undo-tree-id1492 . -10) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . 6085) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (6076 . 6085) 6077 (6075 . 6077) (6074 . 6075) (6073 . 6074) 6055 (t 26286 9644 966833 902000)) ((#("
" 0 1 (fontified t)) . 6073) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (#("
" 0 1 (fontified t)) . 6074) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (#("qc" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (face tree-sitter-hl-face:variable fontified nil)) . 6075) (undo-tree-id1556 . -1) (undo-tree-id1557 . -2) (undo-tree-id1558 . -1) (#("uickcheck" 0 9 (face tree-sitter-hl-face:variable fontified nil)) . 6076) (6075 . 6086) (#("propQC :: QC.Property
propQC =
  -- 1 <= N <= maxN
  QC.forAll (QC.choose (1, maxN)) $ \\n -> do
    -- [x | 1 <= x <= 5,000]
    QC.forAll (QC.vectorOf n (QC.choose (1, 5000))) \\xs -> do
      let !xs' = U.fromList xs
      solveAC n xs' QC.=== solveWA n xs'
  where
    maxN = 1000

runQC :: IO ()
runQC = QC.quickCheck (QC.withMaxSuccess 100 propQC)" 0 6 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 6 7 (fontified t) 7 9 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 9 10 (haskell-type t font-lock-multiline t fontified t) 10 12 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type.builtin fontified t) 12 13 (haskell-type t font-lock-multiline t fontified t) 13 21 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 21 22 (haskell-type t font-lock-multiline t fontified t) 22 28 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 28 29 (fontified t) 29 30 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 30 33 (fontified t) 33 50 (face tree-sitter-hl-face:comment fontified t) 50 53 (fontified t) 53 55 (face tree-sitter-hl-face:type.builtin fontified t) 55 56 (fontified t) 56 62 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 62 63 (fontified t) 63 64 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 64 66 (face tree-sitter-hl-face:type.builtin fontified t) 66 67 (fontified t) 67 73 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 73 74 (fontified t) 74 75 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 75 76 (face tree-sitter-hl-face:number syntax-table (2) fontified t) 76 77 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 77 78 (fontified t) 78 82 (face tree-sitter-hl-face:variable fontified t) 82 83 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 83 84 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 84 85 (fontified t) 85 86 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 86 87 (fontified t) 87 88 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 88 89 (face tree-sitter-hl-face:variable fontified t) 89 90 (fontified t) 90 92 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 92 93 (fontified t) 93 95 (face tree-sitter-hl-face:keyword fontified t) 95 98 (fontified t) 98 99 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 99 100 (fontified t) 100 124 (face tree-sitter-hl-face:comment fontified t) 124 127 (fontified t) 127 128 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 128 129 (fontified t) 129 131 (face tree-sitter-hl-face:type.builtin fontified t) 131 132 (fontified t) 132 138 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 138 139 (fontified t) 139 140 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 140 142 (face tree-sitter-hl-face:type.builtin fontified t) 142 143 (fontified t) 143 151 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 151 152 (fontified t) 152 153 (face tree-sitter-hl-face:variable fontified t) 153 154 (fontified t) 154 155 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 155 157 (face tree-sitter-hl-face:type.builtin fontified t) 157 158 (fontified t) 158 164 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 164 165 (fontified t) 165 166 (face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified t) 166 167 (face tree-sitter-hl-face:number syntax-table (2) fontified t) 167 168 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 168 169 (fontified t) 169 173 (face tree-sitter-hl-face:number syntax-table (2) fontified t) 173 174 (face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified t) 174 175 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 175 176 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 176 177 (fontified t) 177 178 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 178 180 (face tree-sitter-hl-face:variable fontified t) 180 181 (fontified t) 181 183 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 183 184 (fontified t) 184 186 (face tree-sitter-hl-face:keyword fontified t) 186 189 (fontified t) 189 190 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 190 191 (fontified t) 191 192 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 192 193 (fontified t) 193 196 (face tree-sitter-hl-face:keyword fontified t) 196 197 (fontified t) 197 198 (face haskell-operator-face syntax-table (1) fontified t) 198 201 (face tree-sitter-hl-face:variable fontified t) 201 202 (fontified t) 202 203 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 203 204 (fontified t) 204 205 (face tree-sitter-hl-face:type.builtin fontified t) 205 206 (fontified t) 206 214 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 214 215 (fontified t) 215 217 (face tree-sitter-hl-face:variable fontified t) 217 220 (fontified t) 220 221 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 221 222 (fontified t) 222 223 (indent-bars-display #("│" 0 1 (face indent-bars-2)) fontified t) 223 224 (fontified t) 224 231 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 231 232 (fontified t) 232 233 (face tree-sitter-hl-face:variable fontified t) 233 234 (fontified t) 234 237 (face tree-sitter-hl-face:variable fontified t) 237 238 (fontified t) 238 240 (face tree-sitter-hl-face:type.builtin fontified t) 240 241 (fontified t) 241 244 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 244 245 (fontified t) 245 252 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 252 253 (fontified t) 253 254 (face tree-sitter-hl-face:variable fontified t) 254 255 (fontified t) 255 258 (face tree-sitter-hl-face:variable fontified t) 258 261 (fontified t) 261 266 (face tree-sitter-hl-face:keyword fontified t) 266 269 (fontified t) 269 270 (indent-bars-display #("│" 0 1 (face indent-bars-1)) fontified t) 270 271 (fontified t) 271 275 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 275 276 (fontified t) 276 277 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 277 278 (fontified t) 278 282 (face tree-sitter-hl-face:number syntax-table (2) fontified t) 282 283 (fontified t) 283 284 (indent-bars-display #("  │
" 2 3 (face indent-bars-1)) fontified t) 284 289 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 289 290 (fontified t) 290 292 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 292 293 (haskell-type t font-lock-multiline t fontified t) 293 295 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 295 296 (haskell-type t font-lock-multiline t fontified t) 296 297 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 297 298 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 298 299 (haskell-type t font-lock-multiline t fontified t) 299 304 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 304 305 (fontified t) 305 306 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 306 307 (fontified t) 307 309 (face tree-sitter-hl-face:type.builtin fontified t) 309 310 (fontified t) 310 320 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 320 321 (fontified t) 321 322 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 322 324 (face tree-sitter-hl-face:type.builtin fontified t) 324 325 (fontified t) 325 339 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 339 340 (fontified t) 340 343 (face tree-sitter-hl-face:number syntax-table (2) fontified t) 343 344 (fontified t) 344 350 (face tree-sitter-hl-face:variable fontified t) 350 351 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 6075) (undo-tree-id1559 . -350) (undo-tree-id1560 . -350) (undo-tree-id1561 . -351) (undo-tree-id1562 . -350) (undo-tree-id1563 . -350) (undo-tree-id1564 . -350) (undo-tree-id1565 . -350) (undo-tree-id1566 . -350) (undo-tree-id1567 . -350) (undo-tree-id1568 . -350) (undo-tree-id1569 . -350) (undo-tree-id1570 . -350) (undo-tree-id1571 . -350) (undo-tree-id1572 . -283) (undo-tree-id1573 . -350) (undo-tree-id1574 . -350) (undo-tree-id1575 . -283) (undo-tree-id1576 . -283) (undo-tree-id1577 . -283) (undo-tree-id1578 . -283) (undo-tree-id1579 . -283) (undo-tree-id1580 . -283) (undo-tree-id1581 . -283) (t 26286 9723 132939 747000)) (26286 9723 129719 827000) 0 nil])
([nil current ((apply -3 5851 5898 undo--wrap-and-run-primitive-undo 5851 5898 ((5853 . 5856) 5851))) nil (26286 9732 99002 651000) 0 nil])
nil
nil
