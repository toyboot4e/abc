(undo-tree-save-format-version . 1)
"8b6c9ad45c336f664a59f8d6446569d790caa8aa"
[nil nil nil nil (26286 7142 323914 182000) 0 nil]
([nil nil ((3930 . 4012) (#("<<url>>
main :: IO ()
main = runIO solve
" 0 7 (face tree-sitter-hl-face:comment fontified t) 7 8 (fontified t) 8 12 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 12 13 (fontified t) 13 15 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 15 16 (haskell-type t font-lock-multiline t fontified t) 16 18 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 18 19 (haskell-type t font-lock-multiline t fontified t) 19 20 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 20 21 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 21 22 (haskell-type t font-lock-multiline t fontified t) 22 26 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 26 27 (fontified t) 27 28 (face tree-sitter-hl-face:operator syntax-table (1) fontified t) 28 29 (fontified t) 29 34 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t) 34 35 (fontified t) 35 40 (face tree-sitter-hl-face:variable fontified t) 40 41 (fontified t)) . 3930) (t 26286 7108 801859 219000)) nil (26286 7142 323913 455000) 0 nil])
([nil nil ((3801 . 3803) (3801 . 3802) (t 26286 7112 623917 156000)) nil (26286 7142 323913 137000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3920 . 3921) (nil fontified nil 3804 . 3921) (3804 . 3921) (3801 . 3804) (#("  " 0 2 (fontified t)) . 3801) (undo-tree-id5 . -2) (undo-tree-id6 . -2) (undo-tree-id7 . -2) (undo-tree-id8 . -2) (undo-tree-id9 . -2) (undo-tree-id10 . -2) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -2) (undo-tree-id16 . -2) 3803) nil (26286 7142 324990 217000) 0 nil])
([nil nil ((4030 . 4047) (4027 . 4030) (4020 . 4027) (#("=" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t font-lock-fontified t)) . -4020) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 4021 (4005 . 4021) (#("y" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -4005) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#(" " 0 1 (fontified t)) . -4006) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("`" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -4007) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) 4008 (4006 . 4008) (#("y" 0 1 (face (tree-sitter-hl-face:function.call tree-sitter-hl-face:variable) fontified t)) . -4006) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 4007 (4003 . 4007) (4000 . 4003) (3981 . 4000) (#(" " 0 1 (fontified t)) . -3981) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) 3982 (3980 . 3982) (3976 . 3980) (#(" " 0 1 (fontified t)) . -3976) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) 3977 (3976 . 3977) (3973 . 3976) (3963 . 3973) (#("<" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t font-lock-fontified t)) . -3963) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#(">" 0 1 (face tree-sitter-hl-face:operator syntax-table (1) fontified t font-lock-fontified t)) . -3964) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) 3965 (3954 . 3965) (3952 . 3954) (3949 . 3952) (3948 . 3949) (3942 . 3948) (3941 . 3942) (3923 . 3941) (3922 . 3923) (3921 . 3922) 3899) nil (26286 7183 317226 454000) 0 nil] [nil nil ((#("StateT BS.ByteString IO ()" 0 6 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 6 7 (haskell-type t font-lock-multiline t fontified t) 7 9 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type.builtin fontified t) 9 10 (haskell-type t font-lock-multiline t fontified t) 10 20 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 20 21 (haskell-type t font-lock-multiline t fontified t) 21 23 (haskell-type t font-lock-multiline t face tree-sitter-hl-face:type fontified t) 23 24 (haskell-type t font-lock-multiline t fontified t) 24 25 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t) 25 26 (haskell-type t font-lock-multiline t face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 3932) (undo-tree-id0 . -25) (undo-tree-id1 . -26) (undo-tree-id2 . -26) (undo-tree-id3 . -26) (undo-tree-id4 . -26)) ((3932 . 3958)) (26286 7142 323907 76000) 0 nil])
([nil nil ((4259 . 4260) 3801) nil (26286 7183 317205 615000) 0 nil])
nil
([nil nil ((#("  !xs <- intsU'
" 0 2 (fontified t) 2 3 (face haskell-operator-face fontified t syntax-table (1)) 3 5 (face tree-sitter-hl-face:variable fontified t) 5 6 (fontified t) 6 8 (face tree-sitter-hl-face:operator fontified t syntax-table (1)) 8 9 (fontified t) 9 15 (face tree-sitter-hl-face:variable fontified t) 15 16 (fontified t)) . 4109) (undo-tree-id181 . -15) (undo-tree-id182 . -16) (undo-tree-id183 . -16) (undo-tree-id184 . -16) (t 26286 7183 319988 709000)) nil (26286 7198 115427 427000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4109) (undo-tree-id180 . -1)) nil (26286 7198 115426 31000) 0 nil])
([nil nil ((#("  Y が 4 の倍数でない年は

365 日

Y が 4 の倍数で、かつ 100 の倍数でない年は

366 日

Y が 100 の倍数で、かつ 400 の倍数でない年は

365 日

Y が 400 の倍数である年は 366 日

" 0 2 (fontified t) 2 3 (face tree-sitter-hl-face:constructor fontified t) 3 6 (fontified t) 6 7 (face tree-sitter-hl-face:number syntax-table (2) fontified t) 7 18 (fontified t) 18 21 (face tree-sitter-hl-face:number syntax-table (2) fontified t) 21 25 (fontified t) 25 26 (face tree-sitter-hl-face:type.builtin fontified t) 26 29 (fontified t) 29 30 (syntax-table (2) fontified t) 30 35 (fontified t) 35 36 (face haskell-operator-face syntax-table (1) fontified t) 36 39 (fontified t) 39 42 (syntax-table (2) fontified t) 42 53 (fontified t) 53 56 (syntax-table (2) fontified t) 56 60 (fontified t) 60 61 (face haskell-constructor-face fontified t) 61 64 (fontified t) 64 67 (syntax-table (2) fontified t) 67 72 (fontified t) 72 73 (face haskell-operator-face syntax-table (1) fontified t) 73 76 (fontified t) 76 79 (syntax-table (2) fontified t) 79 90 (fontified t) 90 93 (syntax-table (2) fontified t) 93 97 (fontified t) 97 98 (face haskell-constructor-face fontified t) 98 101 (fontified t) 101 104 (syntax-table (2) fontified t) 104 114 (fontified t) 114 117 (syntax-table (2) fontified t) 117 118 (fontified t) 118 119 (rear-nonsticky t fontified t) 119 120 (fontified t) 120 121 (fontified t)) . 3802) (undo-tree-id77 . -120) (undo-tree-id78 . -120) (undo-tree-id79 . -120) (undo-tree-id80 . -2) (undo-tree-id81 . -118) (undo-tree-id82 . -118) (undo-tree-id83 . -96) (undo-tree-id84 . -96) (undo-tree-id85 . -89) (undo-tree-id86 . -89) (undo-tree-id87 . -59) (undo-tree-id88 . -59) (undo-tree-id89 . -52) (undo-tree-id90 . -52) (undo-tree-id91 . -24) (undo-tree-id92 . -24) (undo-tree-id93 . -17) (undo-tree-id94 . -17) (undo-tree-id95 . -24) (undo-tree-id96 . -24) (undo-tree-id97 . -52) (undo-tree-id98 . -52) (undo-tree-id99 . -59) (undo-tree-id100 . -59) (undo-tree-id101 . -89) (undo-tree-id102 . -89) (undo-tree-id103 . -96) (undo-tree-id104 . -96) (undo-tree-id105 . -120) (undo-tree-id106 . -97) (undo-tree-id107 . -96) (undo-tree-id108 . -89) (undo-tree-id109 . -59) (undo-tree-id110 . -52) (undo-tree-id111 . -24) (undo-tree-id112 . -17) (undo-tree-id113 . -17) (undo-tree-id114 . -97) (undo-tree-id115 . -97) (undo-tree-id116 . -17) (undo-tree-id117 . -17) (undo-tree-id118 . -24) (undo-tree-id119 . -17) (undo-tree-id120 . -17) (undo-tree-id121 . -24) (undo-tree-id122 . -52) (undo-tree-id123 . -24) (undo-tree-id124 . -24) (undo-tree-id125 . -52) (undo-tree-id126 . -59) (undo-tree-id127 . -52) (undo-tree-id128 . -52) (undo-tree-id129 . -59) (undo-tree-id130 . -89) (undo-tree-id131 . -59) (undo-tree-id132 . -59) (undo-tree-id133 . -89) (undo-tree-id134 . -96) (undo-tree-id135 . -89) (undo-tree-id136 . -89) (undo-tree-id137 . -96) (undo-tree-id138 . -120) (undo-tree-id139 . -96) (undo-tree-id140 . -96) (undo-tree-id141 . -120) (undo-tree-id142 . -120) (undo-tree-id143 . -120) (undo-tree-id144 . -120) (undo-tree-id145 . -120) (undo-tree-id146 . -96) (undo-tree-id147 . -120) (undo-tree-id148 . -120) (undo-tree-id149 . -96) (undo-tree-id150 . -89) (undo-tree-id151 . -96) (undo-tree-id152 . -96) (undo-tree-id153 . -89) (undo-tree-id154 . -59) (undo-tree-id155 . -89) (undo-tree-id156 . -89) (undo-tree-id157 . -59) (undo-tree-id158 . -52) (undo-tree-id159 . -59) (undo-tree-id160 . -59) (undo-tree-id161 . -52) (undo-tree-id162 . -24) (undo-tree-id163 . -52) (undo-tree-id164 . -18) (undo-tree-id165 . -24) (undo-tree-id166 . -17) (undo-tree-id167 . -18) (undo-tree-id168 . -17) (undo-tree-id169 . -90) (undo-tree-id170 . -96) (undo-tree-id171 . -90) (undo-tree-id172 . -97) (undo-tree-id173 . -96) (undo-tree-id174 . -120) (undo-tree-id175 . -120) (undo-tree-id176 . -97) (undo-tree-id177 . -120) (undo-tree-id178 . -121) (undo-tree-id179 . -121) 3922) nil (26286 7198 115407 792000) 0 nil])
([nil current ((3999 . 4007) (#(" " 0 1 (fontified t)) . -3999) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) 4000 (3999 . 4000) (#("\"TODO\"" 0 1 (face tree-sitter-hl-face:string fontified t) 1 5 (face (warning bold tree-sitter-hl-face:string) fontified t) 5 6 (face tree-sitter-hl-face:string fontified t)) . 3999) (undo-tree-id67 . -5) (undo-tree-id68 . -6) (undo-tree-id69 . -5) (undo-tree-id70 . -1) (undo-tree-id71 . -5) (undo-tree-id72 . -1) (undo-tree-id73 . -6) (undo-tree-id74 . -6) (undo-tree-id75 . -6) (undo-tree-id76 . -6)) nil (26286 7198 115043 171000) 0 nil])
nil
